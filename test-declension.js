// –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–≥—ñ–∫–∏ –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è
const fs = require('fs');

// –Ü–º—ñ—Ç—É—î–º–æ UkrainianNameDeclension –∫–ª–∞—Å
class TestUkrainianNameDeclension {
  
  // –ë–∞–∑–∞ —á–æ–ª–æ–≤—ñ—á–∏—Ö —ñ–º–µ–Ω –∑ –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è–º
  static maleFirstNames = {
    "–û–ª–µ–∫—Å–∞–Ω–¥—Ä": {
      nominative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", genitive: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", dative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—É",
      accusative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", instrumental: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º", locative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ"
    },
    "–í–æ–ª–æ–¥–∏–º–∏—Ä": {
      nominative: "–í–æ–ª–æ–¥–∏–º–∏—Ä", genitive: "–í–æ–ª–æ–¥–∏–º–∏—Ä–∞", dative: "–í–æ–ª–æ–¥–∏–º–∏—Ä—É",
      accusative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–∞", instrumental: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–º", locative: "–í–æ–ª–æ–¥–∏–º–∏—Ä—ñ"
    }
  };

  // –ë–∞–∑–∞ –∂—ñ–Ω–æ—á–∏—Ö —ñ–º–µ–Ω
  static femaleFirstNames = {
    "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞": {
      nominative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", genitive: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∏", dative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ",
      accusative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—É", instrumental: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ—é", locative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ"
    }
  };

  // –ë–∞–∑–∞ —á–æ–ª–æ–≤—ñ—á–∏—Ö –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
  static malePatronymics = {
    "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á": {
      nominative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á", genitive: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞", dative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á—É",
      accusative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞", instrumental: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–µ–º", locative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á—ñ"
    }
  };

  // –ë–∞–∑–∞ –ø—Ä—ñ–∑–≤–∏—â (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è)
  static surnamePatterns = {
    // –ü—Ä—ñ–∑–≤–∏—â–∞ –Ω–∞ -–∞–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –®–æ—Å—Ç–∞–∫)
    "–∞–∫": {
      male: (base) => ({
        nominative: base + "–∞–∫", genitive: base + "–∞–∫–∞", dative: base + "–∞–∫—É",
        accusative: base + "–∞–∫–∞", instrumental: base + "–∞–∫–æ–º", locative: base + "–∞—Ü—ñ"
      }),
      female: (base) => ({
        nominative: base + "–∞–∫", genitive: base + "–∞–∫", dative: base + "–∞–∫",
        accusative: base + "–∞–∫", instrumental: base + "–∞–∫", locative: base + "–∞–∫"
      })
    }
  };

  static getFirstNameForms(firstName) {
    const forms = new Set();
    forms.add(firstName);

    // –ß–æ–ª–æ–≤—ñ—á—ñ —ñ–º–µ–Ω–∞
    if (this.maleFirstNames[firstName]) {
      const nameData = this.maleFirstNames[firstName];
      Object.values(nameData).forEach(form => forms.add(form));
    }

    // –ñ—ñ–Ω–æ—á—ñ —ñ–º–µ–Ω–∞  
    if (this.femaleFirstNames[firstName]) {
      const nameData = this.femaleFirstNames[firstName];
      Object.values(nameData).forEach(form => forms.add(form));
    }

    return Array.from(forms);
  }

  static getLastNameForms(lastName) {
    const forms = new Set();
    forms.add(lastName);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–∞–±–ª–æ–Ω–∏ –ø—Ä—ñ–∑–≤–∏—â
    for (const [pattern, rules] of Object.entries(this.surnamePatterns)) {
      if (lastName.endsWith(pattern)) {
        const base = lastName.slice(0, -pattern.length);
        
        // –î–æ–¥–∞—î–º–æ —á–æ–ª–æ–≤—ñ—á—ñ —Ñ–æ—Ä–º–∏
        const maleForms = rules.male(base);
        Object.values(maleForms).forEach(form => forms.add(form));
        
        // –î–æ–¥–∞—î–º–æ –∂—ñ–Ω–æ—á—ñ —Ñ–æ—Ä–º–∏
        const femaleForms = rules.female(base);
        Object.values(femaleForms).forEach(form => forms.add(form));
        
        break;
      }
    }

    return Array.from(forms);
  }

  static getMiddleNameForms(middleName) {
    const forms = new Set();
    forms.add(middleName);

    if (this.malePatronymics[middleName]) {
      const nameData = this.malePatronymics[middleName];
      Object.values(nameData).forEach(form => forms.add(form));
    }

    return Array.from(forms);
  }

  static getAllFormsOfName(fullName) {
    const parts = fullName.trim().split(/\s+/);
    if (parts.length < 2) return [fullName];

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ü–Ü–ë –ø–æ—Ä—è–¥–æ–∫: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ
    let lastName, firstName, middleName = '';
    
    if (parts.length === 2) {
      // –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è
      [lastName, firstName] = parts;
    } else if (parts.length >= 3) {
      // –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ
      [lastName, firstName, middleName] = parts;
    } else {
      return [fullName];
    }

    const allForms = new Set();
    allForms.add(fullName); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞

    console.log(`\nüîç –†–æ–∑–±–∏—Ä–∞—î–º–æ –ü–Ü–ë: "${fullName}"`);
    console.log(`üìù –ü—Ä—ñ–∑–≤–∏—â–µ: "${lastName}", –Ü–º'—è: "${firstName}", –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ: "${middleName}"`);

    // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∏ –∫–æ–∂–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —ñ–º–µ–Ω—ñ
    const firstNameForms = this.getFirstNameForms(firstName);
    const lastNameForms = this.getLastNameForms(lastName);
    const middleNameForms = middleName ? this.getMiddleNameForms(middleName) : [''];

    console.log(`üë§ –§–æ—Ä–º–∏ —ñ–º–µ–Ω—ñ "${firstName}":`, firstNameForms);
    console.log(`üè∑Ô∏è –§–æ—Ä–º–∏ –ø—Ä—ñ–∑–≤–∏—â–∞ "${lastName}":`, lastNameForms);
    console.log(`üë®‚Äçüë¶ –§–æ—Ä–º–∏ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ "${middleName}":`, middleNameForms);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ
    lastNameForms.forEach(last => {
      firstNameForms.forEach(first => {
        if (middleName) {
          middleNameForms.forEach(middle => {
            allForms.add(`${last} ${first} ${middle}`);
            allForms.add(`${last} ${first}`); // –ë–µ–∑ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
            // –î–æ–¥–∞—î–º–æ —Ç–∞–∫–æ–∂ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ —ñ–Ω—à–∏–º –ø–æ—Ä—è–¥–∫–æ–º –¥–ª—è –±—ñ–ª—å—à–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ
            allForms.add(`${first} ${middle} ${last}`);
            allForms.add(`${first} ${last}`);
          });
        } else {
          allForms.add(`${last} ${first}`);
          allForms.add(`${first} ${last}`); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
        }
      });
    });

    const result = Array.from(allForms);
    console.log(`‚úÖ –í—Å—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∏ (${result.length}):`, result);
    return result;
  }

  static findNameMatch(text, targetName) {
    const targetForms = this.getAllFormsOfName(targetName);
    const textLower = text.toLowerCase();
    
    console.log(`\nüîé –®—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ: "${text}"`);
    console.log(`üéØ –¶—ñ–ª—å–æ–≤–µ —ñ–º'—è: "${targetName}"`);
    
    // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –ø–æ–≤–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É
    for (const form of targetForms) {
      const words = form.split(' ').filter(w => w.length >= 3);
      console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º—É: "${form}" -> —Å–ª–æ–≤–∞:`, words);
      
      // –Ø–∫—â–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑–Ω–∞–π–¥–µ–Ω—ñ - —Ü–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π –∑–±—ñ–≥
      if (words.length > 0 && words.every(word => {
        const found = textLower.includes(word.toLowerCase());
        console.log(`   - "${word}" ${found ? '‚úÖ –∑–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
        return found;
      })) {
        console.log(`üéâ –ó–ë–Ü–ì! –§–æ—Ä–º–∞ "${form}" –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç—ñ`);
        return true;
      }
      
      // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—á–∞ –± 2 —Å–ª–æ–≤–∞ –∑ 3+ –∞–±–æ 1 —Å–ª–æ–≤–æ —è–∫—â–æ –≤–æ–Ω–æ –¥–æ–≤—à–µ 4 —Å–∏–º–≤–æ–ª—ñ–≤
      const foundWords = words.filter(word => textLower.includes(word.toLowerCase()));
      if (foundWords.length >= 2 || (foundWords.length >= 1 && foundWords[0].length > 4)) {
        console.log(`üéØ –ß–ê–°–¢–ö–û–í–ò–ô –ó–ë–Ü–ì! –ó–Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–∞:`, foundWords);
        return true;
      }
    }
    
    console.log(`‚ùå –ó–±—ñ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    return false;
  }

  static findOrderParagraphs(wordText, excelNames) {
    console.log(`\nüìä === –ê–ù–ê–õ–Ü–ó WORD –î–û–ö–£–ú–ï–ù–¢–£ ===`);
    console.log(`üìù –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: "${wordText.substring(0, 200)}${wordText.length > 200 ? '...' : ''}"`);
    console.log(`üìã –ü–Ü–ë –∑ Excel (${excelNames.length}):`, excelNames);

    const paragraphs = wordText.split(/\n\s*\n/).filter(p => p.trim());
    console.log(`üìÑ –í—Å—å–æ–≥–æ –∞–±–∑–∞—Ü—ñ–≤: ${paragraphs.length}`);

    const results = [];
    let currentPosition = 0;

    for (let i = 0; i < paragraphs.length; i++) {
      const paragraph = paragraphs[i];
      console.log(`\nüîç === –ê–ë–ó–ê–¶ ${i + 1} ===`);
      console.log(`üìù –¢–µ–∫—Å—Ç –∞–±–∑–∞—Ü—É: "${paragraph}"`);
      
      const containsOrderKeyword = /—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω[—ñ—ó—è]/i.test(paragraph);
      console.log(`üîë –ú—ñ—Å—Ç–∏—Ç—å "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ": ${containsOrderKeyword ? '‚úÖ –¢–ê–ö' : '‚ùå –ù–Ü'}`);
      
      const matchedNames = [];

      if (containsOrderKeyword) {
        console.log(`üîç –®—É–∫–∞—î–º–æ –ü–Ü–ë –≤ —Ü—å–æ–º—É –∞–±–∑–∞—Ü—ñ...`);
        
        // –®—É–∫–∞—î–º–æ –ü–Ü–ë –∑ Excel –≤ —Ü—å–æ–º—É –∞–±–∑–∞—Ü—ñ
        for (const excelName of excelNames) {
          if (!excelName || excelName.trim() === '') continue;
          
          console.log(`\nüë§ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ü–Ü–ë: "${excelName}"`);
          const found = this.findNameMatch(paragraph, excelName.trim());
          
          if (found) {
            matchedNames.push(excelName.trim());
            console.log(`‚úÖ –ü–Ü–ë "${excelName}" –ó–ù–ê–ô–î–ï–ù–û –≤ –∞–±–∑–∞—Ü—ñ!`);
          } else {
            console.log(`‚ùå –ü–Ü–ë "${excelName}" –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞–±–∑–∞—Ü—ñ`);
          }
        }
      } else {
        console.log(`‚è≠Ô∏è –ê–±–∑–∞—Ü –Ω–µ –º—ñ—Å—Ç–∏—Ç—å "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ", –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ –ü–Ü–ë`);
      }

      const finallyIncluded = containsOrderKeyword && matchedNames.length > 0;
      console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ë–ó–ê–¶–£ ${i + 1}:`);
      console.log(`   - –ú—ñ—Å—Ç–∏—Ç—å "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ": ${containsOrderKeyword}`);
      console.log(`   - –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë (${matchedNames.length}):`, matchedNames);
      console.log(`   - –í–ö–õ–Æ–ß–ò–¢–ò –í –†–ï–ó–£–õ–¨–¢–ê–¢: ${finallyIncluded ? '‚úÖ –¢–ê–ö' : '‚ùå –ù–Ü'}`);
      
      if (finallyIncluded) {
        results.push({
          paragraph: paragraph.trim(),
          containsOrderKeyword: true,
          matchedNames: [...new Set(matchedNames)],
          startPosition: currentPosition
        });
      }

      currentPosition += paragraph.length + 2; // +2 –¥–ª—è \n\n
    }

    console.log(`\nüéØ === –ü–Ü–î–°–£–ú–û–ö ===`);
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∞–±–∑–∞—Ü—ñ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: ${results.length}`);
    results.forEach((result, index) => {
      console.log(`   ${index + 1}. –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë: ${result.matchedNames.join(', ')}`);
    });

    return results;
  }
}

// –¢–ï–°–¢–û–í–Ü –î–ê–ù–Ü
console.log('üß™ === –¢–ï–°–¢ –õ–û–ì–Ü–ö–ò –í–Ü–î–ú–Ü–ù–Æ–í–ê–ù–ù–Ø ===\n');

// –¢–µ—Å—Ç–æ–≤—ñ –ü–Ü–ë –∑ Excel (–∫–æ–ª–æ–Ω–∫–∞ D)
const excelNames = [
  "–®–æ—Å—Ç–∞–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á",
  "–Ü–≤–∞–Ω–µ–Ω–∫–æ –í–æ–ª–æ–¥–∏–º–∏—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"
];

// –¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç Word –¥–æ–∫—É–º–µ–Ω—Ç—É
const wordText = `
–ü–µ—Ä—à—ã–π –∞–±–∑–∞—Ü –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤.

–£ —Ü—å–æ–º—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ –∑–≥–∞–¥—É—î—Ç—å—Å—è –®–æ—Å—Ç–∞–∫–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

–Ü–Ω—à–∏–π –∞–±–∑–∞—Ü —Ç–∞–∫–æ–∂ –ø—Ä–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è, –∞–ª–µ —Ç—É—Ç –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö —ñ–º–µ–Ω –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É.

–ß–µ—Ç–≤–µ—Ä—Ç–∏–π –∞–±–∑–∞—Ü –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è, —Ö–æ—á–∞ —Ç—É—Ç —î –®–æ—Å—Ç–∞–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä.

–ü'—è—Ç–∏–π –∞–±–∑–∞—Ü –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –Ü–≤–∞–Ω–µ–Ω–∫–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä–∞ –ü–µ—Ç—Ä–æ–≤–∏—á–∞.
`;

console.log('üìã –¢–ï–°–¢–û–í–Ü –î–ê–ù–Ü:');
console.log('Excel –ü–Ü–ë:', excelNames);
console.log('Word —Ç–µ–∫—Å—Ç:', wordText);

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
const results = TestUkrainianNameDeclension.findOrderParagraphs(wordText, excelNames);

console.log('\nüéØ === –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –∞–±–∑–∞—Ü—ñ–≤:`);
results.forEach((result, index) => {
  console.log(`\n${index + 1}. –ê–ë–ó–ê–¶:`);
  console.log(`   –¢–µ–∫—Å—Ç: "${result.paragraph}"`);
  console.log(`   –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë: ${result.matchedNames.join(', ')}`);
});