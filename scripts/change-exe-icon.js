const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

async function changeExeIcon() {
    try {
        console.log('üê∑ –ó–º—ñ–Ω—é—î–º–æ —ñ–∫–æ–Ω–∫—É EXE —Ñ–∞–π–ª—É –Ω–∞ —Å–≤–∏–Ω–∫—É...');
        
        const exePath = path.join(__dirname, '../KontrNahryuk-Portable/KontrNahryuk.exe');
        const iconPath = path.join(__dirname, '../build/icon.ico');
        const tempExePath = path.join(__dirname, '../KontrNahryuk-Portable/KontrNahryuk_temp.exe');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å —Ñ–∞–π–ª–∏
        if (!fs.existsSync(exePath)) {
            console.log('‚ùå EXE —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', exePath);
            return false;
        }
        
        if (!fs.existsSync(iconPath)) {
            console.log('‚ùå ICO —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', iconPath);
            return false;
        }
        
        console.log('üìÅ EXE —Ñ–∞–π–ª:', exePath);
        console.log('üê∑ –Ü–∫–æ–Ω–∫–∞:', iconPath);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—Ç–∏ rcedit —è–∫—â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        try {
            const rceditProcess = spawn('npx', ['rcedit', exePath, '--set-icon', iconPath], {
                stdio: 'inherit',
                shell: true
            });
            
            await new Promise((resolve, reject) => {
                rceditProcess.on('close', (code) => {
                    if (code === 0) {
                        console.log('‚úÖ –Ü–∫–æ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ rcedit!');
                        resolve(true);
                    } else {
                        console.log(`‚ö†Ô∏è rcedit –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º ${code}, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à–∏–π –º–µ—Ç–æ–¥`);
                        resolve(false);
                    }
                });
                
                rceditProcess.on('error', (error) => {
                    console.log('‚ö†Ô∏è rcedit –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à–∏–π –º–µ—Ç–æ–¥');
                    resolve(false);
                });
            });
            
            return true;
            
        } catch (error) {
            console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ rcedit:', error.message);
        }
        
        // –Ø–∫—â–æ rcedit –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        console.log('üìù –î–ª—è –∑–º—ñ–Ω–∏ —ñ–∫–æ–Ω–∫–∏ EXE —Ñ–∞–π–ª—É –ø–æ—Ç—Ä—ñ–±–Ω–æ:');
        console.log('   1. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ rcedit: npm install -g rcedit');
        console.log('   2. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ ResourceHacker');
        console.log('   3. –ê–±–æ –ø–µ—Ä–µ—Å–æ–±–æ—Ä–∏—Ç–∏ EXE –∑ –Ω–æ–≤–æ—é —ñ–∫–æ–Ω–∫–æ—é');
        
        return false;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —ñ–∫–æ–Ω–∫–∏:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç—É
if (require.main === module) {
    changeExeIcon();
}

module.exports = { changeExeIcon };