const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

async function updatePortableVersion() {
    try {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Portable –≤–µ—Ä—Å—ñ—ó...');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞ KontrNahryuk-Portable
        const portablePath = path.join(__dirname, '../KontrNahryuk-Portable');
        
        try {
            await fs.access(portablePath);
            console.log('üìÅ –ü–∞–ø–∫–∞ KontrNahryuk-Portable –∑–Ω–∞–π–¥–µ–Ω–∞');
        } catch {
            console.log('‚ùå –ü–∞–ø–∫–∞ KontrNahryuk-Portable –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–≤–æ—Ä—é—î–º–æ...');
            await fs.mkdir(portablePath, { recursive: true });
        }
        
        console.log('üî® –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç...');
        
        // –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        const buildProcess = spawn('npm', ['run', 'build'], {
            stdio: 'inherit',
            shell: true,
            cwd: process.cwd()
        });
        
        await new Promise((resolve, reject) => {
            buildProcess.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
                    resolve(true);
                } else {
                    console.log(`‚ùå –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º ${code}`);
                    reject(new Error(`Build failed with code ${code}`));
                }
            });
        });
        
        console.log('üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ Portable –≤–µ—Ä—Å—ñ—é...');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ Portable –≤–µ—Ä—Å—ñ—é —á–µ—Ä–µ–∑ electron-builder
        const packageProcess = spawn('npm', ['run', 'dist:portable'], {
            stdio: 'inherit',
            shell: true,
            cwd: process.cwd()
        });
        
        await new Promise((resolve, reject) => {
            packageProcess.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ Portable –≤–µ—Ä—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞');
                    resolve(true);
                } else {
                    console.log(`‚ùå Packaging –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º ${code}`);
                    reject(new Error(`Packaging failed with code ${code}`));
                }
            });
        });
        
        // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –∑ release –¥–æ KontrNahryuk-Portable
        const releasePath = path.join(__dirname, '../release');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î .exe —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É –≤ release
        let sourceFile = null;
        try {
            const releaseFiles = await fs.readdir(releasePath);
            const exeFile = releaseFiles.find(f => f.endsWith('.exe'));
            if (exeFile) {
                sourceFile = path.join(releasePath, exeFile);
                console.log(`üéØ –ó–Ω–∞–π–¥–µ–Ω–æ Portable EXE: ${exeFile}`);
            }
        } catch (err) {
            console.log('–ü–∞–ø–∫–∞ release –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —à—É–∫–∞—î–º–æ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏...');
        }
        
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ EXE, —à—É–∫–∞—î–º–æ –≤ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö
        let sourceDir = null;
        if (!sourceFile) {
            try {
                const releaseDir = await fs.readdir(releasePath);
                for (const dir of releaseDir) {
                    const dirPath = path.join(releasePath, dir);
                    const stat = await fs.stat(dirPath);
                    if (stat.isDirectory() && (dir.includes('KontrNahryuk') || dir.includes('kontr-nahryuk'))) {
                        sourceDir = dirPath;
                        break;
                    }
                }
            } catch (err) {
                console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ release –ø–∞–ø–∫—É:', err.message);
            }
        }
        
        if (sourceFile) {
            console.log('üîÑ –ö–æ–ø—ñ—é—î–º–æ Portable EXE...');
            const targetPath = path.join(portablePath, 'KontrNahryuk.exe');
            await fs.copyFile(sourceFile, targetPath);
            console.log('‚úÖ Portable EXE —Ñ–∞–π–ª —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ');
        } else if (sourceDir) {
            console.log('üîÑ –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –¥–æ KontrNahryuk-Portable...');
            
            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏
            const portableFiles = await fs.readdir(portablePath).catch(() => []);
            for (const file of portableFiles) {
                const filePath = path.join(portablePath, file);
                const stat = await fs.stat(filePath).catch(() => null);
                if (stat?.isFile()) {
                    await fs.unlink(filePath);
                }
            }
            
            // –ö–æ–ø—ñ—é—î–º–æ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏
            const sourceFiles = await fs.readdir(sourceDir);
            for (const file of sourceFiles) {
                const sourcePath = path.join(sourceDir, file);
                const targetPath = path.join(portablePath, file);
                
                const stat = await fs.stat(sourcePath);
                if (stat.isFile()) {
                    await fs.copyFile(sourcePath, targetPath);
                } else if (stat.isDirectory()) {
                    await copyDirectory(sourcePath, targetPath);
                }
            }
            
            console.log('‚úÖ –§–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ');
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î exe —Ñ–∞–π–ª
            const exeFiles = sourceFiles.filter(f => f.endsWith('.exe'));
            if (exeFiles.length > 0) {
                console.log(`üéØ EXE —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: ${exeFiles[0]}`);
                console.log(`üìÅ –®–ª—è—Ö: ${portablePath}\\${exeFiles[0]}`);
            }
            
        } else {
            console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–∫—É –∑ executable —Ñ–∞–π–ª–∞–º–∏ –≤ release');
        }
        
        console.log('üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è Portable –≤–µ—Ä—Å—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Portable –≤–µ—Ä—Å—ñ—ó:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
async function copyDirectory(source, target) {
    await fs.mkdir(target, { recursive: true });
    const files = await fs.readdir(source);
    
    for (const file of files) {
        const sourcePath = path.join(source, file);
        const targetPath = path.join(target, file);
        
        const stat = await fs.stat(sourcePath);
        if (stat.isFile()) {
            await fs.copyFile(sourcePath, targetPath);
        } else if (stat.isDirectory()) {
            await copyDirectory(sourcePath, targetPath);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç—É
if (require.main === module) {
    updatePortableVersion();
}

module.exports = { updatePortableVersion };