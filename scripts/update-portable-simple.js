const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

async function updatePortableSimple() {
    try {
        console.log('üîÑ –ü—Ä–æ—Å—Ç–∏–π –∞–ø–¥–µ–π—Ç Portable –≤–µ—Ä—Å—ñ—ó...');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞ KontrNahryuk-Portable
        const portablePath = path.join(__dirname, '../KontrNahryuk-Portable');
        
        console.log('üî® –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç...');
        
        // –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        const buildProcess = spawn('npm', ['run', 'build'], {
            stdio: 'inherit',
            shell: true,
            cwd: process.cwd()
        });
        
        await new Promise((resolve, reject) => {
            buildProcess.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
                    resolve(true);
                } else {
                    console.log(`‚ùå –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º ${code}`);
                    reject(new Error(`Build failed with code ${code}`));
                }
            });
        });
        
        console.log('üì¶ –ö–æ–ø—ñ—é—î–º–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏...');
        
        // –ö–æ–ø—ñ—é—î–º–æ –∑–±—ñ—Ä–∫—É –¥–æ KontrNahryuk-Portable/resources/app
        const targetAppPath = path.join(portablePath, 'resources', 'app');
        
        try {
            await fs.mkdir(targetAppPath, { recursive: true });
            
            // –ö–æ–ø—ñ—é—î–º–æ dist –ø–∞–ø–∫—É (—Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏)
            const distSource = path.join(__dirname, '../dist');
            const distTarget = path.join(targetAppPath, 'dist');
            
            await copyDirectory(distSource, distTarget);
            
            // –ö–æ–ø—ñ—é—î–º–æ electron –ø–∞–ø–∫—É (—Å–∏—Ä—Ü–µ–≤—ñ TypeScript —Ñ–∞–π–ª–∏)
            const electronSource = path.join(__dirname, '../electron');
            const electronTarget = path.join(targetAppPath, 'electron');
            
            await copyDirectory(electronSource, electronTarget);
            
            // –ö–æ–ø—ñ—é—î–º–æ src –ø–∞–ø–∫—É 
            const srcSource = path.join(__dirname, '../src');
            const srcTarget = path.join(targetAppPath, 'src');
            
            await copyDirectory(srcSource, srcTarget);
            
            // –ö–æ–ø—ñ—é—î–º–æ package.json
            const packageSource = path.join(__dirname, '../package.json');
            const packageTarget = path.join(targetAppPath, 'package.json');
            await fs.copyFile(packageSource, packageTarget);
            
            console.log('‚úÖ –§–∞–π–ª–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ Portable –≤–µ—Ä—Å—ñ—ó');
            console.log(`üìÅ –®–ª—è—Ö –¥–æ Portable EXE: ${portablePath}\\KontrNahryuk.exe`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î EXE —Ñ–∞–π–ª
            const exePath = path.join(portablePath, 'KontrNahryuk.exe');
            try {
                await fs.access(exePath);
                console.log('üéØ EXE —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!');
                
                // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                const stats = await fs.stat(exePath);
                console.log(`üìä –†–æ–∑–º—ñ—Ä: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω—é—î–º–æ —ñ–∫–æ–Ω–∫—É –Ω–∞ —Å–≤–∏–Ω–∫—É
                console.log('üê∑ –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –Ω–∞ —Å–≤–∏–Ω–∫—É...');
                const iconPath = path.join(__dirname, '../build/icon.ico');
                const rceditPath = path.join(__dirname, '../node_modules/rcedit/bin/rcedit.exe');
                
                try {
                    const rceditProcess = spawn(rceditPath, [exePath, '--set-icon', iconPath], {
                        stdio: 'inherit'
                    });
                    
                    await new Promise((resolve, reject) => {
                        rceditProcess.on('close', (code) => {
                            if (code === 0) {
                                console.log('‚úÖ –Ü–∫–æ–Ω–∫–∞ —Å–≤–∏–Ω–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
                                resolve(true);
                            } else {
                                console.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —ñ–∫–æ–Ω–∫–∏ (–∫–æ–¥ ${code})`);
                                resolve(false);
                            }
                        });
                        
                        rceditProcess.on('error', (error) => {
                            console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É:', error.message);
                            resolve(false);
                        });
                    });
                } catch (iconError) {
                    console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ —ñ–∫–æ–Ω–∫–æ—é:', iconError.message);
                }
                
            } catch {
                console.log('‚ö†Ô∏è EXE —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É Portable –≤–µ—Ä—Å—ñ—é –≤—Ä—É—á–Ω—É.');
            }
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
            throw error;
        }
        
        console.log('üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è Portable –≤–µ—Ä—Å—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Portable –≤–µ—Ä—Å—ñ—ó:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
async function copyDirectory(source, target) {
    try {
        await fs.mkdir(target, { recursive: true });
        const files = await fs.readdir(source);
        
        for (const file of files) {
            const sourcePath = path.join(source, file);
            const targetPath = path.join(target, file);
            
            const stat = await fs.stat(sourcePath);
            if (stat.isFile()) {
                await fs.copyFile(sourcePath, targetPath);
            } else if (stat.isDirectory()) {
                await copyDirectory(sourcePath, targetPath);
            }
        }
    } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ ${source}:`, error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç—É
if (require.main === module) {
    updatePortableSimple();
}

module.exports = { updatePortableSimple };