/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è patch-—Ñ–∞–π–ª—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è KontrNahryuk
 * 
 * –ü—Ä–æ—Ü–µ—Å:
 * 1. –ü–æ—Ä—ñ–≤–Ω—é—î –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é
 * 2. –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏
 * 3. –°—Ç–≤–æ—Ä—é—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ZIP –∑ –ø–∞—Ç—á–µ–º
 * 
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/create-update-patch.js <from-version> <to-version>
 * –ü—Ä–∏–∫–ª–∞–¥: node scripts/create-update-patch.js 1.4.1 1.4.2
 */

const fs = require('fs');
const path = require('path');
const archiver = require('archiver');
const crypto = require('crypto');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * –û–±—á–∏—Å–ª–∏—Ç–∏ MD5 —Ö–µ—à —Ñ–∞–π–ª—É
 */
function getFileHash(filePath) {
  const content = fs.readFileSync(filePath);
  return crypto.createHash('md5').update(content).digest('hex');
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –ø–∞–ø–∫–∏
 */
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach((file) => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
    } else {
      arrayOfFiles.push(fullPath);
    }
  });

  return arrayOfFiles;
}

/**
 * –ó–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª–∏, —â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—å –º—ñ–∂ –≤–µ—Ä—Å—ñ—è–º–∏
 */
function findChangedFiles(currentDir, previousDir) {
  const changedFiles = [];
  const newFiles = [];

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
  const currentFiles = getAllFiles(currentDir);
  
  log(`\nüìÅ –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤...`, colors.blue);
  log(`   –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: ${currentFiles.length} —Ñ–∞–π–ª—ñ–≤`, colors.cyan);

  let checkedCount = 0;
  
  for (const currentFile of currentFiles) {
    checkedCount++;
    if (checkedCount % 500 === 0) {
      process.stdout.write(`\r   –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${checkedCount}/${currentFiles.length} —Ñ–∞–π–ª—ñ–≤...`);
    }

    const relativePath = path.relative(currentDir, currentFile);
    const previousFile = path.join(previousDir, relativePath);

    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ node_modules —Ç–∞ —ñ–Ω—à—ñ –≤–µ–ª–∏–∫—ñ –ø–∞–ø–∫–∏
    if (relativePath.includes('node_modules') || 
        relativePath.includes('.git') ||
        relativePath.includes('locales')) {
      continue;
    }

    // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É–≤–∞–≤ —Ä–∞–Ω—ñ—à–µ - —Ü–µ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
    if (!fs.existsSync(previousFile)) {
      newFiles.push({ path: currentFile, relativePath, reason: 'NEW' });
      continue;
    }

    // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ö–µ—à—ñ —Ñ–∞–π–ª—ñ–≤
    const currentHash = getFileHash(currentFile);
    const previousHash = getFileHash(previousFile);

    if (currentHash !== previousHash) {
      const currentSize = fs.statSync(currentFile).size;
      const previousSize = fs.statSync(previousFile).size;
      const sizeDiff = currentSize - previousSize;
      
      changedFiles.push({ 
        path: currentFile, 
        relativePath, 
        reason: 'MODIFIED',
        sizeDiff 
      });
    }
  }

  console.log(''); // –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É

  return { changedFiles, newFiles };
}

async function createUpdatePatch() {
  try {
    // –ß–∏—Ç–∞—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    const args = process.argv.slice(2);
    if (args.length < 2) {
      log('\n‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—ó', colors.red);
      log('   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/create-update-patch.js <from-version> <to-version>', colors.yellow);
      log('   –ü—Ä–∏–∫–ª–∞–¥: node scripts/create-update-patch.js 1.4.1 1.4.2\n', colors.yellow);
      process.exit(1);
    }

    const fromVersion = args[0];
    const toVersion = args[1];

    log(`\nüîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—á—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è`, colors.blue);
    log(`   –ó –≤–µ—Ä—Å—ñ—ó: ${fromVersion}`, colors.cyan);
    log(`   –ù–∞ –≤–µ—Ä—Å—ñ—é: ${toVersion}`, colors.cyan);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–æ–∫
    const currentDir = path.join('release', 'KontrNahryuk-win32-x64');
    if (!fs.existsSync(currentDir)) {
      log('\n‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–µ –∑—ñ–±—Ä–∞–Ω–∞!', colors.red);
      log('   –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run package\n', colors.yellow);
      process.exit(1);
    }

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ —Ç–æ—á–Ω–æ –∑–º—ñ–Ω–∏–ª–∏—Å—å
    // –£ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó —Ç—Ä–µ–±–∞ –º–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤–µ—Ä—Å—ñ—é –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    const criticalFiles = [
      'dist/electron/main.js',
      'dist/electron/preload.js',
      'dist/electron/services/updateService.js',
      'dist/renderer/index.html',
      'dist/renderer/assets/index-*.js',
      'package.json',
      'resources/app.asar',
    ];

    log(`\nüîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...`, colors.blue);

    const filesToPatch = [];
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏–º —à–∞–±–ª–æ–Ω–∞–º
    const allFiles = getAllFiles(currentDir);
    
    for (const pattern of criticalFiles) {
      const regex = new RegExp(pattern.replace(/\*/g, '.*').replace(/\//g, '\\\\'));
      const matchedFiles = allFiles.filter(f => regex.test(path.relative(currentDir, f)));
      
      matchedFiles.forEach(file => {
        const relativePath = path.relative(currentDir, file);
        const size = fs.statSync(file).size;
        filesToPatch.push({ 
          path: file, 
          relativePath,
          size,
          reason: 'CRITICAL_UPDATE'
        });
      });
    }

    if (filesToPatch.length === 0) {
      log('\n‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–∞—Ç—á—É', colors.yellow);
      log('   –ú–æ–∂–ª–∏–≤–æ, –≤–µ—Ä—Å—ñ—ó –æ–¥–Ω–∞–∫–æ–≤—ñ?\n', colors.yellow);
      process.exit(0);
    }

    // –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
    log(`\nüìù –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${filesToPatch.length}`, colors.green);
    let totalSize = 0;
    filesToPatch.forEach(f => {
      totalSize += f.size;
      const sizeKB = (f.size / 1024).toFixed(1);
      log(`   ‚úì ${f.relativePath} (${sizeKB} KB)`, colors.cyan);
    });

    const totalSizeMB = (totalSize / 1024 / 1024).toFixed(2);
    log(`\nüíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–∞—Ç—á—É: ${totalSizeMB} MB`, colors.green);

    // –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤
    const patchName = `KontrNahryuk-v${fromVersion}-to-v${toVersion}-patch.zip`;
    const outputPath = path.resolve(patchName);

    if (fs.existsSync(outputPath)) {
      log(`\nüìÅ –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–∞—Ç—á: ${patchName}`, colors.yellow);
      fs.unlinkSync(outputPath);
    }

    log(`\nüì¶ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ç—á-—Ñ–∞–π–ª: ${patchName}`, colors.blue);

    const output = fs.createWriteStream(outputPath);
    const archive = archiver('zip', {
      zlib: { level: 9 }
    });

    output.on('close', () => {
      const archiveSizeMB = (archive.pointer() / 1024 / 1024).toFixed(2);
      const savings = (1 - archive.pointer() / (415 * 1024 * 1024)) * 100;
      
      log(`\n‚úÖ –ü–∞—Ç—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!`, colors.green);
      log(`üìä –†–æ–∑–º—ñ—Ä –ø–∞—Ç—á—É: ${archiveSizeMB} MB`, colors.blue);
      log(`üí∞ –ï–∫–æ–Ω–æ–º—ñ—è: ${savings.toFixed(1)}% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–≤–Ω–∏–º portable`, colors.green);
      log(`üìÅ –§–∞–π–ª: ${patchName}`, colors.blue);

      log(`\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:`, colors.yellow);
      log(`   1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞: https://github.com/sashashostak/KontrNahryuk/releases/tag/v${toVersion}`);
      log(`   2. Edit release`);
      log(`   3. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ: ${patchName} (—à–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)`);
      log(`   4. –¢–∞–∫–æ–∂ –∑–∞–ª–∏—à—Ç–µ: KontrNahryuk-v${toVersion}-portable.zip (–ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è)`);
      log(`   5. –í –æ–ø–∏—Å—ñ –≤–∫–∞–∂—ñ—Ç—å –æ–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n`);
    });

    archive.on('error', (err) => {
      log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è: ${err.message}`, colors.red);
      process.exit(1);
    });

    archive.pipe(output);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–µ—Ä–µ–¥ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è–º
    const instructions = `# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—é –ø–∞—Ç—á—É ${fromVersion} ‚Üí ${toVersion}

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)

1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å KontrNahryuk v${fromVersion}
2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ: ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Üí –û–Ω–æ–≤–ª–µ–Ω–Ω—è
3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"
4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

## –†—É—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ç—á—É

1. –ó–∞–∫—Ä–∏–π—Ç–µ KontrNahryuk (—è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–æ)
2. –†–æ–∑–ø–∞–∫—É–π—Ç–µ KontrNahryuk-v${fromVersion}-to-v${toVersion}-patch.zip
3. –°–∫–æ–ø—ñ—é–π—Ç–µ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø–∫—É –∑ KontrNahryuk
4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º—ñ–Ω—É —Ñ–∞–π–ª—ñ–≤
5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å KontrNahryuk.exe

## –©–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è:

${filesToPatch.slice(0, 10).map(f => `- ${f.relativePath}`).join('\n')}
... —Ç–∞ —â–µ ${filesToPatch.length - 10} —Ñ–∞–π–ª—ñ–≤

## –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è

–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–∞–ø–∫–∏ KontrNahryuk –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø–∞—Ç—á—É.

## –ü—ñ–¥—Ç—Ä–∏–º–∫–∞

–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º–∏, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø–æ–≤–Ω—É portable –≤–µ—Ä—Å—ñ—é:
https://github.com/sashashostak/KontrNahryuk/releases/tag/v${toVersion}
`;

    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–æ –∞—Ä—Ö—ñ–≤—É
    archive.append(instructions, { name: 'UPDATE-INSTRUCTIONS.txt' });

    // –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª–∏ –¥–æ –∞—Ä—Ö—ñ–≤—É
    for (const file of filesToPatch) {
      archive.file(file.path, { name: file.relativePath });
    }

    await archive.finalize();

  } catch (error) {
    log(`\n‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  }
}

createUpdatePatch();
