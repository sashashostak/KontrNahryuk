"""
Process ZBD (–ñ–ë–î) - –û–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
–°—Ç–≤–æ—Ä—é—î Word –¥–æ–∫—É–º–µ–Ω—Ç –∑ —Ç–∞–±–ª–∏—Ü–µ—é 3 –∫–æ–ª–æ–Ω–∫–∏ √ó 5 —Ä—è–¥–∫—ñ–≤:
- –†—è–¥–æ–∫ 1: –ó–∞–≥–æ–ª–æ–≤–∫–∏ ("–î–∞—Ç–∞, —á–∞—Å", "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫...", "–ü—Ä–∏–º—ñ—Ç–∫–∞")
- –†—è–¥–æ–∫ 2: –ù—É–º–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–Ω–æ–∫ (1, 2, 3)
- –†—è–¥–∫–∏ 3-5: –î–∞–Ω—ñ –∑ CSV —Ñ–∞–π–ª—É (–¥–æ 3 —Ä—è–¥–∫—ñ–≤)
"""

import sys
import json
import io
import csv
from pathlib import Path
from typing import List, Dict, Any
from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.oxml.ns import qn
from docx.oxml import OxmlElement

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTF-8 –¥–ª—è stdout/stderr –Ω–∞ Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')


class ZBDProcessor:
    """–ü—Ä–æ—Ü–µ—Å–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ñ–ë–î –∑ CSV —Ñ–∞–π–ª—ñ–≤"""

    def __init__(self):
        self.csv_data = []

    def read_csv(self, csv_path: str) -> List[List[str]]:
        """
        –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É

        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ CSV —Ñ–∞–π–ª—É
        """
        print(f"üìñ –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É: {csv_path}")

        try:
            with open(csv_path, 'r', encoding='utf-8-sig') as f:
                reader = csv.reader(f)
                data = list(reader)

            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} —Ä—è–¥–∫—ñ–≤")
            return data

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {str(e)}", file=sys.stderr)
            raise

    def create_word_document(self, output_path: str) -> None:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é 3√ó5 (—à–∞–±–ª–æ–Ω)

        Args:
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É
        """
        print(f"\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É...")

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
            doc = Document()

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            print("üìê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
            section = doc.sections[0]
            section.top_margin = Inches(1.5 / 2.54)      # 1.5 —Å–º
            section.bottom_margin = Inches(1.5 / 2.54)   # 1.5 —Å–º
            section.left_margin = Inches(2.5 / 2.54)     # 2.5 —Å–º
            section.right_margin = Inches(1.5 / 2.54)    # 1.5 —Å–º

            # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é 3 –∫–æ–ª–æ–Ω–∫–∏ √ó 5 —Ä—è–¥–∫—ñ–≤
            print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ 3√ó5...")
            table = doc.add_table(rows=5, cols=3)
            table.style = 'Table Grid'

            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            print("üìè –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫...")
            column_widths = [
                2.48,   # –ö–æ–ª–æ–Ω–∫–∞ 1: 2.48 —Å–º
                12.32,  # –ö–æ–ª–æ–Ω–∫–∞ 2: 12.32 —Å–º
                1.99    # –ö–æ–ª–æ–Ω–∫–∞ 3: 1.99 —Å–º
            ]

            for row in table.rows:
                for idx, cell in enumerate(row.cells):
                    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –¥—é–π–º–∏)
                    cell.width = Inches(column_widths[idx] / 2.54)

            # –†—è–¥–æ–∫ 1: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            print("üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤...")
            headers = ['–î–∞—Ç–∞,\n—á–∞—Å', '–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫ —Ç–∞ —Å—Ç–∏—Å–ª–µ –≤–∏—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Ö–æ–¥—É –±–æ–π–æ–≤–∏—Ö –¥—ñ–π', '–ü—Ä–∏–º—ñ—Ç–∫–∞']
            for col_idx, header in enumerate(headers):
                cell = table.rows[0].cells[col_idx]

                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
                cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER

                # –û—á–∏—â–∞—î–º–æ –∫–æ–º—ñ—Ä–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                cell.text = ''
                paragraph = cell.paragraphs[0]
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

                # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                run = paragraph.add_run(header)
                run.font.size = Pt(12)
                run.font.name = 'Times New Roman'

            # –†—è–¥–æ–∫ 2: –ù—É–º–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–Ω–æ–∫
            print("üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω—É–º–µ—Ä–∞—Ü—ñ—ó...")
            numbers = ['1', '2', '3']
            for col_idx, number in enumerate(numbers):
                cell = table.rows[1].cells[col_idx]
                cell.text = number

                if cell.paragraphs:
                    paragraph = cell.paragraphs[0]
                    run = paragraph.runs[0] if paragraph.runs else paragraph.add_run(number)
                    run.font.size = Pt(12)
                    run.font.name = 'Times New Roman'
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

            # –†—è–¥–æ–∫ 3: –®–∞–±–ª–æ–Ω –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            print("üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä—è–¥–∫–∞ 3 —à–∞–±–ª–æ–Ω–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏...")
            row3_data = [
                '01.10.2025',
                '–†–í–ü –°–ø–ü 2 –ë–°–ø–ü –ø—Ä–æ–¥–æ–≤–∂—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–æ–π–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å.\n–°—Ç–∞–Ω —Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–Ω—è ‚Äì –±–µ–∑ –∑–º—ñ–Ω',
                ''  # –ü—Ä–∏–º—ñ—Ç–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
            ]

            for col_idx, cell_data in enumerate(row3_data):
                cell = table.rows[2].cells[col_idx]  # –†—è–¥–æ–∫ 3 (—ñ–Ω–¥–µ–∫—Å 2)
                cell.text = cell_data

                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                if cell.paragraphs:
                    paragraph = cell.paragraphs[0]
                    if paragraph.runs:
                        run = paragraph.runs[0]
                    else:
                        run = paragraph.add_run(cell_data)
                    run.font.size = Pt(12)
                    run.font.name = 'Times New Roman'

            # –†—è–¥–æ–∫ 4: –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º
            print("üìù –†—è–¥–æ–∫ 4 –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º")

            # –†—è–¥–æ–∫ 5: –ö–æ–º–∞–Ω–¥–∏—Ä —Ç–∞ –ø—ñ–¥–ø–∏—Å
            print("üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä—è–¥–∫–∞ 5 (–∫–æ–º–∞–Ω–¥–∏—Ä —Ç–∞ –ø—ñ–¥–ø–∏—Å)...")
            row5_data = [
                '',  # –ö–æ–ª–æ–Ω–∫–∞ 1 –ø–æ—Ä–æ–∂–Ω—è
                '–ö–æ–º–∞–Ω–¥–∏—Ä –†–í–ü –°–ø–ü 2 –±–°–ø–ü\n—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç                                               –ê—Ä—Ç–µ–º –ë–£–õ–ê–í–Ü–ù',
                ''  # –ö–æ–ª–æ–Ω–∫–∞ 3 –ø–æ—Ä–æ–∂–Ω—è
            ]

            for col_idx, cell_data in enumerate(row5_data):
                cell = table.rows[4].cells[col_idx]  # –†—è–¥–æ–∫ 5 (—ñ–Ω–¥–µ–∫—Å 4)
                cell.text = cell_data

                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                if cell.paragraphs:
                    paragraph = cell.paragraphs[0]
                    if paragraph.runs:
                        run = paragraph.runs[0]
                    else:
                        run = paragraph.add_run(cell_data)
                    run.font.bold = True  # –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–∞
                    run.font.size = Pt(12)
                    run.font.name = 'Times New Roman'

            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–¥–æ–Ω–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
            self._set_table_borders(table)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É: {output_path}")
            doc.save(output_path)
            print("‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É: {str(e)}", file=sys.stderr)
            raise

    def _set_table_borders(self, table):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ—Ä–¥–æ–Ω–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ

        Args:
            table: –¢–∞–±–ª–∏—Ü—è docx
        """
        tbl = table._element
        tblPr = tbl.tblPr

        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç borders —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        tblBorders = tblPr.find(qn('w:tblBorders'))
        if tblBorders is None:
            tblBorders = OxmlElement('w:tblBorders')
            tblPr.append(tblBorders)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–æ—Ä–¥–æ–Ω–∏
        for border_name in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
            border = OxmlElement(f'w:{border_name}')
            border.set(qn('w:val'), 'single')
            border.set(qn('w:sz'), '4')  # –¢–æ–≤—â–∏–Ω–∞ –∫–æ—Ä–¥–æ–Ω—É
            border.set(qn('w:space'), '0')
            border.set(qn('w:color'), '000000')  # –ß–æ—Ä–Ω–∏–π –∫–æ–ª—ñ—Ä
            tblBorders.append(border)

    def process(self, csv_path: str, output_path: str) -> Dict[str, Any]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏

        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–æ–±–∫–∏
        """
        try:
            print("üöÄ === –û–ë–†–û–ë–ö–ê –ñ–ë–î ===\n")

            # TODO: –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—É
            # –ù–∞—Ä–∞–∑—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ —à–∞–±–ª–æ–Ω –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É Word –¥–æ–∫—É–º–µ–Ω—Ç—É...")

            # –°—Ç–≤–æ—Ä—é—î–º–æ Word –¥–æ–∫—É–º–µ–Ω—Ç
            self.create_word_document(output_path)

            print("\n‚úÖ === –û–ë–†–û–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")

            return {
                'success': True,
                'output_path': output_path,
                'rows_processed': 1,  # 1 —Ä—è–¥–æ–∫ –∑ —à–∞–±–ª–æ–Ω–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                'message': f'–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —à–∞–±–ª–æ–Ω Word –¥–æ–∫—É–º–µ–Ω—Ç—É –ñ–ë–î'
            }

        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}"
            print(f"\n‚ùå {error_msg}", file=sys.stderr)
            return {
                'success': False,
                'error': error_msg
            }


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø—Ä–∏–π–º–∞—î JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ stdin"""

    try:
        # –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ stdin
        config_json = sys.stdin.read()
        config = json.loads(config_json)

        csv_path = config.get('csv_path')
        output_path = config.get('output_path')

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not csv_path:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É")

        if not output_path:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É
        if not Path(csv_path).exists():
            raise FileNotFoundError(f"CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {csv_path}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)

        # –û–±—Ä–æ–±–∫–∞
        processor = ZBDProcessor()
        result = processor.process(csv_path, output_path)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ
        print(f"\n__RESULT__{json.dumps(result, ensure_ascii=False)}__END__")

        sys.exit(0 if result['success'] else 1)

    except Exception as e:
        error_msg = str(e)
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {error_msg}", file=sys.stderr)

        result = {
            'success': False,
            'error': error_msg
        }
        print(f"\n__RESULT__{json.dumps(result, ensure_ascii=False)}__END__")
        sys.exit(1)


if __name__ == '__main__':
    main()
