"""
Process ZBD (–ñ–ë–î) - –û–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV —Ñ–∞–π–ª—É:
- –ö–æ–ª–æ–Ω–∫–∏ 1-3: ‚Ññ, –ó–≤–∞–Ω–Ω—è, –ü.–Ü.–ë
- –ö–æ–ª–æ–Ω–∫–∏ 4-34: –î–Ω—ñ –º—ñ—Å—è—Ü—è (1-31) –∑ –æ–ø–∏—Å–æ–º –ø–æ–¥—ñ–π

–°—Ç–≤–æ—Ä—é—î Word –¥–æ–∫—É–º–µ–Ω—Ç –∑ 31 —Ç–∞–±–ª–∏—Ü–µ—é (–ø–æ –æ–¥–Ω—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –º—ñ—Å—è—Ü—è):
- –ö–æ–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: 3 –∫–æ–ª–æ–Ω–∫–∏ √ó –º—ñ–Ω—ñ–º—É–º 5 —Ä—è–¥–∫—ñ–≤
- –†—è–¥–æ–∫ 1: –ó–∞–≥–æ–ª–æ–≤–∫–∏ ("–î–∞—Ç–∞, —á–∞—Å", "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫...", "–ü—Ä–∏–º—ñ—Ç–∫–∞")
- –†—è–¥–æ–∫ 2: –ù—É–º–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–Ω–æ–∫ (1, 2, 3)
- –†—è–¥–æ–∫ 3: –î–∞—Ç–∞ | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ —Å—Ç–∞–Ω –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É | –ü—Ä–∏–º—ñ—Ç–∫–∞
- –†—è–¥–∫–∏ 4+: –ß–∞—Å –ø–æ–¥—ñ—ó | –û–ø–∏—Å+—Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π | –ü—Ä–∏–º—ñ—Ç–∫–∞ (–∫–æ–∂–Ω–∞ –ø–æ–¥—ñ—è - –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫)
- –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫: –ü—ñ–¥–ø–∏—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞
"""

import sys
import json
import io
import csv
from pathlib import Path
from typing import List, Dict, Any, Set, Tuple, Optional
from datetime import datetime
from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import re
from openpyxl import load_workbook

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTF-8 –¥–ª—è stdout/stderr –Ω–∞ Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')


class ZBDProcessor:
    """–ü—Ä–æ—Ü–µ—Å–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ñ–ë–î –∑ CSV —Ñ–∞–π–ª—ñ–≤"""

    def __init__(self):
        self.csv_data = []
        self.month = None
        self.year = None
        self.config_excel_path = None
        self.commander_text = '–ö–æ–º–∞–Ω–¥–∏—Ä –†–í–ü –°–ø–ü 2 –±–°–ø–ü\n—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç                                             –ê—Ä—Ç–µ–º –ë–£–õ–ê–í–Ü–ù'
        self.position_headers = {}  # {–ø–æ–∑–∏—Ü—ñ—è: —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏}
        self.delivery_headers = {}  # {(–º–∞–π–Ω–æ, –Ω.–ø.): —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏}
        self.recon_headers = {}  # {–≤–∏–¥ –ø–æ—à—É–∫—É: —à–∞–±–ª–æ–Ω —à–∞–ø–∫–∏ –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º}
        self.zvp_rotation_headers = {}  # {(–ø–æ–≤–Ω–µ_–∑–Ω–∞—á–µ–Ω–Ω—è_–ø—É–Ω–∫—Ç—É_4, –±–ª–æ–∫): —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏} - –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ä–æ—Ç–∞—Ü—ñ–π
        self.month_from_config = None
        self.daily_status_text = '–†–í–ü –°–ø–ü 2 –ë–°–ø–ü –ø—Ä–æ–¥–æ–≤–∂—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–æ–π–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å.\n–°—Ç–∞–Ω —Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–Ω—è ‚Äì –±–µ–∑ –∑–º—ñ–Ω'

    def read_csv(self, csv_path: str) -> List[List[str]]:
        """
        –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É

        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ CSV —Ñ–∞–π–ª—É
        """
        print(f"üìñ –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É: {csv_path}")

        try:
            with open(csv_path, 'r', encoding='utf-8-sig') as f:
                reader = csv.reader(f)
                data = list(reader)

            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} —Ä—è–¥–∫—ñ–≤")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ –∫–ª–∞—Å—É
            self.csv_data = data
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
            self._extract_month_year_from_filename(csv_path)
            
            return data

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {str(e)}", file=sys.stderr)
            raise

    def _extract_month_year_from_filename(self, csv_path: str) -> None:
        """
        –í–∏–∑–Ω–∞—á–∞—î –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É

        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É
        """
        filename = Path(csv_path).stem
        
        # –°–ª–æ–≤–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –º—ñ—Å—è—Ü—ñ–≤
        months_uk = {
            '—Å—ñ—á–µ–Ω—å': 1, '—Å—ñ—á–Ω—è': 1,
            '–ª—é—Ç–∏–π': 2, '–ª—é—Ç–æ–≥–æ': 2,
            '–±–µ—Ä–µ–∑–µ–Ω—å': 3, '–±–µ—Ä–µ–∑–Ω—è': 3,
            '–∫–≤—ñ—Ç–µ–Ω—å': 4, '–∫–≤—ñ—Ç–Ω—è': 4,
            '—Ç—Ä–∞–≤–µ–Ω—å': 5, '—Ç—Ä–∞–≤–Ω—è': 5,
            '—á–µ—Ä–≤–µ–Ω—å': 6, '—á–µ—Ä–≤–Ω—è': 6,
            '–ª–∏–ø–µ–Ω—å': 7, '–ª–∏–ø–Ω—è': 7,
            '—Å–µ—Ä–ø–µ–Ω—å': 8, '—Å–µ—Ä–ø–Ω—è': 8,
            '–≤–µ—Ä–µ—Å–µ–Ω—å': 9, '–≤–µ—Ä–µ—Å–Ω—è': 9,
            '–∂–æ–≤—Ç–µ–Ω—å': 10, '–∂–æ–≤—Ç–Ω—è': 10,
            '–ª–∏—Å—Ç–æ–ø–∞–¥': 11, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 11,
            '–≥—Ä—É–¥–µ–Ω—å': 12, '–≥—Ä—É–¥–Ω—è': 12
        }
        
        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—è—Ü—å –≤ –Ω–∞–∑–≤—ñ —Ñ–∞–π–ª—É
        filename_lower = filename.lower()
        for month_name, month_num in months_uk.items():
            if month_name in filename_lower:
                self.month = month_num
                break
        
        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ä—ñ–∫ –≤ –Ω–∞–∑–≤—ñ —Ñ–∞–π–ª—É (4 —Ü–∏—Ñ—Ä–∏)
        import re
        year_match = re.search(r'20\d{2}', filename)
        if year_match:
            self.year = int(year_match.group())
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
        if self.month is None or self.year is None:
            now = datetime.now()
            if self.month is None:
                self.month = now.month
            if self.year is None:
                self.year = now.year
        
        print(f"üìÖ –í–∏–∑–Ω–∞—á–µ–Ω–æ –º—ñ—Å—è—Ü—å: {self.month}, —Ä—ñ–∫: {self.year}")

    def read_config_excel(self, excel_path: str) -> None:
        """
        –ß–∏—Ç–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel —Ñ–∞–π–ª –∑ –ª–∏—Å—Ç–æ–º "–†–í–ü"

        Args:
            excel_path: –®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É
        """
        print(f"üìñ –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel: {excel_path}")
        
        try:
            self.config_excel_path = excel_path
            wb = load_workbook(excel_path, data_only=True)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª–∏—Å—Ç–∞ "–†–í–ü"
            if '–†–í–ü' not in wb.sheetnames:
                print(f"‚ö†Ô∏è –õ–∏—Å—Ç '–†–í–ü' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Excel —Ñ–∞–π–ª—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
                return
            
            ws = wb['–†–í–ü']
            
            # –ß–∏—Ç–∞—î–º–æ A2 - —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞
            commander_cell = ws['A2'].value
            if commander_cell:
                self.commander_text = str(commander_cell).strip()
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∏—Ä: {self.commander_text[:50]}...")
            
            # –ß–∏—Ç–∞—î–º–æ E2 - —Ç–µ–∫—Å—Ç —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            daily_status_cell = ws['E2'].value
            if daily_status_cell:
                self.daily_status_text = str(daily_status_cell).strip()
                print(f"‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {self.daily_status_text[:50]}...")
            
            # –ß–∏—Ç–∞—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π (–∫–æ–ª–æ–Ω–∫–∏ B, C)
            # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ —Ä—è–¥–∫–∞ 2 (–ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
            row = 2
            while True:
                position = ws.cell(row=row, column=2).value  # –ö–æ–ª–æ–Ω–∫–∞ B
                header_text = ws.cell(row=row, column=3).value  # –ö–æ–ª–æ–Ω–∫–∞ C
                month_value = ws.cell(row=row, column=4).value  # –ö–æ–ª–æ–Ω–∫–∞ D
                
                # –ú–∞–ø–ø—ñ–Ω–≥ –¥–æ—Å—Ç–∞–≤–æ–∫ (–∫–æ–ª–æ–Ω–∫–∏ F, G, H)
                delivery_item = ws.cell(row=row, column=6).value  # –ö–æ–ª–æ–Ω–∫–∞ F - –º–∞–π–Ω–æ
                delivery_location = ws.cell(row=row, column=7).value  # –ö–æ–ª–æ–Ω–∫–∞ G - –Ω.–ø.
                delivery_header = ws.cell(row=row, column=8).value  # –ö–æ–ª–æ–Ω–∫–∞ H - —Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏
                
                # –ú–∞–ø–ø—ñ–Ω–≥ —Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∏ I, J)
                recon_type = ws.cell(row=row, column=9).value  # –ö–æ–ª–æ–Ω–∫–∞ I - –≤–∏–¥ –ø–æ—à—É–∫—É
                recon_header = ws.cell(row=row, column=10).value  # –ö–æ–ª–æ–Ω–∫–∞ J - —à–∞–±–ª–æ–Ω —à–∞–ø–∫–∏
                
                # –ú–∞–ø–ø—ñ–Ω–≥ —Ä–æ—Ç–∞—Ü—ñ—ó –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π (–∫–æ–ª–æ–Ω–∫–∏ K, L, M)
                zvp_position = ws.cell(row=row, column=11).value  # –ö–æ–ª–æ–Ω–∫–∞ K - –ø–æ–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É 4 (–Ω–∞–ø—Ä. "–ó–í–ü –ú–∞—Ä—ñ–æ-1")
                zvp_block = ws.cell(row=row, column=12).value  # –ö–æ–ª–æ–Ω–∫–∞ L - –±–ª–æ–∫ (–Ω–∞–ø—Ä. "–ø—Ä–∏–±—É–ª–∏:")
                zvp_header = ws.cell(row=row, column=13).value  # –ö–æ–ª–æ–Ω–∫–∞ M - —Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏
                
                # –Ø–∫—â–æ –≤—Å—ñ –∫–æ–º—ñ—Ä–∫–∏ –ø—É—Å—Ç—ñ - –∑–∞–∫—ñ–Ω—á—É—î–º–æ
                if not position and not header_text and not delivery_item and not delivery_location and not recon_type and not zvp_position:
                    break
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π
                if position and header_text:
                    self.position_headers[str(position).strip()] = str(header_text).strip()
                    print(f"  üìç {position} ‚Üí {header_text}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ –¥–æ—Å—Ç–∞–≤–æ–∫
                if delivery_item and delivery_location and delivery_header:
                    key = (str(delivery_item).strip(), str(delivery_location).strip())
                    self.delivery_headers[key] = str(delivery_header).strip()
                    print(f"  üì¶ {delivery_item} ‚Üí {delivery_location} ‚Üí {delivery_header}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ —Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è
                if recon_type and recon_header:
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –≤–∏–¥ –ø–æ—à—É–∫—É, —Ç–∞–∫ —ñ –±–ª–æ–∫–∏ –ø—Ä–∏–±—É–ª–∏/–≤–∏–±—É–ª–∏
                    key = str(recon_type).strip().lower()
                    self.recon_headers[key] = str(recon_header).strip()
                    print(f"  üîç {key} ‚Üí {recon_header}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ —Ä–æ—Ç–∞—Ü—ñ—ó –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                if zvp_position and zvp_block and zvp_header:
                    key = (str(zvp_position).strip(), str(zvp_block).strip().lower())
                    self.zvp_rotation_headers[key] = str(zvp_header).strip()
                    print(f"  üîÑ {zvp_position} + {zvp_block} ‚Üí {zvp_header}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—è—Ü—å –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π)
                if month_value and self.month_from_config is None:
                    try:
                        self.month_from_config = int(month_value)
                        print(f"üìÖ –ú—ñ—Å—è—Ü—å –∑ –∫–æ–Ω—Ñ—ñ–≥—É: {self.month_from_config}")
                    except (ValueError, TypeError):
                        pass
                
                row += 1
            
            wb.close()
            print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {len(self.position_headers)} –ø–æ–∑–∏—Ü—ñ–π")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel: {str(e)}")
            print(f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")

    def _calculate_table_rows(self, events: List[Dict[str, Any]]) -> int:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ

        Args:
            events: –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π

        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
        """
        if not events:
            return 5  # –ú—ñ–Ω—ñ–º—É–º 5 —Ä—è–¥–∫—ñ–≤: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω—É–º–µ—Ä–∞—Ü—ñ—è, –¥–∞—Ç–∞, –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—ñ–¥–ø–∏—Å
        
        # 2 –∑–∞–≥–æ–ª–æ–≤–∫–∏ + 1 —Ä—è–¥–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É + –ø–æ–¥—ñ—ó + 1 –ø—ñ–¥–ø–∏—Å
        # –ö–æ–∂–Ω–∞ –ø–æ–¥—ñ—è –∑–∞–π–º–∞—î 1 —Ä—è–¥–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—ñ
        return 3 + len(events) + 1

    def _fill_events(self, table, events: List[Dict[str, Any]], start_row: int) -> int:
        """
        –ó–∞–ø–æ–≤–Ω—é—î —Ç–∞–±–ª–∏—Ü—é –ø–æ–¥—ñ—è–º–∏ (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä—è–¥–∫–∞ 4)

        Args:
            table: –¢–∞–±–ª–∏—Ü—è Word
            events: –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π
            start_row: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ (—ñ–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ 4)

        Returns:
            –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        """
        current_row = start_row
        
        print(f"    üìù –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è {len(events)} –ø–æ–¥—ñ–π, –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫: {start_row}")
        
        for event in events:
            event_type = event.get('type', '–æ–±—Å—Ç—Ä—ñ–ª')
            print(f"      ‚Üí –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–¥—ñ—ó '{event_type}' –æ {event.get('time')} –≤ —Ä—è–¥–æ–∫ {current_row}")
            
            if event_type == '–æ–±—Å—Ç—Ä—ñ–ª':
                current_row = self._fill_obstril_event(table, event, current_row)
            elif event_type == '—Ä–æ—Ç–∞—Ü—ñ—è':
                current_row = self._fill_rotation_event(table, event, current_row)
            elif event_type == '–¥–æ—Å—Ç–∞–≤–∫–∞':
                current_row = self._fill_delivery_event(table, event, current_row)
            elif event_type == '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è':
                current_row = self._fill_recon_event(table, event, current_row)
        
        print(f"    ‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫: {current_row}")
        return current_row

    def _fill_obstril_event(self, table, event: Dict[str, Any], row: int) -> int:
        """
        –ó–∞–ø–æ–≤–Ω—é—î —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–¥—ñ—î—é —Ç–∏–ø—É "–æ–±—Å—Ç—Ä—ñ–ª"

        Args:
            table: –¢–∞–±–ª–∏—Ü—è Word
            event: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é
            row: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞

        Returns:
            –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        """
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 1 (—á–∞—Å)
        col1_text = event['time']
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 2 (–æ–ø–∏—Å + —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π)
        col2_lines = [event['description']]
        
        # –Ø–∫—â–æ —Ü–µ –æ–±—Å—Ç—Ä—ñ–ª –†–í–ü —ñ —î –ª—é–¥–∏
        if event.get('is_rvp') and event.get('people'):
            col2_lines.append('–ù–∞ –†–ó –†–í–ü –ø–µ—Ä–µ–±—É–≤–∞–ª–∏:')
            # –î–æ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π
            for person in event['people']:
                col2_lines.append(person)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –∫–æ–º—ñ—Ä–∫–∏
        cell_col1 = table.rows[row].cells[0]
        cell_col1.text = col1_text
        self._format_cell_text(cell_col1, col1_text)
        
        cell_col2 = table.rows[row].cells[1]
        cell_col2.text = '\n'.join(col2_lines)
        self._format_cell_text(cell_col2, '\n'.join(col2_lines))
        
        return row + 1

    def _fill_rotation_event(self, table, event: Dict[str, Any], row: int) -> int:
        """
        –ó–∞–ø–æ–≤–Ω—é—î —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–¥—ñ—î—é —Ç–∏–ø—É "—Ä–æ—Ç–∞—Ü—ñ—è"

        Args:
            table: –¢–∞–±–ª–∏—Ü—è Word
            event: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é
            row: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞

        Returns:
            –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        """
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 1 (—á–∞—Å)
        col1_text = event['time']
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 2
        col2_lines = []
        
        position = event.get('position', '')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —à–∞–ø–∫–∏ –¥–ª—è —Ü—ñ—î—ó –ø–æ–∑–∏—Ü—ñ—ó
        has_special_header = False
        if position:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –±–ª–æ–∫ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—é —à–∞–ø–∫–æ—é
            # –î–ª—è –≤–∏–±—É–ª–∏ - —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∏–±—É–ª–∏
            if (position, '–ø—Ä–∏–±—É–ª–∏:') in self.zvp_rotation_headers:
                has_special_header = True
            elif not event.get('arrived') and (position, '–≤–∏–±—É–ª–∏:') in self.zvp_rotation_headers:
                has_special_header = True
        
        # –®–∞–ø–∫–∞ –∑ –ø–æ–∑–∏—Ü—ñ—î—é - –≤–∏–≤–æ–¥–∏–º–æ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ –Ω–µ–º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —à–∞–ø–æ–∫
        if position and not has_special_header:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—ñ—î—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ –∫–æ–Ω—Ñ—ñ–≥—É
            if position in self.position_headers:
                header_text = self.position_headers[position]
            else:
                header_text = f"–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–æ—Ç–∞—Ü—ñ—é –æ/—Å –í–ü \"{position}\""
            col2_lines.append(header_text)
        
        # –ü—Ä–∏–±—É–ª–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —à–∞–ø–∫—É
        if event.get('arrived'):
            zvp_key = (position, '–ø—Ä–∏–±—É–ª–∏:')
            
            if zvp_key in self.zvp_rotation_headers:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —à–∞–ø–∫—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É
                col2_lines.append(self.zvp_rotation_headers[zvp_key])
                col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
            else:
                col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
            
            for person in event['arrived']:
                col2_lines.append(person)
        
        # –í–∏–±—É–ª–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —à–∞–ø–∫—É (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∏–±—É–ª–∏)
        if event.get('departed'):
            zvp_key = (position, '–≤–∏–±—É–ª–∏:')
            
            if zvp_key in self.zvp_rotation_headers and not event.get('arrived'):
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —à–∞–ø–∫—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∏–±—É–ª–∏)
                col2_lines.append(self.zvp_rotation_headers[zvp_key])
                col2_lines.append('–≤–∏–±—É–ª–∏:')
            else:
                col2_lines.append('–≤–∏–±—É–ª–∏:')
            
            for person in event['departed']:
                col2_lines.append(person)
        
        # –í–æ–¥—ñ—ó
        if event.get('drivers'):
            col2_lines.append('–≤–æ–¥—ñ–π:')
            for driver in event['drivers']:
                col2_lines.append(driver)
        
        # –®—Ç—É—Ä–º–∞–Ω–∏
        if event.get('navigators'):
            col2_lines.append('—à—Ç—É—Ä–º–∞–Ω:')
            for navigator in event['navigators']:
                col2_lines.append(navigator)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –∫–æ–º—ñ—Ä–∫–∏
        cell_col1 = table.rows[row].cells[0]
        cell_col1.text = col1_text
        self._format_cell_text(cell_col1, col1_text)
        
        cell_col2 = table.rows[row].cells[1]
        cell_col2.text = '\n'.join(col2_lines)
        self._format_cell_text(cell_col2, '\n'.join(col2_lines))
        
        return row + 1

    def _fill_delivery_event(self, table, event: Dict[str, Any], row: int) -> int:
        """
        –ó–∞–ø–æ–≤–Ω—é—î —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–¥—ñ—î—é —Ç–∏–ø—É "–¥–æ—Å—Ç–∞–≤–∫–∞"

        Args:
            table: –¢–∞–±–ª–∏—Ü—è Word
            event: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é
            row: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞

        Returns:
            –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        """
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 1 (—á–∞—Å)
        col1_text = event['time']
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 2
        col2_lines = []
        
        # –®–∞–ø–∫–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –º–∞–π–Ω–∞ —Ç–∞ –Ω.–ø.
        cargo = event.get('cargo')
        location = event.get('location')
        
        if cargo and location:
            key = (cargo, location)
            if key in self.delivery_headers:
                header_text = self.delivery_headers[key]
            else:
                header_text = f"–ó–¥—ñ–π—Å–Ω–µ–Ω–æ –¥–æ—Å—Ç–∞–≤–∫—É: {cargo}, –Ω.–ø. {location}"
            col2_lines.append(header_text)
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ (—è–∫—â–æ —î) - —Å–ø–æ—á–∞—Ç–∫—É
        if event.get('general'):
            for person in event['general']:
                col2_lines.append(person)
        
        # –í–æ–¥—ñ—ó
        if event.get('drivers'):
            col2_lines.append('–≤–æ–¥—ñ–π:')
            for driver in event['drivers']:
                col2_lines.append(driver)
        
        # –®—Ç—É—Ä–º–∞–Ω–∏ - –≤ –∫—ñ–Ω—Ü—ñ
        if event.get('navigators'):
            col2_lines.append('—à—Ç—É—Ä–º–∞–Ω:')
            for navigator in event['navigators']:
                col2_lines.append(navigator)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –∫–æ–º—ñ—Ä–∫–∏
        cell_col1 = table.rows[row].cells[0]
        cell_col1.text = col1_text
        self._format_cell_text(cell_col1, col1_text)
        
        cell_col2 = table.rows[row].cells[1]
        cell_col2.text = '\n'.join(col2_lines)
        self._format_cell_text(cell_col2, '\n'.join(col2_lines))
        
        return row + 1

    def _fill_recon_event(self, table, event: Dict[str, Any], row: int) -> int:
        """
        –ó–∞–ø–æ–≤–Ω—é—î —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–¥—ñ—î—é —Ç–∏–ø—É "—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è"

        Args:
            table: –¢–∞–±–ª–∏—Ü—è Word
            event: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é
            row: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞

        Returns:
            –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        """
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 1 (—á–∞—Å)
        col1_text = event['time']
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ 2
        col2_lines = []
        
        # –®–∞–ø–∫–∞
        recon_type = event.get('recon_type')
        location = event.get('location', '')
        
        # –Ø–∫—â–æ —î –≤–∏–¥ –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä. "–ø–æ—Ç–æ—á–Ω–æ!") - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
        if recon_type:
            recon_type_key = recon_type.lower()
            if recon_type_key in self.recon_headers:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞–±–ª–æ–Ω –∑ –∫–æ–Ω—Ñ—ñ–≥—É —ñ –∑–∞–º—ñ–Ω—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ –Ω.–ø.
                header_template = self.recon_headers[recon_type_key]
                header_text = header_template.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—É–Ω–∫—Ç—É 4)', location)
                header_text = header_text.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—É–Ω–∫—Ç—É 4)', location)
                col2_lines.append(header_text)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–æ–Ω—Ñ—ñ–≥—É - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç
                col2_lines.append(f"–†–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è ({recon_type}), –Ω.–ø. {location}")
            
            # –î–æ–¥–∞—î–º–æ –±–ª–æ–∫–∏ –ø—Ä–∏–±—É–ª–∏/–≤–∏–±—É–ª–∏ –ù–ò–ñ–ß–ï —à–∞–ø–∫–∏ —è–∫—â–æ —î
            if event.get('arrived'):
                # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–ø—Ä–∏–±—É–ª–∏:" –≤ –∫–æ–Ω—Ñ—ñ–≥—É
                if '–ø—Ä–∏–±—É–ª–∏:' in self.recon_headers:
                    arrived_header = self.recon_headers['–ø—Ä–∏–±—É–ª–∏:']
                    arrived_header = arrived_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—É–Ω–∫—Ç—É 4)', location)
                    arrived_header = arrived_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—É–Ω–∫—Ç—É 4)', location)
                    col2_lines.append(arrived_header)
                    col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
                else:
                    col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
                for person in event['arrived']:
                    col2_lines.append(person)
            
            if event.get('departed'):
                # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–≤–∏–±—É–ª–∏:" –≤ –∫–æ–Ω—Ñ—ñ–≥—É
                if '–≤–∏–±—É–ª–∏:' in self.recon_headers:
                    departed_header = self.recon_headers['–≤–∏–±—É–ª–∏:']
                    departed_header = departed_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—É–Ω–∫—Ç—É 4)', location)
                    departed_header = departed_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—É–Ω–∫—Ç—É 4)', location)
                    col2_lines.append(departed_header)
                    col2_lines.append('–≤–∏–±—É–ª–∏:')
                else:
                    col2_lines.append('–≤–∏–±—É–ª–∏:')
                for person in event['departed']:
                    col2_lines.append(person)
        else:
            # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–±—É–ª–∏/–≤–∏–±—É–ª–∏ –±–µ–∑ –≤–∏–¥—É –ø–æ—à—É–∫—É
            
            if event.get('arrived'):
                # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–ø—Ä–∏–±—É–ª–∏:" –≤ –∫–æ–Ω—Ñ—ñ–≥—É
                if '–ø—Ä–∏–±—É–ª–∏:' in self.recon_headers:
                    arrived_header = self.recon_headers['–ø—Ä–∏–±—É–ª–∏:']
                    arrived_header = arrived_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—É–Ω–∫—Ç—É 4)', location)
                    arrived_header = arrived_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—É–Ω–∫—Ç—É 4)', location)
                    col2_lines.append(arrived_header)
                    col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
                else:
                    col2_lines.append(f"–†–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω.–ø. {location}")
                    col2_lines.append('–ø—Ä–∏–±—É–ª–∏:')
                for person in event['arrived']:
                    col2_lines.append(person)
            
            if event.get('departed'):
                # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–ª–æ–∫—É "–≤–∏–±—É–ª–∏:" –≤ –∫–æ–Ω—Ñ—ñ–≥—É
                if '–≤–∏–±—É–ª–∏:' in self.recon_headers:
                    departed_header = self.recon_headers['–≤–∏–±—É–ª–∏:']
                    departed_header = departed_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—É–Ω–∫—Ç—É 4)', location)
                    departed_header = departed_header.replace('(–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—É–Ω–∫—Ç—É 4)', location)
                    col2_lines.append(departed_header)
                    col2_lines.append('–≤–∏–±—É–ª–∏:')
                else:
                    if not event.get('arrived'):
                        col2_lines.append(f"–†–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω.–ø. {location}")
                    col2_lines.append('–≤–∏–±—É–ª–∏:')
                for person in event['departed']:
                    col2_lines.append(person)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –∫–æ–º—ñ—Ä–∫–∏
        cell_col1 = table.rows[row].cells[0]
        cell_col1.text = col1_text
        self._format_cell_text(cell_col1, col1_text)
        
        cell_col2 = table.rows[row].cells[1]
        cell_col2.text = '\n'.join(col2_lines)
        self._format_cell_text(cell_col2, '\n'.join(col2_lines))
        
        return row + 1

    def _format_cell_text(self, cell, text: str) -> None:
        """
        –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –≤ –∫–æ–º—ñ—Ä—Ü—ñ

        Args:
            cell: –ö–æ–º—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        """
        if not cell.paragraphs:
            return
        
        paragraph = cell.paragraphs[0]
        
        # –û—á–∏—â–∞—î–º–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        paragraph.clear()
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        run = paragraph.add_run(text)
        run.font.size = Pt(12)
        run.font.name = 'Times New Roman'

    def _get_events_for_day(self, data: List[List[str]], day: int) -> List[Dict[str, Any]]:
        """
        –í–∏—Ç—è–≥—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∑ —Ä–æ–∑–±–æ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏

        Args:
            data: –î–∞–Ω—ñ CSV —Ñ–∞–π–ª—É
            day: –ù–æ–º–µ—Ä –¥–Ω—è –º—ñ—Å—è—Ü—è (1-31)

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –∑ —Ä–æ–∑–±–æ—Ä–æ–º —á–∞—Å—É, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ —Å–ø–∏—Å–∫—É –ª—é–¥–µ–π
        """
        day_col_idx = 3 + (day - 1)  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
        events_dict = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
        
        print(f"  üîç –ê–Ω–∞–ª—ñ–∑ –¥–Ω—è {day}, –∫–æ–ª–æ–Ω–∫–∞ —ñ–Ω–¥–µ–∫—Å {day_col_idx}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        for row_idx, row in enumerate(data[1:], start=1):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü—è –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ä—è–¥–∫—É
            if day_col_idx >= len(row):
                continue
                
            cell_value = row[day_col_idx].strip()
            
            if not cell_value or len(cell_value) <= 2:
                continue
            
            print(f"    üìÑ –†—è–¥–æ–∫ {row_idx}: –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç –¥–æ–≤–∂–∏–Ω–æ—é {len(cell_value)} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            print(f"    üìÑ –†—è–¥–æ–∫ {row_idx}: –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç –¥–æ–≤–∂–∏–Ω–æ—é {len(cell_value)} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–≤–∞–Ω–Ω—è —Ç–∞ –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–æ–∫ 1 —Ç–∞ 2
            rank = row[1].strip() if len(row) > 1 else ''
            full_name = row[2].strip() if len(row) > 2 else ''
            person = f"{rank} {full_name}".strip()
            
            # –ü–∞—Ä—Å–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–¥—ñ—é
            event_info = self._parse_event_info(cell_value)
            
            if event_info:
                event_type = event_info.get('type', '–æ–±—Å—Ç—Ä—ñ–ª')
                
                if event_type == '–æ–±—Å—Ç—Ä—ñ–ª':
                    # –û–±—Å—Ç—Ä—ñ–ª–∏: —Å—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö
                    event_key = f"obstril_{event_info['time']}_{event_info.get('description', '')}"
                    
                    if event_key not in events_dict:
                        events_dict[event_key] = {
                            'type': '–æ–±—Å—Ç—Ä—ñ–ª',
                            'time': event_info['time'],
                            'description': event_info.get('description', ''),
                            'is_rvp': event_info.get('is_rvp', False),
                            'people': [],
                            'is_separate': True
                        }
                    
                    # –î–æ–¥–∞—î–º–æ –ª—é–¥–∏–Ω—É –¥–æ —Å–ø–∏—Å–∫—É
                    if person:
                        events_dict[event_key]['people'].append(person)
                
                elif event_type == '—Ä–æ—Ç–∞—Ü—ñ—è':
                    # –†–æ—Ç–∞—Ü—ñ—ó: –≥—Ä—É–ø—É—î–º–æ –∑–∞ —á–∞—Å–æ–º —Ç–∞ –ø–æ–∑–∏—Ü—ñ—î—é
                    event_key = f"rotation_{event_info['time']}_{event_info.get('position', '')}"
                    
                    if event_key not in events_dict:
                        events_dict[event_key] = {
                            'type': '—Ä–æ—Ç–∞—Ü—ñ—è',
                            'time': event_info['time'],
                            'position': event_info.get('position'),  # –ü–æ–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è (–Ω–∞–ø—Ä. "–ó–í–ü –ú–∞—Ä—ñ–æ-1")
                            'arrived': [],
                            'departed': [],
                            'drivers': [],
                            'navigators': [],
                            'is_separate': False
                        }
                    
                    # –î–æ–¥–∞—î–º–æ –ª—é–¥–∏–Ω—É –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (–∑–≤–∞–Ω–Ω—è + –ü–Ü–ë –∑ CSV)
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–ª–æ–∫ –ø–æ block_type –∑ event_info
                    if person:  # person = –∑–≤–∞–Ω–Ω—è + –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–æ–∫ 1 —Ç–∞ 2
                        block_type = event_info.get('block_type')
                        
                        # –ü—Ä–∏–±—É–ª–∏
                        if block_type == 'arrived':
                            events_dict[event_key]['arrived'].append(person)
                        # –í–∏–±—É–ª–∏
                        elif block_type == 'departed':
                            events_dict[event_key]['departed'].append(person)
                        # –í–æ–¥—ñ–π
                        elif block_type == 'driver':
                            events_dict[event_key]['drivers'].append(person)
                        # –®—Ç—É—Ä–º–∞–Ω
                        elif block_type == 'navigator':
                            events_dict[event_key]['navigators'].append(person)
                    
                    # –î–æ–¥–∞—î–º–æ –≤–æ–¥—ñ—ó–≤ —Ç–∞ —à—Ç—É—Ä–º–∞–Ω—ñ–≤ –∑ —Å–∞–º–æ–≥–æ event_info (—è–∫—â–æ –≤–æ–Ω–∏ –≤–∫–∞–∑–∞–Ω—ñ –ø—Ä—è–º–æ –≤ CSV, –∞ –Ω–µ —á–µ—Ä–µ–∑ –ª—é–¥–µ–π)
                    # –¶–µ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –≤ –æ–¥–Ω—ñ–π —è—á–µ–π—Ü—ñ CSV –±—É–¥–µ –∫—ñ–ª—å–∫–∞ –ª—é–¥–µ–π –≤ –±–ª–æ—Ü—ñ –≤–æ–¥—ñ–π/—à—Ç—É—Ä–º–∞–Ω
                    if event_info.get('drivers') and not person:
                        events_dict[event_key]['drivers'].extend(event_info['drivers'])
                    if event_info.get('navigators') and not person:
                        events_dict[event_key]['navigators'].extend(event_info['navigators'])
                
                elif event_type == '–¥–æ—Å—Ç–∞–≤–∫–∞':
                    # –î–æ—Å—Ç–∞–≤–∫–∏: –≥—Ä—É–ø—É—î–º–æ –∑–∞ —á–∞—Å–æ–º, –º–∞–π–Ω–æ–º —Ç–∞ –Ω.–ø.
                    event_key = f"delivery_{event_info['time']}_{event_info.get('cargo', '')}_{event_info.get('location', '')}"
                    
                    if event_key not in events_dict:
                        events_dict[event_key] = {
                            'type': '–¥–æ—Å—Ç–∞–≤–∫–∞',
                            'time': event_info['time'],
                            'cargo': event_info.get('cargo'),
                            'location': event_info.get('location'),
                            'drivers': [],
                            'navigators': [],
                            'general': [],  # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
                            'is_separate': False
                        }
                    
                    # –î–æ–¥–∞—î–º–æ –ª—é–¥–∏–Ω—É –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (–∑–≤–∞–Ω–Ω—è + –ü–Ü–ë –∑ CSV)
                    if person:
                        block_type = event_info.get('block_type')
                        
                        # –í–æ–¥—ñ–π
                        if block_type == 'driver':
                            events_dict[event_key]['drivers'].append(person)
                        # –®—Ç—É—Ä–º–∞–Ω
                        elif block_type == 'navigator':
                            events_dict[event_key]['navigators'].append(person)
                        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ (—è–∫—â–æ –±–ª–æ–∫ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π)
                        else:
                            events_dict[event_key]['general'].append(person)
                
                elif event_type == '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è':
                    # –†–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è: –≥—Ä—É–ø—É—î–º–æ –∑–∞ —á–∞—Å–æ–º, —Ç–∏–ø–æ–º –ø–æ—à—É–∫—É —Ç–∞ –Ω.–ø.
                    recon_type = event_info.get('recon_type', '')
                    location = event_info.get('location', '')
                    event_key = f"recon_{event_info['time']}_{recon_type}_{location}"
                    
                    if event_key not in events_dict:
                        events_dict[event_key] = {
                            'type': '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è',
                            'time': event_info['time'],
                            'recon_type': recon_type,
                            'location': location,
                            'arrived': [],
                            'departed': [],
                            'is_separate': False
                        }
                    
                    # –î–æ–¥–∞—î–º–æ –ª—é–¥–∏–Ω—É –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
                    if person:
                        block_type = event_info.get('block_type')
                        
                        if block_type == 'arrived':
                            events_dict[event_key]['arrived'].append(person)
                        elif block_type == 'departed':
                            events_dict[event_key]['departed'].append(person)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ —á–∞—Å–æ–º
        events_list = list(events_dict.values())
        events_list.sort(key=lambda x: x['time'])
        
        if events_list:
            print(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(events_list)} –ø–æ–¥—ñ–π –¥–ª—è –¥–Ω—è {day}")
        
        return events_list

    def _parse_event_info(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–¥—ñ—é

        Args:
            text: –¢–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ–¥—ñ—é

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–æ–∑–±–æ—Ä–æ–º –ø–æ–¥—ñ—ó –∞–±–æ None
        """
        lines = text.split('\n')
        
        if len(lines) < 2:
            return None
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–¥—ñ—ó
        # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ –±—É—Ç–∏:
        # 1) "–û–±—Å—Ç—Ä—ñ–ª\n1) —á–∞—Å\n–æ–ø–∏—Å" (—Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç)
        # 2) "1) —á–∞—Å\n2) –æ–ø–∏—Å" (–Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç - –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ –∑–º—ñ—Å—Ç—É)
        
        first_line = lines[0].strip()
        event_type = None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - —Ç–∏–ø –ø–æ–¥—ñ—ó)
        if '–æ–±—Å—Ç—Ä—ñ–ª' in first_line.lower():
            event_type = '–æ–±—Å—Ç—Ä—ñ–ª'
        elif '—Ä–æ—Ç–∞—Ü' in first_line.lower():
            event_type = '—Ä–æ—Ç–∞—Ü—ñ—è'
        elif '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç' in first_line.lower():
            event_type = '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è'
        elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in first_line.lower():
            event_type = '–¥–æ—Å—Ç–∞–≤–∫–∞'
        
        # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å
        time = None
        time_line_idx = 0
        
        if event_type:
            # –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç: —á–∞—Å —É –¥—Ä—É–≥–æ–º—É —Ä—è–¥–∫—É
            time_line = lines[1].strip() if len(lines) > 1 else ''
            time_match = re.search(r'(\d{2}:\d{2}(?:-\d{2}:\d{2})?)', time_line)
            if time_match:
                time = time_match.group(1)
                time_line_idx = 1
        else:
            # –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: —á–∞—Å —É –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É (—Ñ–æ—Ä–º–∞—Ç "1) 23:08-23:14")
            time_match = re.search(r'(\d{2}:\d{2}(?:-\d{2}:\d{2})?)', first_line)
            if time_match:
                time = time_match.group(1)
                time_line_idx = 0
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ –∑–º—ñ—Å—Ç—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö
                full_text = '\n'.join(lines).lower()
                if '–æ–±—Å—Ç—Ä—ñ–ª' in full_text or '–ø–æ —Ä–∑ —Ä–≤–ø' in full_text or '–ø–æ —Ä–≤–ø' in full_text:
                    event_type = '–æ–±—Å—Ç—Ä—ñ–ª'
                elif '—Ä–æ—Ç–∞—Ü' in full_text:
                    event_type = '—Ä–æ—Ç–∞—Ü—ñ—è'
                elif '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç' in full_text:
                    event_type = '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è'
                elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in full_text:
                    event_type = '–¥–æ—Å—Ç–∞–≤–∫–∞'
        
        if not time or not event_type:
            return None
        
        if event_type == '–æ–±—Å—Ç—Ä—ñ–ª':
            return self._parse_obstril(lines, time, time_line_idx)
        elif event_type == '—Ä–æ—Ç–∞—Ü—ñ—è':
            return self._parse_rotation(lines, time, time_line_idx)
        elif event_type == '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è':
            return self._parse_recon(lines, time, time_line_idx)
        elif event_type == '–¥–æ—Å—Ç–∞–≤–∫–∞':
            return self._parse_delivery(lines, time, time_line_idx)
        
        return None

    def _parse_obstril(self, lines: List[str], time: str, time_line_idx: int = 1) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Å—Ç—Ä—ñ–ª

        Args:
            lines: –†—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –ø–æ–¥—ñ—ó
            time: –ß–∞—Å –ø–æ–¥—ñ—ó
            time_line_idx: –Ü–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º (0 –∞–±–æ 1)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –æ–±—Å—Ç—Ä—ñ–ª
        """
        # –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å (—Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è —á–∞—Å—É)
        description = ''
        
        # –ü–æ—á–∏–Ω–∞—î–º–æ —à—É–∫–∞—Ç–∏ –æ–ø–∏—Å –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º
        for line in lines[time_line_idx + 1:]:
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞ —è–∫—â–æ —î (—Ñ–æ—Ä–º–∞—Ç "2) –æ–ø–∏—Å")
            clean_line = re.sub(r'^\d+\)\s*', '', line.strip())
            if clean_line:
                description = clean_line
                break
        
        if not description:
            return None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –æ–±—Å—Ç—Ä—ñ–ª –†–í–ü (—à—É–∫–∞—î–º–æ "–ø–æ —Ä–∑ —Ä–≤–ø" –∞–±–æ "–ø–æ —Ä–≤–ø" –≤ –æ–ø–∏—Å—ñ)
        is_rvp = ('–ø–æ —Ä–∑ —Ä–≤–ø' in description.lower() or 
                  '–ø–æ —Ä–≤–ø' in description.lower())
        
        return {
            'type': '–æ–±—Å—Ç—Ä—ñ–ª',
            'time': time,
            'description': description,
            'is_rvp': is_rvp,
            'is_separate': True  # –û–±—Å—Ç—Ä—ñ–ª –∑–∞–≤–∂–¥–∏ –æ–∫—Ä–µ–º–æ
        }

    def _parse_rotation(self, lines: List[str], time: str, time_line_idx: int = 1) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—Ç–∞—Ü—ñ—é

        Args:
            lines: –†—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –ø–æ–¥—ñ—ó
            time: –ß–∞—Å –ø–æ–¥—ñ—ó
            time_line_idx: –Ü–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º (0 –∞–±–æ 1)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–æ—Ç–∞—Ü—ñ—é
        """
        # –®—É–∫–∞—î–º–æ –±–ª–æ–∫–∏: –≤–∏–±—É–ª–∏, –ø—Ä–∏–±—É–ª–∏, –≤–æ–¥—ñ–π, —à—Ç—É—Ä–º–∞–Ω
        position = None
        block_type = None  # 'arrived', 'departed', 'driver', 'navigator'
        drivers = []
        navigators = []
        found_block = False  # –ß–∏ –∑–Ω–∞–π—à–ª–∏ –±–ª–æ–∫ (–¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó)
        
        # –ü–æ—á–∏–Ω–∞—î–º–æ –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º
        for line in lines[time_line_idx + 1:]:
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞
            clean_line = re.sub(r'^\d+\)\s*', '', line.strip())
            if not clean_line:
                continue
            
            line_lower = clean_line.lower()
            
            # –Ø–∫—â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –±–ª–æ–∫ —ñ —â–µ –Ω–µ –º–∞—î –ø–æ–∑–∏—Ü—ñ—ó - —Ü–µ–π —Ä—è–¥–æ–∫ —î –ø–æ–∑–∏—Ü—ñ—î—é
            if found_block and not position:
                position = clean_line  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é (–Ω–∞–ø—Ä. "–ó–í–ü –ú–∞—Ä—ñ–æ-1")
                found_block = False  # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
                continue
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –±–ª–æ–∫—É
            if '–ø—Ä–∏–±—É–ª–∏:' in line_lower:
                block_type = 'arrived'
                found_block = True
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–∑–∏—Ü—ñ—è –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    position = parts[1].strip()  # –ü–æ–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
                    found_block = False
            elif '–≤–∏–±—É–ª–∏:' in line_lower:
                block_type = 'departed'
                found_block = True
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–∑–∏—Ü—ñ—è –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    position = parts[1].strip()  # –ü–æ–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
                    found_block = False
            elif '–≤–æ–¥—ñ–π:' in line_lower:
                block_type = 'driver'
                found_block = True
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    drivers.append(parts[1].strip())
                    found_block = False
            elif '—à—Ç—É—Ä–º–∞–Ω:' in line_lower:
                block_type = 'navigator'
                found_block = True
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    navigators.append(parts[1].strip())
                    found_block = False
            elif position and block_type in ['driver', 'navigator']:
                # –î–æ–¥–∞—î–º–æ –ª—é–¥–µ–π –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –±–ª–æ–∫—É (—Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –∑–Ω–∞–π—à–ª–∏ –ø–æ–∑–∏—Ü—ñ—é)
                if block_type == 'driver':
                    drivers.append(clean_line)
                elif block_type == 'navigator':
                    navigators.append(clean_line)
        
        return {
            'type': '—Ä–æ—Ç–∞—Ü—ñ—è',
            'time': time,
            'position': position,  # –ü–æ–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤ –∫–æ–Ω—Ñ—ñ–≥—É (–Ω–∞–ø—Ä. "–ó–í–ü –ú–∞—Ä—ñ–æ-1")
            'block_type': block_type,  # –¢–µ–ø–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ 'arrived', 'departed', 'driver', 'navigator'
            'drivers': drivers,
            'navigators': navigators,
            'is_separate': False  # –ú–æ–∂–µ –≥—Ä—É–ø—É–≤–∞—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ –∑–∞ —á–∞—Å–æ–º
        }

    def _parse_recon(self, lines: List[str], time: str, time_line_idx: int = 1) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è

        Args:
            lines: –†—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –ø–æ–¥—ñ—ó
            time: –ß–∞—Å –ø–æ–¥—ñ—ó
            time_line_idx: –Ü–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º (0 –∞–±–æ 1)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è
        """
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        # –í–∞—Ä—ñ–∞–Ω—Ç 1: –†—è–¥–æ–∫ –ø—ñ—Å–ª—è —á–∞—Å—É: "–ø—Ä–∏–±—É–ª–∏:" ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫: –Ω.–ø.
        # –í–∞—Ä—ñ–∞–Ω—Ç 2: –†—è–¥–æ–∫ –ø—ñ—Å–ª—è —á–∞—Å—É: "–≤–∏–±—É–ª–∏:" ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫: –Ω.–ø.
        # –í–∞—Ä—ñ–∞–Ω—Ç 3: –†—è–¥–æ–∫ –ø—ñ—Å–ª—è —á–∞—Å—É: –≤–∏–¥ –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä. "–ø–æ—Ç–æ—á–Ω–æ!") ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫: –Ω.–ø.
        
        block_type = None  # 'arrived', 'departed', –∞–±–æ None
        recon_type = None  # –í–∏–¥ –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä. "–ø–æ—Ç–æ—á–Ω–æ!")
        location = None  # –ù.–ø.
        found_block = False
        
        # –ü–æ—á–∏–Ω–∞—î–º–æ –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º
        for line in lines[time_line_idx + 1:]:
            clean_line = re.sub(r'^\d+\)\s*', '', line.strip())
            if not clean_line:
                continue
            
            line_lower = clean_line.lower()
            
            # –Ø–∫—â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –±–ª–æ–∫/—Ç–∏–ø —ñ —â–µ –Ω–µ–º–∞—î –Ω.–ø. - —Ü–µ–π —Ä—è–¥–æ–∫ —î –Ω.–ø.
            if found_block and not location:
                location = clean_line
                break
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –±–ª–æ–∫—É
            if '–ø—Ä–∏–±—É–ª–∏:' in line_lower:
                block_type = 'arrived'
                found_block = True
            elif '–≤–∏–±—É–ª–∏:' in line_lower:
                block_type = 'departed'
                found_block = True
            else:
                # –¶–µ –≤–∏–¥ –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä. "–ø–æ—Ç–æ—á–Ω–æ!")
                recon_type = clean_line
                found_block = True
        
        return {
            'type': '—Ä–µ–∫–æ–≥–Ω–æ—Å—Ç—É–≤–∞–Ω–Ω—è',
            'time': time,
            'block_type': block_type,  # 'arrived', 'departed', –∞–±–æ None
            'recon_type': recon_type,  # –í–∏–¥ –ø–æ—à—É–∫—É –∞–±–æ None
            'location': location,  # –ù.–ø.
            'is_separate': False
        }

    def _parse_delivery(self, lines: List[str], time: str, time_line_idx: int = 1) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É

        Args:
            lines: –†—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –ø–æ–¥—ñ—ó
            time: –ß–∞—Å –ø–æ–¥—ñ—ó
            time_line_idx: –Ü–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º (0 –∞–±–æ 1)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
        """
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        # –†—è–¥–æ–∫ –ø—ñ—Å–ª—è —á–∞—Å—É: –º–∞–π–Ω–æ
        # –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫: –Ω.–ø. (–Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç)
        # –î–∞–ª—ñ: –±–ª–æ–∫–∏ (–≤–æ–¥—ñ–π:, —à—Ç—É—Ä–º–∞–Ω:, –∞–±–æ –ø—É—Å—Ç–æ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É)
        
        cargo = None  # –ú–∞–π–Ω–æ
        location = None  # –ù.–ø.
        block_type = None  # 'driver', 'navigator', –∞–±–æ None (–∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫)
        drivers = []
        navigators = []
        general = []  # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ (—Ç—ñ —Ö—Ç–æ –Ω–µ –≤–æ–¥—ñ–π —ñ –Ω–µ —à—Ç—É—Ä–º–∞–Ω)
        found_block = False
        
        # –ü–æ—á–∏–Ω–∞—î–º–æ –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ –∑ —á–∞—Å–æ–º
        for idx, line in enumerate(lines[time_line_idx + 1:]):
            clean_line = re.sub(r'^\d+\)\s*', '', line.strip())
            if not clean_line:
                continue
            
            line_lower = clean_line.lower()
            
            # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –º–∞–π–Ω–æ
            if cargo is None:
                cargo = clean_line
                continue
            
            # –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ - –Ω.–ø.
            if location is None:
                location = clean_line
                continue
            
            # –Ø–∫—â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –±–ª–æ–∫ —ñ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ –π–¥–µ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
            if found_block and block_type is None:
                general.append(clean_line)
                continue
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–ª–æ–∫
            if '–≤–æ–¥—ñ–π:' in line_lower:
                block_type = 'driver'
                found_block = True
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    drivers.append(parts[1].strip())
                    found_block = False
            elif '—à—Ç—É—Ä–º–∞–Ω:' in line_lower:
                block_type = 'navigator'
                found_block = True
                parts = clean_line.split(':', 1)
                if len(parts) > 1 and parts[1].strip():
                    navigators.append(parts[1].strip())
                    found_block = False
            elif block_type == 'driver':
                drivers.append(clean_line)
            elif block_type == 'navigator':
                navigators.append(clean_line)
            elif block_type is None:
                # –Ø–∫—â–æ –±–ª–æ–∫ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —ñ —Ä—è–¥–æ–∫ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å ":", –¥–æ–¥–∞—î–º–æ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
                if ':' not in clean_line:
                    general.append(clean_line)
        
        return {
            'type': '–¥–æ—Å—Ç–∞–≤–∫–∞',
            'time': time,
            'cargo': cargo,
            'location': location,
            'block_type': block_type,
            'drivers': drivers,
            'navigators': navigators,
            'general': general,
            'is_separate': False
        }

    def create_word_document(self, output_path: str) -> None:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è

        Args:
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É
        """
        print(f"\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É...")

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
            doc = Document()

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            print("üìê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
            section = doc.sections[0]
            section.top_margin = Inches(1.5 / 2.54)      # 1.5 —Å–º
            section.bottom_margin = Inches(1.5 / 2.54)   # 1.5 —Å–º
            section.left_margin = Inches(2.5 / 2.54)     # 2.5 —Å–º
            section.right_margin = Inches(1.5 / 2.54)    # 1.5 —Å–º

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è (1-31)
            print(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –≤—Å—ñ—Ö –¥–Ω—ñ–≤ –º—ñ—Å—è—Ü—è (1-31)...")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º—ñ—Å—è—Ü—å –∑ –∫–æ–Ω—Ñ—ñ–≥—É —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –∑ CSV
            display_month = self.month_from_config if self.month_from_config else self.month
            
            for day in range(1, 32):
                print(f"\nüìÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥–Ω—è {day}.{display_month:02d}.{self.year}...")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–¥—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
                events = self._get_events_for_day(self.csv_data, day)
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
                total_rows = self._calculate_table_rows(events)
                
                # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä—è–¥–∫—ñ–≤ (–º—ñ–Ω—ñ–º—É–º 5)
                num_rows = max(5, total_rows)
                table = doc.add_table(rows=num_rows, cols=3)
                table.style = 'Table Grid'

                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
                column_widths = [
                    2.48,   # –ö–æ–ª–æ–Ω–∫–∞ 1: 2.48 —Å–º
                    12.32,  # –ö–æ–ª–æ–Ω–∫–∞ 2: 12.32 —Å–º
                    1.99    # –ö–æ–ª–æ–Ω–∫–∞ 3: 1.99 —Å–º
                ]

                for row in table.rows:
                    for col_idx, cell in enumerate(row.cells):
                        cell.width = Inches(column_widths[col_idx] / 2.54)

                # –†—è–¥–æ–∫ 1: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                headers = ['–î–∞—Ç–∞,\n—á–∞—Å', '–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫ —Ç–∞ —Å—Ç–∏—Å–ª–µ –≤–∏—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Ö–æ–¥—É –±–æ–π–æ–≤–∏—Ö –¥—ñ–π', '–ü—Ä–∏–º—ñ—Ç–∫–∞']
                for col_idx, header in enumerate(headers):
                    cell = table.rows[0].cells[col_idx]
                    cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                    cell.text = ''
                    paragraph = cell.paragraphs[0]
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    run = paragraph.add_run(header)
                    run.font.size = Pt(12)
                    run.font.name = 'Times New Roman'

                # –†—è–¥–æ–∫ 2: –ù—É–º–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–Ω–æ–∫
                numbers = ['1', '2', '3']
                for col_idx, number in enumerate(numbers):
                    cell = table.rows[1].cells[col_idx]
                    cell.text = number
                    if cell.paragraphs:
                        paragraph = cell.paragraphs[0]
                        run = paragraph.runs[0] if paragraph.runs else paragraph.add_run(number)
                        run.font.size = Pt(12)
                        run.font.name = 'Times New Roman'
                        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

                # –†—è–¥–æ–∫ 3: –î–∞—Ç–∞ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç (–∑–∞–≤–∂–¥–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π)
                date_str = f"{day:02d}.{display_month:02d}.{self.year}"
                row3_data = [
                    date_str,
                    self.daily_status_text,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω—Ñ—ñ–≥—É –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                    ''  # –ü—Ä–∏–º—ñ—Ç–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
                ]
                
                for col_idx, cell_data in enumerate(row3_data):
                    cell = table.rows[2].cells[col_idx]
                    cell.text = cell_data
                    self._format_cell_text(cell, cell_data)
                
                # –†—è–¥–∫–∏ 4+: –ü–æ–¥—ñ—ó (—è–∫—â–æ —î)
                current_row = 3  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ —Ä—è–¥–∫–∞ 4 (—ñ–Ω–¥–µ–∫—Å 3)
                if events:
                    current_row = self._fill_events(table, events, current_row)

                # –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫: –ö–æ–º–∞–Ω–¥–∏—Ä —Ç–∞ –ø—ñ–¥–ø–∏—Å (–∑–∞–≤–∂–¥–∏ –≤ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—å–æ–º—É —Ä—è–¥–∫—É)
                signature_row = num_rows - 1
                row_signature = [
                    '',  # –ö–æ–ª–æ–Ω–∫–∞ 1 –ø–æ—Ä–æ–∂–Ω—è
                    self.commander_text,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω—Ñ—ñ–≥—É –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                    ''  # –ö–æ–ª–æ–Ω–∫–∞ 3 –ø–æ—Ä–æ–∂–Ω—è
                ]

                for col_idx, cell_data in enumerate(row_signature):
                    cell = table.rows[signature_row].cells[col_idx]
                    cell.text = cell_data
                    if cell.paragraphs:
                        paragraph = cell.paragraphs[0]
                        if paragraph.runs:
                            run = paragraph.runs[0]
                        else:
                            run = paragraph.add_run(cell_data)
                        run.font.bold = True  # –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–∞
                        run.font.size = Pt(12)
                        run.font.name = 'Times New Roman'

                # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–¥–æ–Ω–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
                self._set_table_borders(table)
                
                # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è —Ç–∞–±–ª–∏—Ü—ñ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ—ó)
                if day < 31:
                    doc.add_page_break()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
            print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É: {output_path}")
            doc.save(output_path)
            print("‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É: {str(e)}", file=sys.stderr)
            raise

    def _set_table_borders(self, table):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ—Ä–¥–æ–Ω–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ

        Args:
            table: –¢–∞–±–ª–∏—Ü—è docx
        """
        tbl = table._element
        tblPr = tbl.tblPr

        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç borders —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        tblBorders = tblPr.find(qn('w:tblBorders'))
        if tblBorders is None:
            tblBorders = OxmlElement('w:tblBorders')
            tblPr.append(tblBorders)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–æ—Ä–¥–æ–Ω–∏
        for border_name in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
            border = OxmlElement(f'w:{border_name}')
            border.set(qn('w:val'), 'single')
            border.set(qn('w:sz'), '4')  # –¢–æ–≤—â–∏–Ω–∞ –∫–æ—Ä–¥–æ–Ω—É
            border.set(qn('w:space'), '0')
            border.set(qn('w:color'), '000000')  # –ß–æ—Ä–Ω–∏–π –∫–æ–ª—ñ—Ä
            tblBorders.append(border)

    def process(self, csv_path: str, output_path: str) -> Dict[str, Any]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏

        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—É

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–æ–±–∫–∏
        """
        try:
            print("üöÄ === –û–ë–†–û–ë–ö–ê –ñ–ë–î ===\n")

            # –ß–∏—Ç–∞—î–º–æ CSV —Ñ–∞–π–ª
            self.csv_data = self.read_csv(csv_path)

            # –°—Ç–≤–æ—Ä—é—î–º–æ Word –¥–æ–∫—É–º–µ–Ω—Ç –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–Ω—ñ–≤
            self.create_word_document(output_path)

            print("\n‚úÖ === –û–ë–†–û–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")

            return {
                'success': True,
                'output_path': output_path,
                'rows_processed': 31,
                'message': f'–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ Word –¥–æ–∫—É–º–µ–Ω—Ç –∑ 31 —Ç–∞–±–ª–∏—Ü–µ—é (–ø–æ –æ–¥–Ω—ñ–π –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –º—ñ—Å—è—Ü—è)'
            }

        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}"
            print(f"\n‚ùå {error_msg}", file=sys.stderr)
            return {
                'success': False,
                'error': error_msg
            }


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø—Ä–∏–π–º–∞—î JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ stdin"""

    try:
        # –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ stdin
        config_json = sys.stdin.read()
        config = json.loads(config_json)

        csv_path = config.get('csv_path')
        output_path = config.get('output_path')
        config_excel_path = config.get('config_excel_path')  # –î–æ–¥–∞–Ω–æ: —à–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not csv_path:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É")

        if not output_path:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É
        if not Path(csv_path).exists():
            raise FileNotFoundError(f"CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {csv_path}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)

        # –û–±—Ä–æ–±–∫–∞
        processor = ZBDProcessor()
        
        # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel - —á–∏—Ç–∞—î–º–æ –π–æ–≥–æ
        if config_excel_path and Path(config_excel_path).exists():
            processor.read_config_excel(config_excel_path)
        
        result = processor.process(csv_path, output_path)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ
        print(f"\n__RESULT__{json.dumps(result, ensure_ascii=False)}__END__")

        sys.exit(0 if result['success'] else 1)

    except Exception as e:
        error_msg = str(e)
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {error_msg}", file=sys.stderr)

        result = {
            'success': False,
            'error': error_msg
        }
        print(f"\n__RESULT__{json.dumps(result, ensure_ascii=False)}__END__")
        sys.exit(1)


if __name__ == '__main__':
    main()
