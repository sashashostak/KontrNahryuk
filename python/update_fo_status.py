#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
update_fo_status.py - –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FO (–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É)

–ê–¥–∞–ø—Ç–∞—Ü—ñ—è VBA –ª–æ–≥—ñ–∫–∏ UpdateFO_Status_DOD10 –¥–ª—è Python.
–ó–∞–ø–∏—Å—É—î –∑–≤—ñ—Ç —É –∞—Ä–∫—É—à LOG –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –∞—Ä–∫—É—à–∞.

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
1. –ß–∏—Ç–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ —Ç—Ä—å–æ—Ö –∑–æ–Ω (J:BI, BJ:ES, EU:FN)
2. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ "1" —É –∫–æ–ª–æ–Ω–∫–∞—Ö
3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ FO
4. –ó–∞–ø–∏—Å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –≤ LOG
"""

import re
from typing import Dict, List, Optional
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter


# ============== –ö–û–ù–°–¢–ê–ù–¢–ò ==============

ROW_START = 10
ROW_END_MAX = 900

# –ó–æ–Ω–∏ (–Ω–æ–º–µ—Ä–∏ –∫–æ–ª–æ–Ω–æ–∫ Excel, 1-based)
Z1_LEFT = 10   # J
Z1_RIGHT = 61  # BI

Z2_LEFT = 62   # BJ
Z2_RIGHT = 149 # ES

Z3_LEFT = 151  # EU
Z3_RIGHT = 170 # FN

# –ü—Ä–µ—Ñ—ñ–∫—Å–∏ –¥–ª—è –∑–æ–Ω
ZONE1_PREFIX = "–ü–æ–∑–∏—Ü—ñ—è"
ZONE2_PREFIX = "–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫–∏–π —Ä-–Ω"


# ============== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ==============

def is_one(value) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Ä—ñ–≤–Ω—é—î 1"""
    if value is None:
        return False
    if isinstance(value, (int, float)):
        return value == 1.0
    return str(value).strip() == "1"


def nz_str(value) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è None, —ñ–Ω–∞–∫—à–µ string"""
    if value is None:
        return ""
    return str(value)


def trim_spaces(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –ø—Ä–æ–±—ñ–ª–∏"""
    s = s.replace('\xa0', ' ')
    s = s.replace('\u202F', ' ')
    s = re.sub(r'\s+', ' ', s)
    return s.strip()


def header_at(ws: Worksheet, col: int, row: int = 5) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –∑ —Ä—è–¥–∫–∞ 5 (—è–∫ —É VBA).
    """
    cell = ws.cell(row, col)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–¥–Ω–∞–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫
    if cell.coordinate in ws.merged_cells:
        for merged in ws.merged_cells.ranges:
            if cell.coordinate in merged:
                top_left = ws.cell(merged.min_row, merged.min_col)
                return trim_spaces(nz_str(top_left.value))
    
    return trim_spaces(nz_str(cell.value))


def build_zone3_map(ws: Worksheet) -> Dict[int, str]:
    """
    –ë—É–¥—É—î –º–∞–ø—ñ–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –ó–æ–Ω–∏ 3 -> –≥–æ—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è FO.
    –¢–æ—á–Ω–∞ –∫–æ–ø—ñ—è VBA BuildZone3ColValueMap.
    """
    from openpyxl.utils import column_index_from_string
    
    mapping = {}
    
    # –¢–æ—á–Ω—ñ –∞–¥—Ä–µ—Å–∏ –∑ VBA
    mapping[column_index_from_string('EV')] = "–õ—ñ–∫—É–≤–∞–Ω–Ω—è. –î–æ 10 –¥—ñ–±"          # EV4
    mapping[column_index_from_string('EW')] = "–õ—ñ–∫—É–≤–∞–Ω–Ω—è. –ü–æ–Ω–∞–¥ 10 –¥—ñ–±"      # EW4
    mapping[column_index_from_string('EU')] = "–í–õ–ö"                           # EU3
    mapping[column_index_from_string('EY')] = "–í—ñ–¥–ø—É—Å—Ç–∫–∞ —â–æ—Ä—ñ—á–Ω–∞"             # EY3
    mapping[column_index_from_string('EX')] = "–í—ñ–¥–ø—É—Å—Ç–∫–∞ –∑–∞ —Å—Ç–∞–Ω–æ–º –∑–¥–æ—Ä–æ–≤'—è"  # EX3
    mapping[column_index_from_string('EZ')] = "–ù–¶–ü–ü"                          # EZ4
    mapping[column_index_from_string('FN')] = "–ü–ü–î. –Ü–Ω—à–µ"                     # FN4
    mapping[column_index_from_string('FF')] = "–°–ó–ß"                           # FF3
    mapping[column_index_from_string('FE')] = "–ë–µ–∑–≤—ñ—Å—Ç—ñ –∑–Ω–∏–∫–ª—ñ/–∑–∞–≥–∏–±–ª—ñ"       # FE3
    mapping[column_index_from_string('FC')] = "–í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è. –Ü–Ω—à–µ"             # FC4
    mapping[column_index_from_string('FD')] = "–ê—Ä–µ—à—Ç"                         # FD3
    mapping[column_index_from_string('FI')] = "–ü–ü–î. –û—Ö–æ—Ä–æ–Ω–∞ —Å–∫–ª–∞–¥—ñ–≤, –º–∞–π–Ω–∞"   # FI4
    mapping[column_index_from_string('FA')] = "–í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è. –ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º"      # FA4
    mapping[column_index_from_string('FL')] = "–ü–ü–î. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ/—Å"           # FL4
    mapping[column_index_from_string('FJ')] = "–ü–ü–î. –ì–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ —Ä–æ–±–æ—Ç–∏"     # FJ4
    mapping[column_index_from_string('FB')] = "–í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è. –Ü–Ω—à—ñ –≤/—á"         # FB4
    mapping[column_index_from_string('FG')] = "–í—ñ–¥–º–æ–≤–Ω–∏–∫–∏"                    # FG3
    mapping[column_index_from_string('FH')] = "–ü–ü–î. –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è, –Ω–∞—Ä—è–¥"        # FH4
    mapping[column_index_from_string('FK')] = "–ü–ü–î. –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"               # FK4
    mapping[column_index_from_string('FM')] = "–ü–ü–î. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ —Ä–æ–±–æ—Ç–∞"   # FM4
    
    return mapping


# ============== –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê ==============

def update_fo_status(ws: Worksheet, log_ws: Optional[Worksheet] = None, log_start_row: int = 2) -> Dict:
    """
    –û–Ω–æ–≤–ª—é—î –∫–æ–ª–æ–Ω–∫—É FO –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω—å —É —Ç—Ä—å–æ—Ö –∑–æ–Ω–∞—Ö.
    –ó–∞–ø–∏—Å—É—î –∑–≤—ñ—Ç —É LOG worksheet.
    
    Returns:
        dict: {updates: int, errors: int, skipped: int, log_end_row: int}
    """
    
    # –ó–Ω–∞–π–¥–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–π–Ω—è—Ç–∏–π —Ä—è–¥–æ–∫
    col_e = 5
    row_end = ROW_START
    for r in range(ROW_END_MAX, ROW_START - 1, -1):
        if ws.cell(r, col_e).value:
            row_end = r
            break
    
    if row_end < ROW_START:
        print(f"‚ö†Ô∏è –£ –∫–æ–ª–æ–Ω—Ü—ñ E –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ —Ä—è–¥–∫–∞ {ROW_START}")
        return {"updates": 0, "errors": 0, "skipped": 0, "log_end_row": log_start_row}
    
    print(f"üìä –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫—ñ–≤ {ROW_START}..{row_end} –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FO")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–ª–æ–Ω–∫—É FO (—Ü–µ –∫–æ–ª–æ–Ω–∫–∞ –∑ –ª—ñ—Ç–µ—Ä–∞–º–∏ "FO" –≤ Excel, –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    from openpyxl.utils import column_index_from_string
    try:
        fo_col = column_index_from_string('FO')  # FO = 171
    except:
        fo_col = None
    
    if not fo_col:
        print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ FO –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—è–¥–∫—É –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤")
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ LOG
        if log_ws:
            log_ws.cell(log_start_row, 1, 'üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ FO')
            log_ws.cell(log_start_row, 1).font = Font(bold=True, size=12, color='FFFFFF')
            log_ws.cell(log_start_row, 1).fill = PatternFill(start_color='4472C4', end_color='4472C4', fill_type='solid')
            log_ws.merge_cells(f'A{log_start_row}:B{log_start_row}')
            log_start_row += 1
            
            log_ws.cell(log_start_row, 1, '‚ùå –ö–æ–ª–æ–Ω–∫–∞ FO –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.')
            log_ws.cell(log_start_row, 1).font = Font(bold=True, color='C00000')
            log_ws.merge_cells(f'A{log_start_row}:B{log_start_row}')
            log_start_row += 1
            
            log_ws.cell(log_start_row, 1, '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤ —Ü—ñ–ª—å–æ–≤–æ–º—É —Ñ–∞–π–ª—ñ —î –∫–æ–ª–æ–Ω–∫–∞ –∑ –Ω–∞–∑–≤–æ—é "FO" –∞–±–æ "–§–û".')
            log_ws.cell(log_start_row, 1).font = Font(italic=True, color='7F7F7F')
            log_ws.merge_cells(f'A{log_start_row}:B{log_start_row}')
            log_start_row += 1
        
        return {"updates": 0, "errors": 0, "skipped": 0, "log_end_row": log_start_row}
    
    print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ FO: {get_column_letter(fo_col)} (#{fo_col})")
    
    # –ú–∞–ø—ñ–Ω–≥ –ó–æ–Ω–∏ 3
    z3_map = build_zone3_map(ws)
    print(f"üìã –ú–∞–ø—ñ–Ω–≥ –ó–æ–Ω–∏ 3: {len(z3_map)} –∫–æ–ª–æ–Ω–æ–∫")
    
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Ç–∞ –∑–º—ñ–Ω–∏
    stats = {"updates": 0, "errors": 0, "skipped": 0}
    changes_log = []
    
    # –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫—ñ–≤
    for row in range(ROW_START, row_end + 1):
        dept = nz_str(ws.cell(row, 2).value)
        pib = nz_str(ws.cell(row, 5).value)
        old_fo = nz_str(ws.cell(row, fo_col).value)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ (–Ω–µ–º–∞—î –ü–Ü–ë)
        if not pib or not pib.strip():
            continue
        
        # –ó–±—ñ—Ä "1" –∑ —É—Å—ñ—Ö –∑–æ–Ω
        zones = []
        cols = []
        
        for col in range(Z1_LEFT, Z1_RIGHT + 1):
            if is_one(ws.cell(row, col).value):
                zones.append(1)
                cols.append(col)
        
        for col in range(Z2_LEFT, Z2_RIGHT + 1):
            if is_one(ws.cell(row, col).value):
                zones.append(2)
                cols.append(col)
        
        for col in range(Z3_LEFT, Z3_RIGHT + 1):
            if is_one(ws.cell(row, col).value):
                zones.append(3)
                cols.append(col)
        
        found_count = len(zones)
        new_fo = ""
        typ = ""
        src_joined = "‚Äî"
        
        if found_count == 1:
            one_col = cols[0]
            one_header = header_at(ws, one_col)
            
            if zones[0] == 1:
                new_fo = f"{ZONE1_PREFIX}, {one_header}"
                typ = "–û–Ω–æ–≤–ª–µ–Ω–æ"
                src_joined = one_header
            elif zones[0] == 2:
                new_fo = f"{ZONE2_PREFIX}, {one_header}"
                typ = "–û–Ω–æ–≤–ª–µ–Ω–æ"
                src_joined = one_header
            elif zones[0] == 3:
                if one_col in z3_map:
                    new_fo = z3_map[one_col]
                    typ = "–û–Ω–æ–≤–ª–µ–Ω–æ"
                    src_joined = one_header
                else:
                    typ = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –ó–æ–Ω–∞3"
                    src_joined = one_header
                    new_fo = ""  # –ù–µ –ø–∏—à–µ–º–æ –Ω—ñ—á–æ–≥–æ, —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤–∏–ª–∞
        
        elif found_count == 0:
            typ = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î '1'"
        
        else:
            typ = "–ü–æ–º–∏–ª–∫–∞: –∫—ñ–ª—å–∫–∞ '1'"
            src_joined = "; ".join(header_at(ws, c) for c in cols)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è FO
        ws.cell(row, fo_col).value = new_fo if new_fo else None
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        if typ:
            if (typ == "–û–Ω–æ–≤–ª–µ–Ω–æ" and new_fo != old_fo) or (typ != "–û–Ω–æ–≤–ª–µ–Ω–æ"):
                changes_log.append({
                    'row': row,
                    'dept': dept,
                    'pib': pib,
                    'old_fo': old_fo,
                    'new_fo': new_fo,
                    'typ': typ,
                    'src': src_joined
                })
                
                if typ == "–û–Ω–æ–≤–ª–µ–Ω–æ":
                    stats["updates"] += 1
                else:
                    stats["errors"] += 1
        else:
            stats["skipped"] += 1
    
    # –ó–∞–ø–∏—Å —É LOG (–∑–∞–≤–∂–¥–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ–º–∞—î –∑–º—ñ–Ω)
    log_row = log_start_row
    if log_ws:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        log_ws.cell(log_row, 1, 'üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ FO')
        log_ws.cell(log_row, 1).font = Font(bold=True, size=12, color='FFFFFF')
        log_ws.cell(log_row, 1).fill = PatternFill(start_color='4472C4', end_color='4472C4', fill_type='solid')
        log_ws.cell(log_row, 1).alignment = Alignment(horizontal='left', vertical='center')
        log_ws.row_dimensions[log_row].height = 25
        log_ws.merge_cells(f'A{log_row}:B{log_row}')
        log_row += 1
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        summary = f'–û–Ω–æ–≤–ª–µ–Ω–æ: {stats["updates"]}, –ü–æ–º–∏–ª–æ–∫: {stats["errors"]}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats["skipped"]}'
        log_ws.cell(log_row, 1, summary)
        log_ws.cell(log_row, 1).font = Font(bold=True, color='228B22' if stats["errors"] == 0 else '7F7F7F')
        log_ws.merge_cells(f'A{log_row}:B{log_row}')
        log_row += 1
        
        log_row += 1  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
        
        # –¢–∞–±–ª–∏—Ü—è –∑–º—ñ–Ω (—è–∫—â–æ —î)
        if changes_log:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
            log_ws.cell(log_row, 1, '–†—è–¥–æ–∫ | –ü—ñ–¥. | –ü–Ü–ë')
            log_ws.cell(log_row, 2, '–ë—É–ª–æ ‚Üí –°—Ç–∞–ª–æ | –¢–∏–ø | –î–∂–µ—Ä–µ–ª–æ')
            for col in [1, 2]:
                log_ws.cell(log_row, col).font = Font(bold=True, size=10)
                log_ws.cell(log_row, col).fill = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
            log_row += 1
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –∑–º—ñ–Ω–∏ (–º–∞–∫—Å–∏–º—É–º 50)
            for change in changes_log[:50]:
                col_a = f"{change['row']} | {change['dept']} | {change['pib']}"
                col_b = f"{change['old_fo']} ‚Üí {change['new_fo']} | {change['typ']} | {change['src']}"
                
                log_ws.cell(log_row, 1, col_a)
                log_ws.cell(log_row, 2, col_b)
                
                if change['typ'] == '–û–Ω–æ–≤–ª–µ–Ω–æ':
                    fill = PatternFill(start_color='E2EFDA', end_color='E2EFDA', fill_type='solid')
                    font = Font(color='228B22')
                else:
                    fill = PatternFill(start_color='FCE4D6', end_color='FCE4D6', fill_type='solid')
                    font = Font(color='C00000')
                
                for col in [1, 2]:
                    log_ws.cell(log_row, col).fill = fill
                    log_ws.cell(log_row, col).font = font
                    log_ws.cell(log_row, col).alignment = Alignment(horizontal='left', vertical='top', wrap_text=True)
                
                log_row += 1
            
            if len(changes_log) > 50:
                log_ws.cell(log_row, 1, f'... —Ç–∞ —â–µ {len(changes_log) - 50} –∑–º—ñ–Ω')
                log_ws.cell(log_row, 1).font = Font(italic=True, color='7F7F7F')
                log_ws.merge_cells(f'A{log_row}:B{log_row}')
                log_row += 1
        else:
            # –Ø–∫—â–æ –∑–º—ñ–Ω –Ω–µ–º–∞—î
            log_ws.cell(log_row, 1, '–ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ. –í—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è FO –∞–∫—Ç—É–∞–ª—å–Ω—ñ.')
            log_ws.cell(log_row, 1).font = Font(italic=True, color='7F7F7F')
            log_ws.merge_cells(f'A{log_row}:B{log_row}')
            log_row += 1
    
    stats['log_end_row'] = log_row
    
    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è FO –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
    print(f"   –û–Ω–æ–≤–ª–µ–Ω–æ: {stats['updates']}")
    print(f"   –ü–æ–º–∏–ª–æ–∫: {stats['errors']}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
    
    return stats
