"""
Excel Mismatches Checker - –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤ –ó–° —Ç–∞ –ë–ó
–ê–¥–∞–ø—Ç–∞—Ü—ñ—è VBA –ª–æ–≥—ñ–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:
- –ó–°: –∫–æ–ª–æ–Ω–∫–∞ D (–∫–ª—é—á –ü–Ü–ë), —Ñ—ñ–ª—å—Ç—Ä F="–ë–ó", —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ —É D (–ü–Ü–ë)
  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ó–°: B=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, C=–∑–≤–∞–Ω–Ω—è, D=–ü–Ü–ë, E=–ø—Å–µ–≤–¥–æ, F=—Å—Ç–∞—Ç—É—Å, G=–¥–æ–¥.
- –ë–ó: –∫–æ–ª–æ–Ω–∫–∞ E (–∫–ª—é—á –ü–Ü–ë), –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞ F, —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ —É E (–ü–Ü–ë), —ñ–≥–Ω–æ—Ä H –º—ñ—Å—Ç–∏—Ç—å "–ø—Ä–∏–¥–∞–Ω—ñ", –ª—ñ–º—ñ—Ç 898
  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–ó: C=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, D=–∑–≤–∞–Ω–Ω—è, E=–ü–Ü–ë, F=–ø—Å–µ–≤–¥–æ, G=—Å—Ç–∞—Ç—É—Å, H=—Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
"""

from typing import Dict, List, Tuple, Optional, Set
from openpyxl import Workbook, load_workbook
from openpyxl.worksheet.worksheet import Worksheet
import re

# ========= –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =========
S1_NAME = "–ó–°"   # –ª–∏—Å—Ç 1 —É —Ü—ñ–ª—å–æ–≤—ñ–π –∫–Ω–∏–∑—ñ
S2_NAME = "–ë–ó"   # –ª–∏—Å—Ç 2 —É —Ü—ñ–ª—å–æ–≤—ñ–π –∫–Ω–∏–∑—ñ

# –ó–°: B=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, C=–∑–≤–∞–Ω–Ω—è, D=–ü–Ü–ë, E=–ø—Å–µ–≤–¥–æ, F=—Å—Ç–∞—Ç—É—Å, G=–¥–æ–¥.
S1_COL_KEY = 4   # D - –ü–Ü–ë (1-indexed)
S1_COL_F = 6     # F - —Å—Ç–∞—Ç—É—Å (—Ñ—ñ–ª—å—Ç—Ä "–ë–ó")
S1_COL_G = 7     # G - –¥–æ–¥.

# –ë–ó: C=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, D=–∑–≤–∞–Ω–Ω—è, E=–ü–Ü–ë, F=–ø—Å–µ–≤–¥–æ, G=—Å—Ç–∞—Ç—É—Å, H=—Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
S2_COL_KEY = 5   # E - –ü–Ü–ë
S2_COL_H = 8     # H - —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è (–¥–ª—è —ñ–≥–Ω–æ—Ä—É "–ø—Ä–∏–¥–∞–Ω—ñ")

F_REQUIRED = "–ë–ó"          # —â–æ –º–∞—î –±—É—Ç–∏ —É –∫–æ–ª–æ–Ω—Ü—ñ F –Ω–∞ –ó–°
MAX_ROW_LIMIT = 898        # –õ–Ü–ú–Ü–¢ –†–Ø–î–ö–Ü–í ‚Äî –õ–ò–®–ï –î–õ–Ø –õ–ò–°–¢–ê "–ë–ó"
H_IGNORE_TOKEN = "–ø—Ä–∏–¥–∞–Ω—ñ" # –Ü–ì–ù–û–† —É H ‚Äî –õ–ò–®–ï –î–õ–Ø –õ–ò–°–¢–ê "–ë–ó"
PREVIEW_MAX = 25

# –ö–æ–≥–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ (–∑–∞ –∫–ª—é—á–µ–º-—Ä—è–¥–∫–æ–º —É –∫–æ–ª–æ–Ω—Ü—ñ –∫–ª—é—á—ñ–≤)
IGNORE_TOKENS = [
    "1–†–°–ø–ü", "2–†–°–ø–ü", "3–†–°–ø–ü", "–†–í–ü–°–ø–ü", "–†–ú–¢–ó", "–ú–µ–¥–∏—á–Ω–∏–π –ø—É–Ω–∫—Ç",
    "–í–∑–≤–æ–¥ –∑–≤'—è–∑–∫—É", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤", "–í–†–ï–ë", "–í–†–°–ü",
    "–ú<", "–†–ë–ü–°",
    "–ú—ñ–Ω–æ–º–µ—Ç–Ω–∞ –±–∞—Ç–∞—Ä–µ—è", "–†–æ—Ç–∞ –±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏—Ö —Å–∏—Å—Ç–µ–º", "–í–∑–≤–æ–¥ –†–ï–ë",
    "–ù–µ—Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ", "–ü—Ä–∏–¥–∞–Ω—ñ",
    "1—Ä –°–ø–ü"  # –í–∞—Ä—ñ–∞–Ω—Ç –∑ –ø—Ä–æ–±—ñ–ª–æ–º —Ç–∞ –º–∞–ª–æ—é –ª—ñ—Ç–µ—Ä–æ—é
]


class MismatchEntry:
    """–ó–∞–ø–∏—Å –ø—Ä–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å"""
    def __init__(self, sheet: str, cell_addr: str, value: str, reason: str):
        self.sheet = sheet
        self.cell_addr = cell_addr
        self.value = value
        self.reason = reason
    
    def __str__(self) -> str:
        return f"{self.sheet}!{self.cell_addr} = ¬´{self.value}¬ª ‚Äî {self.reason}"


class ExcelMismatchChecker:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –º—ñ–∂ –ª–∏—Å—Ç–∞–º–∏ –ó–° —Ç–∞ –ë–ó"""
    
    def __init__(self, workbook_path: str):
        self.workbook_path = workbook_path
        self.wb = None
        self.ws1 = None  # –ó–°
        self.ws2 = None  # –ë–ó
    
    def check(self) -> Tuple[List[MismatchEntry], str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        
        Returns:
            (—Å–ø–∏—Å–æ–∫_–Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–ø—Ä–æ_–ø–æ–º–∏–ª–∫—É)
        """
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–Ω–∏–≥—É
            self.wb = load_workbook(self.workbook_path, data_only=True)
            
            # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç–∏
            self.ws1 = self._find_sheet(S1_NAME)
            self.ws2 = self._find_sheet(S2_NAME)
            
            if self.ws1 is None:
                return [], f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à '{S1_NAME}'"
            if self.ws2 is None:
                return [], f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à '{S2_NAME}'"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–∂—ñ –¥–∞–Ω–∏—Ö
            r1_first, r1_last = 4, self._max_last_row(self.ws1, [S1_COL_KEY, S1_COL_F, S1_COL_G])
            r2_first, r2_last = 4, self._max_last_row(self.ws2, [S2_COL_KEY, S2_COL_H])
            
            # –ë–ó: –∑—Ä—ñ–∑–∞—î–º–æ –¥–æ MAX_ROW_LIMIT
            if r2_last > MAX_ROW_LIMIT:
                r2_last = MAX_ROW_LIMIT
            
            if r1_last < r1_first or r2_last < r2_first:
                return [], "–î–∞–Ω—ñ –Ω–∞ –∞—Ä–∫—É—à–∞—Ö –≤–∏–≥–ª—è–¥–∞—é—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ–º–∏"
            
            print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω–∏:")
            print(f"   {S1_NAME}: —Ä—è–¥–∫–∏ {r1_first}-{r1_last}")
            print(f"   {S2_NAME}: —Ä—è–¥–∫–∏ {r2_first}-{r2_last} (–ª—ñ–º—ñ—Ç: {MAX_ROW_LIMIT})")
            
            # –ë—É–¥—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
            # –ó–°: —Ñ—ñ–ª—å—Ç—Ä –ø–æ F="–ë–ó", —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ —É D (–ü–Ü–ë)
            idx1 = self._build_index(
                self.ws1, r1_first, r1_last,
                key_col=S1_COL_KEY,
                subunit_col=S1_COL_KEY,  # D - –ü–Ü–ë, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –ü–Ü–ë
                f_col=S1_COL_F, f_required=F_REQUIRED,
                g_col=None, g_ignore=None
            )
            
            # –ë–ó: –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞ F, —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ —É E (–ü–Ü–ë), —ñ–≥–Ω–æ—Ä H –º—ñ—Å—Ç–∏—Ç—å "–ø—Ä–∏–¥–∞–Ω—ñ"
            idx2 = self._build_index(
                self.ws2, r2_first, r2_last,
                key_col=S2_COL_KEY,
                subunit_col=S2_COL_KEY,  # E - –ü–Ü–ë, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ñ–≥–Ω–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –ü–Ü–ë
                f_col=None, f_required=None,
                g_col=S2_COL_H, g_ignore=H_IGNORE_TOKEN
            )
            
            print(f"üìä –Ü–Ω–¥–µ–∫—Å–∏ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ:")
            print(f"   {S1_NAME}: {len(idx1)} –∫–ª—é—á—ñ–≤")
            print(f"   {S2_NAME}: {len(idx2)} –∫–ª—é—á—ñ–≤")
            
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ
            mismatches = []
            
            # –ó–° -> –ë–ó (—î –≤ –ó–° –∑ –º—ñ—Ç–∫–æ—é F='–ë–ó', –∞–ª–µ –Ω–µ–º–∞—î –≤ –ë–ó)
            for key in idx1.keys():
                if key not in idx2:
                    for entry in idx1[key]:
                        entry.reason = '–≤ –ó–° –º—ñ—Ç–∫–∞ F="–ë–ó", –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—î –≤ –ª–∏—Å—Ç—ñ –ë–ó'
                        mismatches.append(entry)
            
            # –ë–ó -> –ó–° (—î –≤ –ë–ó, –∞–ª–µ –Ω–µ–º–∞—î –≤ –ó–° –∑ –º—ñ—Ç–∫–æ—é F='–ë–ó')
            for key in idx2.keys():
                if key not in idx1:
                    for entry in idx2[key]:
                        entry.reason = '—î –≤ –ë–ó, –∞–ª–µ –≤ –ó–° –≤—ñ–¥—Å—É—Ç–Ω—è –º—ñ—Ç–∫–∞ F="–ë–ó"'
                        mismatches.append(entry)
            
            return mismatches, ""
            
        except Exception as e:
            return [], f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    
    def _find_sheet(self, name: str) -> Optional[Worksheet]:
        """–ó–Ω–∞–π—Ç–∏ –ª–∏—Å—Ç –∑–∞ –Ω–∞–∑–≤–æ—é (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±—ñ–ª—ñ–≤)"""
        name_norm = name.strip().lower()
        for ws in self.wb.worksheets:
            if ws.title.strip().lower() == name_norm:
                return ws
        return None
    
    def _max_last_row(self, ws: Worksheet, cols: List[int]) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ —Å–µ—Ä–µ–¥ –∫—ñ–ª—å–∫–æ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        max_row = 0
        for col in cols:
            # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–∞–ø–æ–≤–Ω–µ–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
            for row in range(ws.max_row, 0, -1):
                cell = ws.cell(row, col)
                if cell.value is not None and str(cell.value).strip() != "":
                    if row > max_row:
                        max_row = row
                    break
        return max_row if max_row > 0 else 4
    
    def _build_index(
        self,
        ws: Worksheet,
        first_row: int,
        last_row: int,
        key_col: int,
        subunit_col: Optional[int] = None,
        f_col: Optional[int] = None,
        f_required: Optional[str] = None,
        g_col: Optional[int] = None,
        g_ignore: Optional[str] = None
    ) -> Dict[str, List[MismatchEntry]]:
        """
        –ë—É–¥—É—î —Å–ª–æ–≤–Ω–∏–∫ key -> List[MismatchEntry]
        
        Args:
            ws: Worksheet
            first_row, last_row: –î—ñ–∞–ø–∞–∑–æ–Ω —Ä—è–¥–∫—ñ–≤
            key_col: –ö–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–∞ (–ü–Ü–ë)
            subunit_col: –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ IGNORE_TOKENS (–º–æ–∂–µ –±—É—Ç–∏ –ü–Ü–ë –∞–±–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª)
            f_col, f_required: –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–ª–æ–Ω—Ü—ñ F (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ)
            g_col, g_ignore: –Ü–≥–Ω–æ—Ä –ø–æ –∫–æ–ª–æ–Ω—Ü—ñ (H –¥–ª—è –ë–ó) —è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–µ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        """
        index = {}
        f_required_norm = self._normalize(f_required) if f_required else None
        g_ignore_norm = self._normalize(g_ignore) if g_ignore else None
        
        for row in range(first_row, last_row + 1):
            key_cell = ws.cell(row, key_col)
            key = self._normalize(key_cell.value)
            
            if not key:
                continue
            
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑—ñ —Å–ø–∏—Å–∫—É IGNORE_TOKENS
            # –î–ª—è –ó–°: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ D (–ü–Ü–ë)
            # –î–ª—è –ë–ó: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ E (–ü–Ü–ë)
            if subunit_col is not None:
                check_value = self._normalize(ws.cell(row, subunit_col).value)
                if self._has_ignored_token(check_value):
                    continue
            
            # F-—Ñ—ñ–ª—å—Ç—Ä (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ)
            passes_f = True
            if f_col is not None and f_required_norm:
                f_val = self._normalize(ws.cell(row, f_col).value)
                passes_f = (f_val == f_required_norm)
            
            # G-—ñ–≥–Ω–æ—Ä (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ)
            passes_g = True
            if g_col is not None and g_ignore_norm:
                g_val = self._normalize(ws.cell(row, g_col).value)
                # –í–∏–∫–ª—é—á–∞—î–º–æ —Ä—è–¥–æ–∫, —è–∫—â–æ G –º—ñ—Å—Ç–∏—Ç—å —Ü–µ–π –ø—ñ–¥—Ä—è–¥–æ–∫
                passes_g = (g_ignore_norm not in g_val)
            
            if passes_f and passes_g:
                cell_addr = key_cell.coordinate
                value = str(key_cell.value) if key_cell.value else ""
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
                if key not in index:
                    index[key] = []
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å (reason –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ)
                entry = MismatchEntry(ws.title, cell_addr, value, "")
                index[key].append(entry)
        
        return index
    
    def _normalize(self, value) -> str:
        """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è (—è–∫ —É VBA Norm)"""
        if value is None or value == "":
            return ""
        
        s = str(value)
        
        # NBSP -> space
        s = s.replace('\u00A0', ' ')
        s = s.strip()
        
        # –ú–Ω–æ–∂–∏–Ω–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ -> –æ–¥–∏–Ω
        while '  ' in s:
            s = s.replace('  ', ' ')
        
        return s.upper()
    
    def _has_ignored_token(self, normalized_text: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–µ–∫—Å—Ç –¢–û–ß–ù–û —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¢–û–ß–ù–£ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å, –∞ –Ω–µ –ø—ñ–¥—Ä—è–¥–æ–∫
        """
        text_normalized = normalized_text.replace(' ', '').upper()
        
        for token in IGNORE_TOKENS:
            token_normalized = token.upper().replace(' ', '')
            # –¢–û–ß–ù–ê –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
            if text_normalized == token_normalized:
                return True
        
        return False


def check_mismatches(workbook_path: str) -> Tuple[List[MismatchEntry], str, Dict]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–∂ –ª–∏—Å—Ç–∞–º–∏ –ó–° —Ç–∞ –ë–ó
    
    Args:
        workbook_path: –®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É
    
    Returns:
        (—Å–ø–∏—Å–æ–∫_–Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–ø—Ä–æ_–ø–æ–º–∏–ª–∫—É, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    print(f"\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–ï–ô ===")
    print(f"   –§–∞–π–ª: {workbook_path}")
    
    checker = ExcelMismatchChecker(workbook_path)
    mismatches, error = checker.check()
    
    if error:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
        return [], error, {}
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø—Ä–∏—á–∏–Ω–∏ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ check())
    s1_mismatches = [m for m in mismatches if m.sheet == S1_NAME]
    s2_mismatches = [m for m in mismatches if m.sheet == S2_NAME]
    
    stats = {
        'total': len(mismatches),
        's1_missing_in_s2': len(s1_mismatches),
        's2_missing_in_s1': len(s2_mismatches)
    }
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print(f"   –í—Å—å–æ–≥–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π: {stats['total']}")
    print(f"   {S1_NAME} -> –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ {S2_NAME}: {stats['s1_missing_in_s2']}")
    print(f"   {S2_NAME} -> –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ {S1_NAME}: {stats['s2_missing_in_s1']}")
    
    if mismatches:
        print(f"\nüìã –ü—Ä–µ–≤ º—é (–ø–µ—Ä—à—ñ {min(PREVIEW_MAX, len(mismatches))}):")
        for i, m in enumerate(mismatches[:PREVIEW_MAX]):
            print(f"   {i+1}. {m}")
        
        if len(mismatches) > PREVIEW_MAX:
            print(f"   ... (—â–µ {len(mismatches) - PREVIEW_MAX} –∑–∞–ø–∏—Å—ñ–≤)")
    
    return mismatches, "", stats
