"""
Excel Processor –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏ –°—Ç—Ä–æ–π–æ–≤–∫–∞
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î openpyxl –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
"""

import sys
import json
import io
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, Alignment, PatternFill
from excel_sanitizer import sanitize_cells
from excel_mismatches import check_mismatches
from excel_slice_check import check_slices
from excel_duplicates import check_duplicates
from text_utils import normalize_text, normalize_list

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTF-8 –¥–ª—è stdout/stderr –Ω–∞ Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')


class ProcessingLog:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–æ—Ä—É –ª–æ–≥—ñ–≤ –æ–±—Ä–æ–±–∫–∏"""
    
    def __init__(self):
        self.entries = []
        self.start_time = datetime.now()
        
    def add_entry(self, operation: str, source_file: str, sheet: str, rows: int, details: str = ""):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –¥–æ –ª–æ–≥—É"""
        self.entries.append({
            'operation': operation,
            'source_file': source_file,
            'sheet': sheet,
            'rows': rows,
            'details': details,
            'is_separator': False
        })
    
    def add_separator(self, title: str):
        """–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –µ—Ç–∞–ø—ñ–≤"""
        self.entries.append({
            'operation': f'‚ïê‚ïê‚ïê {title} ‚ïê‚ïê‚ïê',
            'source_file': '',
            'sheet': '',
            'rows': '',
            'details': '',
            'is_separator': True
        })
    
    def get_summary(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –æ–±—Ä–æ–±–∫–∏"""
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ç–∞ –ø—ñ–¥—Å—É–º–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        total_rows = sum(
            entry['rows'] for entry in self.entries 
            if not entry.get('is_separator', False) and isinstance(entry['rows'], (int, float))
        )
        files_processed = len(set(entry['source_file'] for entry in self.entries if entry['source_file']))
        
        # –†–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (–±–µ–∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤)
        operations = sum(1 for entry in self.entries if not entry.get('is_separator', False))
        
        return {
            'total_rows': total_rows,
            'files_processed': files_processed,
            'operations': operations,
            'duration': (datetime.now() - self.start_time).total_seconds()
        }


class ExcelProcessor:
    """–ü—Ä–æ—Ü–µ—Å–æ—Ä –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –º—ñ–∂ Excel —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self):
        self.destination_wb = None
        self.destination_path = None
        self.log = ProcessingLog()
        
    def load_destination(self, file_path: str) -> None:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"""
        print(f"üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {file_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        try:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è)
            with open(file_path, 'r+b') as f:
                pass
        except PermissionError:
            error_msg = (
                f"‚ùå –§–∞–π–ª '{file_path}' –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ!\n\n"
                f"üîß –ó–∞–∫—Ä–∏–π—Ç–µ Excel —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            print(error_msg, file=sys.stderr)
            raise PermissionError(error_msg)
        
        self.destination_path = file_path
        self.destination_wb = load_workbook(file_path)
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –ª–∏—Å—Ç—ñ–≤: {len(self.destination_wb.sheetnames)}")
        
    def build_index(self, sheet_name: str, key_column: str, blacklist: List[str]) -> Dict[str, List[int]]:
        """
        –ü–æ–±—É–¥—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ —É —Ñ–∞–π–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è

        Returns:
            Dict –∑ –∫–ª—é—á–∞–º–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ —Ç–∞ —Å–ø–∏—Å–∫–∞–º–∏ —Ä—è–¥–∫—ñ–≤ –¥–µ –≤–æ–Ω–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è
        """
        print(f"\nüîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ '{sheet_name}'...")

        if sheet_name not in self.destination_wb.sheetnames:
            print(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {}

        sheet = self.destination_wb[sheet_name]
        index = {}

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ª—ñ—Ç–µ—Ä—É –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–æ–º–µ—Ä (B=2, C=3)
        col_num = ord(key_column.upper()) - ord('A') + 1

        print(f"   –ö–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–∞: {key_column} (–Ω–æ–º–µ—Ä {col_num})")

        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ blacklist –æ–¥–∏–Ω —Ä–∞–∑
        normalized_blacklist = normalize_list(blacklist, remove_spaces=True)

        found_count = 0
        for row_num in range(2, sheet.max_row + 1):  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            cell = sheet.cell(row=row_num, column=col_num)
            value = cell.value

            if value:
                # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
                key = normalize_text(value, remove_spaces=True)

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ blacklist (–≤–∂–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π)
                if key in normalized_blacklist:
                    continue

                if key not in index:
                    index[key] = []
                    found_count += 1

                index[key].append(row_num)

        print(f"   üìä –ó–Ω–∞–π–¥–µ–Ω–æ {found_count} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤")
        return index
        
    def find_contiguous_block(self, sheet: Worksheet, key_column: str,
                             key: str, start_row: int = 2) -> Optional[Tuple[int, int]]:
        """
        –ó–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—ñ–≥—É–∞–ª—å–Ω–∏–π –±–ª–æ–∫ —Ä—è–¥–∫—ñ–≤ –∑ –∑–∞–¥–∞–Ω–∏–º –∫–ª—é—á–µ–º

        Returns:
            Tuple (start_row, end_row) –∞–±–æ None
        """
        col_num = ord(key_column.upper()) - ord('A') + 1

        # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
        first_row = None
        for row_num in range(start_row, sheet.max_row + 1):
            cell_value = sheet.cell(row=row_num, column=col_num).value
            if cell_value:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
                normalized = normalize_text(cell_value, remove_spaces=True)
                if normalized == key:
                    first_row = row_num
                    break

        if first_row is None:
            return None

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –±–ª–æ–∫—É
        last_row = first_row
        for row_num in range(first_row + 1, sheet.max_row + 1):
            cell_value = sheet.cell(row=row_num, column=col_num).value
            if cell_value:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
                normalized = normalize_text(cell_value, remove_spaces=True)
                if normalized == key:
                    last_row = row_num
                else:
                    break
            else:
                # –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º—ñ—Ä–∫–∞ - –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É
                break

        return (first_row, last_row)
        
    def copy_data(self, source_file: str, dest_sheet_name: str, 
                  key_column: str, data_columns: List[str], index: Dict[str, List[int]]) -> int:
        """
        –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
        """
        print(f"\nüìÑ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {Path(source_file).name}")
        
        source_wb = load_workbook(source_file, data_only=True)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ª–∏—Å—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ (–æ—Å–æ–±–ª–∏–≤–æ –¥–ª—è 1241)
        file_name = Path(source_file).name
        if '1241' in file_name:
            print(f"   üìã –õ–∏—Å—Ç–∏ —É —Ñ–∞–π–ª—ñ 1241: {source_wb.sheetnames}")
        
        # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–∂–ª–∏–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ –≤ –Ω–∞–∑–≤—ñ
        actual_sheet_name = None
        for sheet_name in source_wb.sheetnames:
            if sheet_name.strip() == dest_sheet_name.strip():
                actual_sheet_name = sheet_name
                break
        
        if actual_sheet_name is None:
            print(f"   ‚ö†Ô∏è –õ–∏—Å—Ç '{dest_sheet_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—Ö—ñ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ")
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—Å—Ç–∏: {source_wb.sheetnames}")
            return 0
        
        # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –ª–∏—Å—Ç–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è (–ø—Ä–æ–±—ñ–ª–∏), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ
        if actual_sheet_name != dest_sheet_name:
            print(f"   üîß –ó–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç '{actual_sheet_name}' (–∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏) –∑–∞–º—ñ—Å—Ç—å '{dest_sheet_name}'")
        
        source_sheet = source_wb[actual_sheet_name]
        dest_sheet = self.destination_wb[dest_sheet_name]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ª—ñ—Ç–µ—Ä–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –Ω–æ–º–µ—Ä–∏
        key_col_num = ord(key_column.upper()) - ord('A') + 1
        data_col_nums = [ord(col.upper()) - ord('A') + 1 for col in data_columns]
        
        copied_rows = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∫–ª—é—á–∞—Ö –∑ —ñ–Ω–¥–µ–∫—Å—É
        for key in index.keys():
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫ —É –¥–∂–µ—Ä–µ–ª—ñ
            source_block = self.find_contiguous_block(source_sheet, key_column, key)
            
            if not source_block:
                continue
            
            src_start, src_end = source_block
            src_count = src_end - src_start + 1
            
            print(f"\n   --- –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: '{key}' ---")
            print(f"   ‚úÖ –î–∂–µ—Ä–µ–ª–æ: —Ä—è–¥–∫–∏ {src_start}-{src_end} ({src_count} —Ä—è–¥–∫—ñ–≤)")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫–∏ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ
            dest_rows = index[key]
            if not dest_rows:
                print(f"   ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ")
                continue
            
            # –ì—Ä—É–ø—É—î–º–æ —É –∫–æ–Ω—Ç—ñ–≥—É–∞–ª—å–Ω—ñ –±–ª–æ–∫–∏
            dest_blocks = self._group_contiguous(dest_rows)
            print(f"   ‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {len(dest_blocks)} –±–ª–æ–∫(—ñ–≤)")
            
            # –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ
            src_row_ptr = src_start
            
            for block_idx, dest_block in enumerate(dest_blocks):
                dest_start = dest_block[0]
                dest_end = dest_block[-1]
                dest_count = len(dest_block)
                
                # –°–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –º–æ–∂–µ–º–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏
                rows_left = src_end - src_row_ptr + 1
                if rows_left <= 0:
                    break
                    
                rows_to_copy = min(rows_left, dest_count)
                
                print(f"      –ë–ª–æ–∫ {block_idx + 1}: –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {rows_to_copy} —Ä—è–¥–∫—ñ–≤")
                
                # –ö–æ–ø—ñ—é—î–º–æ –ø–æ —Ä—è–¥–∫–∞–º
                for i in range(rows_to_copy):
                    src_row = src_row_ptr + i
                    dest_row = dest_start + i
                    
                    # –ö–æ–ø—ñ—é—î–º–æ –∫–æ–∂–Ω—É –∫–æ–ª–æ–Ω–∫—É
                    for col_num in data_col_nums:
                        value = source_sheet.cell(row=src_row, column=col_num).value
                        dest_sheet.cell(row=dest_row, column=col_num).value = value
                    
                    copied_rows += 1
                
                # –û—á–∏—â–∞—î–º–æ —Ö–≤—ñ—Å—Ç —è–∫—â–æ —î
                if rows_to_copy < dest_count:
                    for i in range(rows_to_copy, dest_count):
                        dest_row = dest_start + i
                        for col_num in data_col_nums:
                            dest_sheet.cell(row=dest_row, column=col_num).value = None
                
                src_row_ptr += rows_to_copy
        
        print(f"   ‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {copied_rows} —Ä—è–¥–∫—ñ–≤")
        
        # –î–æ–¥–∞—î–º–æ –≤ –ª–æ–≥
        if copied_rows > 0:
            self.log.add_entry(
                operation='–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö',
                source_file=Path(source_file).name,
                sheet=dest_sheet_name,
                rows=copied_rows,
                details=f"–ö–ª—é—á: {key_column}, –ö–æ–ª–æ–Ω–∫–∏: {', '.join(data_columns)}"
            )
        
        return copied_rows
        
    def _group_contiguous(self, rows: List[int]) -> List[List[int]]:
        """–ì—Ä—É–ø—É–≤–∞—Ç–∏ —Ä—è–¥–∫–∏ —É –∫–æ–Ω—Ç—ñ–≥—É–∞–ª—å–Ω—ñ –±–ª–æ–∫–∏"""
        if not rows:
            return []
        
        sorted_rows = sorted(rows)
        blocks = []
        current_block = [sorted_rows[0]]
        
        for row in sorted_rows[1:]:
            if row == current_block[-1] + 1:
                current_block.append(row)
            else:
                blocks.append(current_block)
                current_block = [row]
        
        blocks.append(current_block)
        return blocks
        
    def create_log_sheet(self) -> None:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–∏—Å—Ç LOG –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –æ–±—Ä–æ–±–∫—É"""
        print(f"\nüìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç–∞ LOG...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –ª–∏—Å—Ç LOG —è–∫—â–æ —ñ—Å–Ω—É—î
        if 'LOG' in self.destination_wb.sheetnames:
            del self.destination_wb['LOG']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç
        log_sheet = self.destination_wb.create_sheet('LOG', 0)  # –ü–µ—Ä—à–∞ –ø–æ–∑–∏—Ü—ñ—è
        
        # –°—Ç–∏–ª—ñ
        header_font = Font(bold=True, size=12)
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        title_font = Font(bold=True, size=14)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        log_sheet['A1'] = '–õ–û–ì –û–ë–†–û–ë–ö–ò –§–ê–ô–õ–Ü–í'
        log_sheet['A1'].font = title_font
        log_sheet.merge_cells('A1:F1')
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        summary = self.log.get_summary()
        row = 3
        log_sheet[f'A{row}'] = '–î–∞—Ç–∞ –æ–±—Ä–æ–±–∫–∏:'
        log_sheet[f'B{row}'] = self.log.start_time.strftime('%d.%m.%Y %H:%M:%S')
        log_sheet[f'B{row}'].font = Font(bold=True)
        
        row += 1
        log_sheet[f'A{row}'] = '–í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ:'
        log_sheet[f'B{row}'] = summary['files_processed']
        log_sheet[f'B{row}'].font = Font(bold=True)
        
        row += 1
        log_sheet[f'A{row}'] = '–í—Å—å–æ–≥–æ –æ–ø–µ—Ä–∞—Ü—ñ–π:'
        log_sheet[f'B{row}'] = summary['operations']
        log_sheet[f'B{row}'].font = Font(bold=True)
        
        row += 1
        log_sheet[f'A{row}'] = '–í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ:'
        log_sheet[f'B{row}'] = summary['total_rows']
        log_sheet[f'B{row}'].font = Font(bold=True, color="00B050")
        
        row += 1
        log_sheet[f'A{row}'] = '–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (—Å–µ–∫):'
        log_sheet[f'B{row}'] = f"{summary['duration']:.2f}"
        log_sheet[f'B{row}'].font = Font(bold=True)
        
        # –¢–∞–±–ª–∏—Ü—è –æ–ø–µ—Ä–∞—Ü—ñ–π
        row += 2
        headers = ['‚Ññ', '–û–ø–µ—Ä–∞—Ü—ñ—è', '–§–∞–π–ª –¥–∂–µ—Ä–µ–ª–æ', '–õ–∏—Å—Ç', '–†—è–¥–∫—ñ–≤', '–î–µ—Ç–∞–ª—ñ']
        for col_idx, header in enumerate(headers, start=1):
            cell = log_sheet.cell(row=row, column=col_idx)
            cell.value = header
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal='center', vertical='center')
        
        # –î–∞–Ω—ñ
        entry_number = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (–±–µ–∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤)
        for entry in self.log.entries:
            row += 1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
            if entry.get('is_separator', False):
                # –°—Ç–∏–ª—å –¥–ª—è —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞
                cell = log_sheet.cell(row=row, column=2)
                cell.value = entry['operation']
                cell.font = Font(bold=True, size=11, color="FFFFFF")
                cell.fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
                cell.alignment = Alignment(horizontal='center', vertical='center')
                log_sheet.merge_cells(f'B{row}:F{row}')
                
                # –ü–æ—Ä–æ–∂–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ ‚Ññ
                log_sheet.cell(row=row, column=1).fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
            else:
                # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å
                entry_number += 1
                log_sheet.cell(row=row, column=1).value = entry_number
                log_sheet.cell(row=row, column=2).value = entry['operation']
                log_sheet.cell(row=row, column=3).value = entry['source_file']
                log_sheet.cell(row=row, column=4).value = entry['sheet']
                log_sheet.cell(row=row, column=5).value = entry['rows']
                log_sheet.cell(row=row, column=6).value = entry['details']
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
        for col_letter in ['A', 'B', 'C', 'D', 'E', 'F']:
            max_length = 0
            
            for cell in log_sheet[col_letter]:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ MergedCell —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
                    if hasattr(cell, 'value') and cell.value:
                        # –í—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                except:
                    pass
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –∑–∞–ø–∞—Å–æ–º
            adjusted_width = min(max_length + 2, 100)  # –ú–∞–∫—Å–∏–º—É–º 100 –¥–ª—è –¥—É–∂–µ –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤
            
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏
            min_widths = {
                'A': 5,   # ‚Ññ
                'B': 20,  # –û–ø–µ—Ä–∞—Ü—ñ—è
                'C': 15,  # –§–∞–π–ª –¥–∂–µ—Ä–µ–ª–æ
                'D': 15,  # –õ–∏—Å—Ç
                'E': 10,  # –†—è–¥–∫—ñ–≤
                'F': 30   # –î–µ—Ç–∞–ª—ñ
            }
            
            final_width = max(adjusted_width, min_widths.get(col_letter, 10))
            log_sheet.column_dimensions[col_letter].width = final_width
        
        print(f"‚úÖ –õ–∏—Å—Ç LOG —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ {len(self.log.entries)} –∑–∞–ø–∏—Å–∞–º–∏")
    
    def sanitize_sheets(self, sheet_names: List[str]) -> Dict[str, int]:
        """
        –°–∞–Ω—ñ—Ç–∏–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ —É –≤–∫–∞–∑–∞–Ω–∏—Ö –ª–∏—Å—Ç–∞—Ö (–∫–æ–ª–æ–Ω–∫–∏ A:H)
        
        Args:
            sheet_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ {sheet_name: –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∑–º—ñ–Ω}
        """
        print(f"\nüßπ === –°–ê–ù–Ü–¢–ò–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• (–ö–û–õ–û–ù–ö–ò A:H) ===")
        print(f"   –õ–∏—Å—Ç–∏: {', '.join(sheet_names)}")
        
        results = {}
        
        for sheet_name in sheet_names:
            # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±—ñ–ª—ñ–≤
            actual_sheet_name = None
            for name in self.destination_wb.sheetnames:
                if name.strip() == sheet_name.strip():
                    actual_sheet_name = name
                    break
            
            if actual_sheet_name is None:
                print(f"   ‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                continue
            
            sheet = self.destination_wb[actual_sheet_name]
            print(f"\n   üìÑ –û–±—Ä–æ–±–∫–∞ –ª–∏—Å—Ç–∞: {actual_sheet_name}")
            
            # –°–∞–Ω—ñ—Ç–∏–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ A:H
            cells = []
            for row in sheet.iter_rows(min_col=1, max_col=8):  # A=1, H=8
                for cell in row:
                    cells.append(cell)
            
            total, changed, preview = sanitize_cells(cells, show_preview=True)
            results[actual_sheet_name] = changed
            
            print(f"      –í—Å—å–æ–≥–æ –∫–ª—ñ—Ç–∏–Ω–æ–∫: {total}")
            print(f"      –ó–º—ñ–Ω–µ–Ω–æ: {changed}")
            
            if preview:
                print(f"      –ü—Ä–µ–≤ º—é –∑–º—ñ–Ω (–ø–µ—Ä—à—ñ {len(preview)}):")
                for change in preview[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                    print(f"         {change['cell']}: {change['old']} ‚Üí {change['new']}")
            
            # –î–æ–¥–∞—î–º–æ –≤ –ª–æ–≥
            if changed > 0:
                self.log.add_entry(
                    operation='–°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö (A:H)',
                    source_file='',
                    sheet=actual_sheet_name,
                    rows=changed,
                    details=f'–û—á–∏—â–µ–Ω–æ {changed} –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑ {total} (–∫–æ–ª–æ–Ω–∫–∏ A:H)'
                )
        
        total_changes = sum(results.values())
        print(f"\n   ‚úÖ –í—Å—å–æ–≥–æ –∑–º—ñ–Ω: {total_changes}")
        
        return results
    
    def check_mismatches(self) -> Tuple[List, Dict]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–∂ –ª–∏—Å—Ç–∞–º–∏ –ó–° —Ç–∞ –ë–ó
        
        Returns:
            (—Å–ø–∏—Å–æ–∫_–Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        print(f"\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–ï–ô ===")
        
        mismatches, error, stats = check_mismatches(self.destination_path)
        
        if error:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
            return [], {}
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –≤ –ª–æ–≥
        self.log.add_separator('–ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–ï–ô')
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if stats.get('total', 0) > 0:
            self.log.add_entry(
                operation='–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π',
                source_file='',
                sheet='–ó–° / –ë–ó',
                rows=stats['total'],
                details=f"–ó–°‚Üí–ë–ó: {stats['s1_missing_in_s2']}, –ë–ó‚Üí–ó–°: {stats['s2_missing_in_s1']}"
            )
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–Ω—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
            for mismatch in mismatches:
                self.log.add_entry(
                    operation='–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å',
                    source_file='',
                    sheet=mismatch.sheet,
                    rows='',
                    details=f"{mismatch.cell_addr}: ¬´{mismatch.value}¬ª ‚Äî {mismatch.reason}"
                )
        else:
            self.log.add_entry(
                operation='–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                source_file='',
                sheet='–ó–° / –ë–ó',
                rows=0,
                details='–í—Å—ñ –¥–∞–Ω—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è'
            )
        
        return mismatches, stats
    
    def check_slices(self) -> Tuple[List, Dict]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ "–∑—Ä—ñ–∑–∏" (–∫–æ–ª–æ–Ω–∫–∏ F/G)
        
        Returns:
            (—Å–ø–∏—Å–æ–∫_–ø—Ä–æ–±–ª–µ–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        print(f"\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê ¬´–ó–†–Ü–ó–Ü–í¬ª (F/G) ===")
        
        issues, error, stats = check_slices(self.destination_path)
        
        if error:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
            return [], {}
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –≤ –ª–æ–≥
        self.log.add_separator('–ü–ï–†–ï–í–Ü–†–ö–ê ¬´–ó–†–Ü–ó–Ü–í¬ª (F/G)')
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if stats.get('total', 0) > 0:
            self.log.add_entry(
                operation='–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∑ ¬´–∑—Ä—ñ–∑–∞–º–∏¬ª',
                source_file='–ó–°',
                sheet='',
                rows=stats['total'],
                details=f"–£ F —î —Ç–æ–∫–µ–Ω (–®/–í–õ–ö/–í–î), –∞–ª–µ G –ø–æ—Ä–æ–∂–Ω—è"
            )
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–Ω—É –ø—Ä–æ–±–ª–µ–º—É
            for issue in issues:
                self.log.add_entry(
                    operation='–ü—Ä–æ–±–ª–µ–º–∞ –∑ ¬´–∑—Ä—ñ–∑–æ–º¬ª',
                    source_file=issue.subunit,   # –ö–æ–ª–æ–Ω–∫–∞ C LOG = –ö–æ–ª–æ–Ω–∫–∞ B –ó–° (–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª)
                    sheet=issue.fio,             # –ö–æ–ª–æ–Ω–∫–∞ D LOG = –ö–æ–ª–æ–Ω–∫–∞ D –ó–° (–ü–Ü–ë)
                    rows='',
                    details=f"–ü—Å–µ–≤–¥–æ: {issue.pseudo} | –†—è–¥–æ–∫ {issue.row} | F={issue.val_f} | G=–ø–æ—Ä–æ–∂–Ω—å–æ"
                )
        else:
            self.log.add_entry(
                operation='–ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                source_file='–ó–°',
                sheet='',
                rows=0,
                details='–í—Å—ñ ¬´–∑—Ä—ñ–∑–∏¬ª –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
            )
        
        return issues, stats
    
    def check_duplicates(self) -> Tuple[List, Dict]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ü–Ü–ë –≤ –ª–∏—Å—Ç–∞—Ö
        
        Returns:
            (—Å–ø–∏—Å–æ–∫_–¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        print(f"\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í ===")
        
        duplicates, error, stats = check_duplicates(self.destination_path)
        
        if error:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
            return [], {}
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –≤ –ª–æ–≥
        self.log.add_separator('–ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í')
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if stats.get('total', 0) > 0:
            self.log.add_entry(
                operation='–ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤',
                source_file='',
                sheet='–ó–° / –ë–ó / 3–±–°–ø–ü –ë–ó',
                rows=stats['total'],
                details=f"–ü–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö D (–ó–°) —Ç–∞ E (–ë–ó, 3–±–°–ø–ü –ë–ó)"
            )
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–µ–Ω –¥—É–±–ª—ñ–∫–∞—Ç
            for dup in duplicates:
                rows_str = ", ".join(map(str, dup.rows))
                self.log.add_entry(
                    operation='–î—É–±–ª—ñ–∫–∞—Ç',
                    source_file=dup.sheet,
                    sheet=f"–ö–æ–ª–æ–Ω–∫–∞ {dup.column}",
                    rows=dup.count,
                    details=f"¬´{dup.value}¬ª ‚Äî —Ä—è–¥–∫–∏: {rows_str}"
                )
        else:
            self.log.add_entry(
                operation='–î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                source_file='',
                sheet='–ó–° / –ë–ó / 3–±–°–ø–ü –ë–ó',
                rows=0,
                details='–í—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω—ñ'
            )
        
        return duplicates, stats
    
    def save(self) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"""
        print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–∏—Å—Ç LOG –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        self.create_log_sheet()
        
        try:
            self.destination_wb.save(self.destination_path)
            print(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {self.destination_path}")
        except PermissionError as e:
            error_msg = (
                f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª!\n\n"
                f"–§–∞–π–ª '{self.destination_path}' –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ (Excel).\n\n"
                f"üîß –ó–∞–∫—Ä–∏–π—Ç–µ —Ñ–∞–π–ª —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            print(error_msg, file=sys.stderr)
            raise PermissionError(error_msg) from e

    
    def copy_range_direct(self, source_file: str, source_sheet: str, 
                         dest_sheet: str, cell_range: str) -> int:
        """
        –ü—Ä—è–º–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∑ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —ñ–Ω—à–∏–π
        
        Args:
            source_file: –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            source_sheet: –ù–∞–∑–≤–∞ –ª–∏—Å—Ç–∞ —É –≤—Ö—ñ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ
            dest_sheet: –ù–∞–∑–≤–∞ –ª–∏—Å—Ç–∞ —É —Ñ–∞–π–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            cell_range: –î—ñ–∞–ø–∞–∑–æ–Ω –∫–æ–º—ñ—Ä–æ–∫, –Ω–∞–ø—Ä. "C4:H231"
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫
        """
        print(f"\nüìã –ü—Ä—è–º–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É {cell_range}")
        print(f"   –ó: {source_file}")
        print(f"   –õ–∏—Å—Ç –¥–∂–µ—Ä–µ–ª–∞: {source_sheet}")
        print(f"   –õ–∏—Å—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {dest_sheet}")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
            src_wb = load_workbook(source_file, data_only=True)
            
            # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç –¥–∂–µ—Ä–µ–ª–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±—ñ–ª—ñ–≤
            actual_source_sheet = None
            for sheet_name in src_wb.sheetnames:
                if sheet_name.strip() == source_sheet.strip():
                    actual_source_sheet = sheet_name
                    break
            
            if actual_source_sheet is None:
                print(f"   ‚ö†Ô∏è –õ–∏—Å—Ç '{source_sheet}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—Ö—ñ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ")
                print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—Å—Ç–∏: {src_wb.sheetnames}")
                return 0
            
            # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±—ñ–ª—ñ–≤
            actual_dest_sheet = None
            for sheet_name in self.destination_wb.sheetnames:
                if sheet_name.strip() == dest_sheet.strip():
                    actual_dest_sheet = sheet_name
                    break
            
            if actual_dest_sheet is None:
                print(f"   ‚ö†Ô∏è –õ–∏—Å—Ç '{dest_sheet}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
                print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—Å—Ç–∏: {self.destination_wb.sheetnames}")
                return 0
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –Ω–∞–∑–≤–∞—Ö
            if actual_source_sheet != source_sheet:
                print(f"   üîß –î–∂–µ—Ä–µ–ª–æ: –∑–Ω–∞–π–¥–µ–Ω–æ '{actual_source_sheet}' –∑–∞–º—ñ—Å—Ç—å '{source_sheet}'")
            if actual_dest_sheet != dest_sheet:
                print(f"   üîß –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –∑–Ω–∞–π–¥–µ–Ω–æ '{actual_dest_sheet}' –∑–∞–º—ñ—Å—Ç—å '{dest_sheet}'")
            
            src_ws = src_wb[actual_source_sheet]
            dest_ws = self.destination_wb[actual_dest_sheet]
            
            # –ö–æ–ø—ñ—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            cells_copied = 0
            for row in src_ws[cell_range]:
                for cell in row:
                    dest_cell = dest_ws[cell.coordinate]
                    dest_cell.value = cell.value
                    cells_copied += 1
            
            print(f"   ‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {cells_copied} –∫–æ–º—ñ—Ä–æ–∫")
            
            # –î–æ–¥–∞—î–º–æ –≤ –ª–æ–≥
            if cells_copied > 0:
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
                range_parts = cell_range.split(':')
                if len(range_parts) == 2:
                    start_row = int(''.join(filter(str.isdigit, range_parts[0])))
                    end_row = int(''.join(filter(str.isdigit, range_parts[1])))
                    rows_count = end_row - start_row + 1
                else:
                    rows_count = cells_copied
                
                self.log.add_entry(
                    operation='–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É (3–ë–°–ü)',
                    source_file=Path(source_file).name,
                    sheet=source_sheet,
                    rows=rows_count,
                    details=f"–î—ñ–∞–ø–∞–∑–æ–Ω: {cell_range} ({cells_copied} –∫–æ–º—ñ—Ä–æ–∫)"
                )
            
            return cells_copied
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            return 0


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø—Ä–∏–π–º–∞—î JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∞–±–æ stdin"""
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —à–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        if len(sys.argv) > 1:
            # –ß–∏—Ç–∞—î–º–æ –∑ —Ñ–∞–π–ª—É (–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –¥–ª—è Unicode —à–ª—è—Ö—ñ–≤)
            config_file_path = sys.argv[1]
            print(f"üìñ –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É: {config_file_path}\n")
            
            with open(config_file_path, 'r', encoding='utf-8-sig') as f:
                config_json = f.read()
            config = json.loads(config_json)
        else:
            # –ß–∏—Ç–∞—î–º–æ –∑ stdin (—Å—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–±, –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
            config_json = sys.stdin.read()
            
            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            try:
                config = json.loads(config_json)
            except (json.JSONDecodeError, UnicodeDecodeError):
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∫–æ–¥—É–≤–∞—Ç–∏
                config_json = config_json.encode('latin1').decode('utf-8')
                config = json.loads(config_json)
        
        print("üöÄ === PYTHON EXCEL PROCESSOR ===\n")
        
        processor = ExcelProcessor()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        processor.load_destination(config['destination_file'])
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ª–∏—Å—Ç
        total_copied = 0
        
        # === –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê: 3–ë–°–ü ===
        print(f"\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ enable_3bsp: {config.get('enable_3bsp', False)}")
        if config.get('enable_3bsp', False):
            processor.log.add_separator("–°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê: 3–ë–°–ü")
            
            print("\nüîß === –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê: 3–ë–°–ü ===")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä enable_3bsp: {config.get('enable_3bsp')}")
            print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(config['source_files'])}")
            
            found_3bsp_files = []
            for source_file in config['source_files']:
                file_name = source_file.split('\\')[-1].split('/')[-1]
                file_name_lower = file_name.lower()
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
                if '3' in file_name and ('–±' in file_name_lower or 'b' in file_name_lower):
                    print(f"   üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É: {file_name}")
                    print(f"      –ù–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä: {file_name_lower}")
                    print(f"      –ú—ñ—Å—Ç–∏—Ç—å '3–±—Å–ø–ø': {'3–±—Å–ø–ø' in file_name_lower}")
                
                # –®—É–∫–∞—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è: 3–ë–°–ø–ü, 3–±–°–ø–ü, 3–±—Å–ø–ø
                if '3–±—Å–ø–ø' in file_name_lower:
                    found_3bsp_files.append(file_name)
                    print(f"\nüìÑ ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª 3–ë–°–ü: {file_name}")
                    cells_copied = processor.copy_range_direct(
                        source_file,
                        source_sheet='3–±–°–ø–ü –ë–ó',
                        dest_sheet='3–±–°–ø–ü –ë–ó',
                        cell_range='C4:H231'
                    )
                    total_copied += cells_copied
                    print(f"   ‚úÖ 3–ë–°–ü: —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {cells_copied} –∫–æ–º—ñ—Ä–æ–∫")
            
            print(f"\n   üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ 3–ë–°–ü: {len(found_3bsp_files)}")
            if found_3bsp_files:
                for f in found_3bsp_files:
                    print(f"      - {f}")
            print(f"   üìä –í—Å—å–æ–≥–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ 3–ë–°–ü: {total_copied} –∫–æ–º—ñ—Ä–æ–∫")
        else:
            print("   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä enable_3bsp = False, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É 3–ë–°–ü")
        
        # === –û–°–ù–û–í–ù–ê –û–ë–†–û–ë–ö–ê –õ–ò–°–¢–Ü–í ===
        for sheet_config in config['sheets']:
            sheet_name = sheet_config['name']
            key_column = sheet_config['key_column']
            data_columns = sheet_config['data_columns']
            blacklist = sheet_config.get('blacklist', [])
            
            processor.log.add_separator(f"–û–ë–†–û–ë–ö–ê –õ–ò–°–¢–ê: {sheet_name}")
            
            print(f"\nüìã === –û–ë–†–û–ë–ö–ê –õ–ò–°–¢–ê: {sheet_name} ===")
            print(f"   –ö–ª—é—á: {key_column}, –î–∞–Ω—ñ: {data_columns}")
            
            # –ë—É–¥—É—î–º–æ —ñ–Ω–¥–µ–∫—Å
            index = processor.build_index(sheet_name, key_column, blacklist)
            
            if not index:
                print(f"   ‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –≤—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
            for source_file in config['source_files']:
                # === –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –§–ê–ô–õ–£ 1241 ===
                file_name = source_file.split('\\')[-1].split('/')[-1]
                if '1241' in file_name:
                    # –§–∞–π–ª 1241 –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –¥–ª—è –ª–∏—Å—Ç–∞ –ë–ó –∑ –∫–æ–ª–æ–Ω–∫–æ—é C
                    if sheet_name == '–ó–°':
                        print(f"   üîß –§–∞–π–ª 1241: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ª–∏—Å—Ç –ó–° (–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ë–ó)")
                        continue
                    elif sheet_name == '–ë–ó':
                        print(f"   üîß –§–∞–π–ª 1241: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É C –¥–ª—è –ë–ó")
                        special_key_column = 'C'
                        copied = processor.copy_data(
                            source_file, 
                            sheet_name, 
                            special_key_column,  # –ö–æ–ª–æ–Ω–∫–∞ C –¥–ª—è 1241
                            data_columns, 
                            index
                        )
                        total_copied += copied
                        continue
                
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞
                copied = processor.copy_data(
                    source_file, 
                    sheet_name, 
                    key_column, 
                    data_columns, 
                    index
                )
                total_copied += copied
        
        # === –°–ê–ù–Ü–¢–ò–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ===
        if config.get('enable_sanitizer', False):
            processor.log.add_separator("–°–ê–ù–Ü–¢–ò–ó–ê–¶–Ü–Ø –î–ê–ù–ò–•")
            
            print("\nüßπ === –°–ê–ù–Ü–¢–ò–ó–ê–¶–Ü–Ø –£–í–Ü–ú–ö–ù–ï–ù–ê ===")
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–∞–∑–≤–∏ –≤—Å—ñ—Ö –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ª–∏—Å—Ç—ñ–≤
            sheet_names = [sheet_config['name'] for sheet_config in config['sheets']]
            
            # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª–∏—Å—Ç–∏ –¥–ª—è 3–ë–°–ü
            if config.get('enable_3bsp', False):
                sheet_names.append('3–±–°–ø–ü –ë–ó')
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—é
            sanitize_results = processor.sanitize_sheets(sheet_names)
            print(f"   ‚úÖ –°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sum(sanitize_results.values())} –∑–º—ñ–Ω")
        else:
            print("\n   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä enable_sanitizer = False, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—é")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–∏—Å—Ç LOG
        processor.create_log_sheet()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫, —è–∫—ñ —á–∏—Ç–∞—é—Ç—å –∑ –¥–∏—Å–∫–∞)
        processor.save()
        
        # === –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–ï–ô ===
        if config.get('enable_mismatches', False):
            print("\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–ï–ô –£–í–Ü–ú–ö–ù–ï–ù–ê ===")
            mismatches, mismatch_stats = processor.check_mismatches()
            
            if mismatch_stats.get('total', 0) > 0:
                print(f"   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π: {mismatch_stats['total']}")
                print(f"      –ó–° ‚Üí –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –ë–ó: {mismatch_stats['s1_missing_in_s2']}")
                print(f"      –ë–ó ‚Üí –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –ó–°: {mismatch_stats['s2_missing_in_s1']}")
            else:
                print(f"   ‚úÖ –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("\n   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä enable_mismatches = False, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
        
        # === –ü–ï–†–ï–í–Ü–†–ö–ê ¬´–ó–†–Ü–ó–Ü–í¬ª (F/G) ===
        if config.get('enable_slice_check', False):
            print("\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê ¬´–ó–†–Ü–ó–Ü–í¬ª –£–í–Ü–ú–ö–ù–ï–ù–ê ===")
            slice_issues, slice_stats = processor.check_slices()
            
            if slice_stats.get('total', 0) > 0:
                print(f"   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∑ ¬´–∑—Ä—ñ–∑–∞–º–∏¬ª: {slice_stats['total']}")
            else:
                print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("\n   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä enable_slice_check = False, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
        
        # === –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í ===
        if config.get('enable_duplicates', False):
            print("\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –£–í–Ü–ú–ö–ù–ï–ù–ê ===")
            duplicates, dup_stats = processor.check_duplicates()
            
            if dup_stats.get('total', 0) > 0:
                print(f"   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {dup_stats['total']}")
                for sheet, count in dup_stats.get('by_sheet', {}).items():
                    if count > 0:
                        print(f"      {sheet}: {count}")
            else:
                print(f"   ‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("\n   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä enable_duplicates = False, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ –ª–∏—Å—Ç LOG –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        processor.create_log_sheet()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –ª–æ–≥–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        processor.save()
        
        print(f"\n‚úÖ === –û–ë–†–û–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print(f"üìä –í—Å—å–æ–≥–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {total_copied} —Ä—è–¥–∫—ñ–≤")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'success': True,
            'total_rows': total_copied
        }
        print(f"\n__RESULT__{json.dumps(result)}__END__")
        
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        
        result = {
            'success': False,
            'error': str(e)
        }
        print(f"\n__RESULT__{json.dumps(result)}__END__")
        sys.exit(1)


if __name__ == '__main__':
    main()
