"""
Excel Slice Check - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ F —Ç–∞ G
–ê–¥–∞–ø—Ç–∞—Ü—ñ—è VBA –ª–æ–≥—ñ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ "–∑—Ä—ñ–∑—ñ–≤"

–ü—Ä–∞–≤–∏–ª–∞:
- –Ø–∫—â–æ –≤ –∫–æ–ª–æ–Ω—Ü—ñ F —î —Ç–æ–∫–µ–Ω (–®, –í–õ–ö, –í–î), —Ç–æ –∫–æ–ª–æ–Ω–∫–∞ G –º–∞—î –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞
- –ü–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Ä—è–¥–∫–∏ –∑ –ü–Ü–ë (–∫–æ–ª–æ–Ω–∫–∞ D)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ó–°: B=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, C=–∑–≤–∞–Ω–Ω—è, D=–ü–Ü–ë, E=–ø—Å–µ–≤–¥–æ, F=—Å—Ç–∞—Ç—É—Å, G=–¥–æ–¥.
"""

from typing import List, Tuple, Optional
from openpyxl import load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from text_utils import normalize_text

# ========= –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =========
SOURCE_SHEET_NAME = "–ó–°"    # –ê—Ä–∫—É—à –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ó–°: B=–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª, C=–∑–≤–∞–Ω–Ω—è, D=–ü–Ü–ë, E=–ø—Å–µ–≤–¥–æ, F=—Å—Ç–∞—Ç—É—Å, G=–¥–æ–¥.
COL_SUBUNIT = 2             # B - –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª
COL_RANK = 3                # C - –∑–≤–∞–Ω–Ω—è
COL_FIO = 4                 # D - –ü–Ü–ë
COL_PSEUDO = 5              # E - –ø—Å–µ–≤–¥–æ
COL_F = 6                   # F - —Å—Ç–∞—Ç—É—Å (–¥–µ —à—É–∫–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –®, –í–õ–ö, –í–î)
COL_G = 7                   # G - –¥–æ–¥. (–º–∞—î –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —è–∫—â–æ —î —Ç–æ–∫–µ–Ω)

# –¢–æ–∫–µ–Ω–∏ —É –∫–æ–ª–æ–Ω—Ü—ñ F, —â–æ –≤–∏–º–∞–≥–∞—é—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è G
CHECK_TOKENS = ["–®", "–í–õ–ö", "–í–î"]

PREVIEW_MAX = 25


class SliceIssue:
    """–ó–∞–ø–∏—Å –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∑ "–∑—Ä—ñ–∑–æ–º" """
    
    def __init__(self, subunit: str, row: int, fio: str, pseudo: str, val_f: str, val_g: str, reason: str):
        self.subunit = subunit
        self.row = row
        self.fio = fio
        self.pseudo = pseudo
        self.val_f = val_f
        self.val_g = val_g
        self.reason = reason
    
    def __repr__(self):
        return f"SliceIssue(row={self.row}, fio={self.fio}, F={self.val_f})"


class SliceChecker:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ "–∑—Ä—ñ–∑—ñ–≤" —É –∫–æ–ª–æ–Ω–∫–∞—Ö F/G"""
    
    def __init__(self, workbook_path: str):
        self.workbook_path = workbook_path
        self.wb = None
        self.ws = None
    
    def check(self) -> Tuple[List[SliceIssue], str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä–∫—É—à –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑ "–∑—Ä—ñ–∑–∞–º–∏"
        
        Returns:
            (—Å–ø–∏—Å–æ–∫_–ø—Ä–æ–±–ª–µ–º, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–ø—Ä–æ_–ø–æ–º–∏–ª–∫—É)
        """
        try:
            self.wb = load_workbook(self.workbook_path)
            
            # –®—É–∫–∞—î–º–æ –∞—Ä–∫—É—à
            self.ws = self._find_sheet(SOURCE_SHEET_NAME)
            if self.ws is None:
                return [], f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à '{SOURCE_SHEET_NAME}'"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
            last_row = self._get_last_row([COL_SUBUNIT, COL_FIO, COL_F, COL_G])
            if last_row < 1:
                return [], "–ê—Ä–∫—É—à –ø–æ—Ä–æ–∂–Ω—ñ–π"
            
            print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω: —Ä—è–¥–∫–∏ 1-{last_row}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
            issues = []
            for row in range(1, last_row + 1):
                fio_cell = self.ws.cell(row, COL_FIO)
                fio = self._normalize(fio_cell.value)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –±–µ–∑ –ü–Ü–ë
                if not fio:
                    continue
                
                val_f = self._normalize(self.ws.cell(row, COL_F).value)
                val_g = self._normalize(self.ws.cell(row, COL_G).value)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–æ–∫–µ–Ω —É F
                if self._has_any_token(val_f) and not val_g:
                    subunit = self._normalize(self.ws.cell(row, COL_SUBUNIT).value)
                    pseudo = self._normalize(self.ws.cell(row, COL_PSEUDO).value)
                    
                    reason = f'–£ F="{val_f}", –∞–ª–µ G –ø–æ—Ä–æ–∂–Ω—è ‚Äî –ø–æ—Ç—Ä—ñ–±–µ–Ω ¬´–∑—Ä—ñ–∑¬ª'
                    
                    issue = SliceIssue(
                        subunit=subunit,
                        row=row,
                        fio=fio,
                        pseudo=pseudo,
                        val_f=val_f,
                        val_g="",
                        reason=reason
                    )
                    issues.append(issue)
            
            return issues, ""
            
        except Exception as e:
            return [], f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    
    def _find_sheet(self, name: str) -> Optional[Worksheet]:
        """–ó–Ω–∞–π—Ç–∏ –∞—Ä–∫—É—à –∑–∞ –Ω–∞–∑–≤–æ—é (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±—ñ–ª—ñ–≤)"""
        name_norm = name.strip().lower()
        for ws in self.wb.worksheets:
            if ws.title.strip().lower() == name_norm:
                return ws
        return None
    
    def _get_last_row(self, cols: List[int]) -> int:
        """–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Ä—è–¥–æ–∫ —Å–µ—Ä–µ–¥ –∫—ñ–ª—å–∫–æ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        max_row = 0
        for col in cols:
            for row in range(self.ws.max_row, 0, -1):
                cell = self.ws.cell(row, col)
                if cell.value is not None and str(cell.value).strip() != "":
                    if row > max_row:
                        max_row = row
                    break
        return max_row if max_row > 0 else 0
    
    def _normalize(self, value) -> str:
        """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é"""
        # remove_spaces=False, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏
        return normalize_text(value, remove_spaces=False)
    
    def _has_any_token(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –±—É–¥—å-—è–∫–∏–π —Ç–æ–∫–µ–Ω"""
        if not text:
            return False

        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        text_normalized = normalize_text(text, remove_spaces=False)
        for token in CHECK_TOKENS:
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            token_normalized = normalize_text(token, remove_spaces=False)
            if token_normalized in text_normalized:
                return True

        return False


def check_slices(workbook_path: str) -> Tuple[List[SliceIssue], str, dict]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ "–∑—Ä—ñ–∑–∏" (F/G) —É —Ñ–∞–π–ª—ñ
    
    Args:
        workbook_path: –®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É
    
    Returns:
        (—Å–ø–∏—Å–æ–∫_–ø—Ä–æ–±–ª–µ–º, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–ø—Ä–æ_–ø–æ–º–∏–ª–∫—É, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    print(f"\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê ¬´–ó–†–Ü–ó–Ü–í¬ª (F/G) ===")
    print(f"   –§–∞–π–ª: {workbook_path}")
    print(f"   –¢–æ–∫–µ–Ω–∏: {', '.join(CHECK_TOKENS)}")
    
    checker = SliceChecker(workbook_path)
    issues, error = checker.check()
    
    if error:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
        return [], error, {}
    
    stats = {
        'total': len(issues)
    }
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print(f"   –í—Å—å–æ–≥–æ –ø—Ä–æ–±–ª–µ–º: {stats['total']}")
    
    if issues:
        print(f"\nüìã –ü—Ä–µ–≤ º—é (–ø–µ—Ä—à—ñ {min(len(issues), PREVIEW_MAX)}):")
        for i, issue in enumerate(issues[:PREVIEW_MAX], 1):
            print(f"   {i}. –†—è–¥–æ–∫ {issue.row} | {issue.subunit} | {issue.fio} | F={issue.val_f} | G=–ø–æ—Ä–æ–∂–Ω—å–æ")
        
        if len(issues) > PREVIEW_MAX:
            print(f"   ... —Ç–∞ —â–µ {len(issues) - PREVIEW_MAX} –ø—Ä–æ–±–ª–µ–º")
    
    return issues, "", stats


# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        issues, error, stats = check_slices(sys.argv[1])
        if error:
            print(f"‚ùå {error}")
            sys.exit(1)
        else:
            print(f"\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats['total']} –ø—Ä–æ–±–ª–µ–º")
    else:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python excel_slice_check.py <—à–ª—è—Ö_–¥–æ_—Ñ–∞–π–ª—É>")
