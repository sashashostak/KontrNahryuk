"""
check_zbd.py - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–µ–ª—é –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏–º –ñ–ë–î

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- –ß–∏—Ç–∞—î Word —Ñ–∞–π–ª–∏ –ñ–ë–î (–¥–µ–∫—ñ–ª—å–∫–∞ —Ñ–∞–π–ª—ñ–≤) - –≤–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–∏–±—É—Ç—Ç—è/–≤–∏–±—É—Ç—Ç—è
- –ß–∏—Ç–∞—î Excel —Ç–∞–±–µ–ª—å (–∫–æ–ª–æ–Ω–∫–∞ C - –ü–Ü–ë, E1:AI1 - –¥–∞—Ç–∏)
- –ß–∏—Ç–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel (–∫–æ–ª–æ–Ω–∫–∞ B - –ø–æ–∑–∏—Ü—ñ—ó, C - –≤–∏–ø–ª–∞—Ç–∏)
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–ø–ª–∞—Ç –≤ —Ç–∞–±–µ–ª—ñ –∑–≥—ñ–¥–Ω–æ –¥–∞–Ω–∏—Ö –ñ–ë–î
- –ü–æ–∑–Ω–∞—á–∞—î —á–µ—Ä–≤–æ–Ω–∏–º –ø–æ–º–∏–ª–∫–∏: –ü–Ü–ë –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏–ø–ª–∞—Ç–∞ –Ω–µ–≤—ñ—Ä–Ω–∞
- –°—Ç–≤–æ—Ä—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel
"""

import sys
import io
import json
import re
from pathlib import Path
from typing import List, Dict, Any, Tuple, Optional
from datetime import datetime, date, timedelta
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.utils import get_column_letter
from docx import Document
import builtins

_log_file_handle = None


def _set_log_file(path: Optional[str]) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —à–ª—è—Ö –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª—É —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –π–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å—É."""
    global _log_file_handle

    if _log_file_handle:
        try:
            _log_file_handle.close()
        finally:
            _log_file_handle = None

    if path:
        log_path = Path(path)
        if not log_path.parent.exists():
            log_path.parent.mkdir(parents=True, exist_ok=True)
        _log_file_handle = log_path.open('w', encoding='utf-8')


def _log_print(*args, **kwargs) -> None:
    """–î—Ä—É–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–∞ –¥—É–±–ª—é—î —É –ª–æ–≥-—Ñ–∞–π–ª."""
    builtins.print(*args, **kwargs)

    if _log_file_handle:
        sep = kwargs.get('sep', ' ')
        end = kwargs.get('end', '\n')
        text = sep.join(str(arg) for arg in args)
        _log_file_handle.write(text + end)
        _log_file_handle.flush()


print = _log_print

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTF-8 –¥–ª—è stdout/stderr –Ω–∞ Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')


class ZBDChecker:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–µ–ª—é –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏–º –ñ–ë–î"""

    def __init__(self, config_excel: str = None):
        self.errors = []
        self.warnings = []
        self.config_excel = config_excel
        
        # –î–∞–Ω—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {–ø–æ–∑–∏—Ü—ñ—è: –≤–∏–ø–ª–∞—Ç–∞}
        self.position_payments: Dict[str, str] = {}
        
        # –î–∞–Ω—ñ –∑ –ñ–ë–î: {–ü–Ü–ë –∑—ñ –∑–≤–∞–Ω–Ω—è–º: [(–ø–æ–∑–∏—Ü—ñ—è, –±–ª–æ–∫, –¥–∞—Ç–∞_–ø—Ä–∏–±—É—Ç—Ç—è, –¥–∞—Ç–∞_–≤–∏–±—É—Ç—Ç—è)]}
        self.zbd_data: Dict[str, List[Tuple[str, str, Optional[date], Optional[date]]]] = {}
        
        # –Ü–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –ü–Ü–ë –±–µ–∑ –∑–≤–∞–Ω–Ω—è: {–ü–Ü–ë –±–µ–∑ –∑–≤–∞–Ω–Ω—è: –ü–Ü–ë –∑—ñ –∑–≤–∞–Ω–Ω—è–º}
        self.pib_index: Dict[str, str] = {}
        
        # –ú—ñ—Å—è—Ü—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.check_month: Optional[int] = None
        self.check_year: Optional[int] = None
        
        # –°–ø–∏—Å–æ–∫ –∑–≤–∞–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        self.ranks = [
            '—Å–æ–ª–¥–∞—Ç', '—Å—Ç–∞—Ä—à–∏–π —Å–æ–ª–¥–∞—Ç',
            '–∫–∞–ø—Ä–∞–ª', '–º–æ–ª–æ–¥—à–∏–π –∫–∞–ø—Ä–∞–ª',
            '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '—Å–µ—Ä–∂–∞–Ω—Ç', '—Å—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–º–∞–π—Å—Ç–µ—Ä-—Å–µ—Ä–∂–∞–Ω—Ç', '—à—Ç–∞–±-—Å–µ—Ä–∂–∞–Ω—Ç',
            '–ø—Ä–∞–ø–æ—Ä—â–∏–∫', '—Å—Ç–∞—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä—â–∏–∫',
            '–º–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–∫–∞–ø—ñ—Ç–∞–Ω',
            '–º–∞–π–æ—Ä', '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫', '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
            '–≥–µ–Ω–µ—Ä–∞–ª-–º–∞–π–æ—Ä', '–≥–µ–Ω–µ—Ä–∞–ª-–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–≥–µ–Ω–µ—Ä–∞–ª-–ø–æ–ª–∫–æ–≤–Ω–∏–∫', '–≥–µ–Ω–µ—Ä–∞–ª –∞—Ä–º—ñ—ó –£–∫—Ä–∞—ó–Ω–∏'
        ]

    def _normalize_pib(self, pib: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –ü–Ü–ë (–≤–∏–¥–∞–ª—è—î –∑–≤–∞–Ω–Ω—è)
        
        Args:
            pib: –ü–Ü–ë –∑—ñ –∑–≤–∞–Ω–Ω—è–º –∞–±–æ –±–µ–∑
            
        Returns:
            –ü–Ü–ë –±–µ–∑ –∑–≤–∞–Ω–Ω—è
        """
        # –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        pib_clean = re.sub(r'\s+', ' ', pib).strip()
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–≤–∞–Ω–Ω—è –≤—ñ–¥ –¥–æ–≤—à–æ–≥–æ –¥–æ –∫–æ—Ä–æ—Ç—à–æ–≥–æ (—â–æ–± "–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç" –æ–±—Ä–æ–±–ª—è–≤—Å—è –ø–µ—Ä–µ–¥ "—Å–µ—Ä–∂–∞–Ω—Ç")
        sorted_ranks = sorted(self.ranks, key=len, reverse=True)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–≤–∞–Ω–Ω—è –∑ –ø–æ—á–∞—Ç–∫—É
        for rank in sorted_ranks:
            if pib_clean.lower().startswith(rank.lower()):
                pib_clean = pib_clean[len(rank):].strip()
                break
        
        return pib_clean

    @staticmethod
    def _normalize_payment_value(value: Optional[Any]) -> Optional[str]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–ø–ª–∞—Ç–∏ —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π –≤–∏–≥–ª—è–¥ (–∫–∏—Ä–∏–ª–∏—Ü—è, –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä)."""
        if value is None:
            return None

        text = str(value).strip()
        if not text:
            return None

        mapping = {
            'A': '–ê', 'B': '–í', 'C': '–°', 'E': '–ï', 'H': '–ù', 'K': '–ö', 'M': '–ú', 'O': '–û',
            'P': '–†', 'R': '–†', 'T': '–¢', 'X': '–•', 'Y': '–£', 'V': '–í', 'Z': '–ó', '3': '–ó',
            'a': '–∞', 'b': '–≤', 'c': '—Å', 'e': '–µ', 'h': '–Ω', 'k': '–∫', 'm': '–º', 'o': '–æ',
            'p': '—Ä', 'r': '—Ä', 't': '—Ç', 'x': '—Ö', 'y': '—É', 'v': '–≤', 'z': '–∑'
        }

        normalized_chars = [mapping.get(ch, ch) for ch in text]
        normalized = ''.join(normalized_chars).upper()

        return normalized

    def check_files(self, word_files: List[str], excel_file: str, output_path: str) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î Word —Ç–∞ Excel —Ñ–∞–π–ª–∏

        Args:
            word_files: –°–ø–∏—Å–æ–∫ —à–ª—è—Ö—ñ–≤ –¥–æ Word —Ñ–∞–π–ª—ñ–≤ –ñ–ë–î
            excel_file: –®–ª—è—Ö –¥–æ Excel —Ç–∞–±–µ–ª—é
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        print(f"üìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {len(word_files)} Word —Ñ–∞–π–ª—ñ–≤...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if self.config_excel:
            print(f"‚öôÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel: {Path(self.config_excel).name}")
            self._load_config()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Word —Ñ–∞–π–ª–∏ (–≤–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –ñ–ë–î)
        for i, word_file in enumerate(word_files, 1):
            print(f"  {i}. {Path(word_file).name}")
            self._parse_zbd_word(word_file)
        
        print(f"\nüìñ –ß–∏—Ç–∞–Ω–Ω—è —Ç–∞–±–µ–ª—é Excel: {excel_file}")

        try:
            # –ß–∏—Ç–∞—î–º–æ —Ç–∞–±–µ–ª—å
            wb_tabel = load_workbook(excel_file, data_only=True)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–µ–ª—å –∑–≥—ñ–¥–Ω–æ –¥–∞–Ω–∏—Ö –ñ–ë–î
            self._check_tabel(wb_tabel, excel_file, output_path)
            
            wb_tabel.close()
            
            print(f"\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"  - –ü–æ–º–∏–ª–æ–∫: {len(self.errors)}")
            print(f"  - –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {len(self.warnings)}")
            
            return {
                'success': True,
                'errors': len(self.errors),
                'warnings': len(self.warnings)
            }

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            return {
                'success': False,
                'error': str(e)
            }

    def _load_config(self) -> None:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–æ–∑–∏—Ü—ñ–π —Ç–∞ –≤–∏–ø–ª–∞—Ç"""
        print(f"‚öôÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        
        try:
            wb = load_workbook(self.config_excel, data_only=True)
            
            # –®—É–∫–∞—î–º–æ –∞—Ä–∫—É—à –†–í–ü
            if '–†–í–ü' in wb.sheetnames:
                ws = wb['–†–í–ü']
            else:
                ws = wb.active
            
            # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ: –∫–æ–ª–æ–Ω–∫–∞ B - –ø–æ–∑–∏—Ü—ñ—ó, C - –≤–∏–ø–ª–∞—Ç–∏
            for row in ws.iter_rows(min_row=2, values_only=True):
                position = row[1]  # –ö–æ–ª–æ–Ω–∫–∞ B
                payment = row[2]   # –ö–æ–ª–æ–Ω–∫–∞ C
                
                if position and payment:
                    position_str = str(position).strip()
                    payment_str = str(payment).strip()
                    self.position_payments[position_str] = payment_str
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è "–æ–±—Å—Ç—Ä—ñ–ª"
                    if '–æ–±—Å—Ç—Ä—ñ–ª' in position_str.lower():
                        print(f"  üí• –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –æ–±—Å—Ç—Ä—ñ–ª—É: '{position_str}' ‚Üí '{payment_str}'")
            
            wb.close()
            print(f"  ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.position_payments)} –ø–æ–∑–∏—Ü—ñ–π")
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

    def _parse_zbd_word(self, file_path: str) -> None:
        """–ß–∏—Ç–∞—î Word —Ñ–∞–π–ª –ñ–ë–î —Ç–∞ –≤–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–∏–±—É—Ç—Ç—è/–≤–∏–±—É—Ç—Ç—è"""
        try:
            if not Path(file_path).exists():
                self.errors.append(f"Word —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {Path(file_path).name}")
                return
            
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—è—Ü—å –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
            filename = Path(file_path).stem.lower()
            month_names = {
                '—Å—ñ—á–µ–Ω—å': 1, '—Å—ñ—á–Ω—è': 1,
                '–ª—é—Ç–∏–π': 2, '–ª—é—Ç–æ–≥–æ': 2,
                '–±–µ—Ä–µ–∑–µ–Ω—å': 3, '–±–µ—Ä–µ–∑–Ω—è': 3,
                '–∫–≤—ñ—Ç–µ–Ω—å': 4, '–∫–≤—ñ—Ç–Ω—è': 4,
                '—Ç—Ä–∞–≤–µ–Ω—å': 5, '—Ç—Ä–∞–≤–Ω—è': 5,
                '—á–µ—Ä–≤–µ–Ω—å': 6, '—á–µ—Ä–≤–Ω—è': 6,
                '–ª–∏–ø–µ–Ω—å': 7, '–ª–∏–ø–Ω—è': 7,
                '—Å–µ—Ä–ø–µ–Ω—å': 8, '—Å–µ—Ä–ø–Ω—è': 8,
                '–≤–µ—Ä–µ—Å–µ–Ω—å': 9, '–≤–µ—Ä–µ—Å–Ω—è': 9,
                '–∂–æ–≤—Ç–µ–Ω—å': 10, '–∂–æ–≤—Ç–Ω—è': 10,
                '–ª–∏—Å—Ç–æ–ø–∞–¥': 11, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 11,
                '–≥—Ä—É–¥–µ–Ω—å': 12, '–≥—Ä—É–¥–Ω—è': 12
            }
            
            # –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è –≤ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
            for month_name, month_num in month_names.items():
                if month_name in filename:
                    if not hasattr(self, 'check_month'):
                        self.check_month = month_num
                        # –Ø–∫—â–æ —Ä—ñ–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π
                        if not hasattr(self, 'check_year'):
                            from datetime import datetime
                            self.check_year = datetime.now().year
                        print(f"  üìÖ –í–∏–∑–Ω–∞—á–µ–Ω–æ –º—ñ—Å—è—Ü—å –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É: {month_num} ({month_name.capitalize()}), —Ä—ñ–∫: {self.check_year}")
                    break
            
            print(f"  üìÑ –ü–∞—Ä—Å–∏–Ω–≥ {Path(file_path).name}...")
            doc = Document(file_path)
            people_found = 0
            
            # –ñ–ë–î —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 31 —Ç–∞–±–ª–∏—Ü—ñ (–ø–æ –æ–¥–Ω—ñ–π –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –º—ñ—Å—è—Ü—è)
            for table_idx, table in enumerate(doc.tables, 1):
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∫–æ–∂–Ω–æ—ó 5-–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
                if table_idx % 5 == 1:
                    print(f"    üîç –û–±—Ä–æ–±–∫–∞ —Ç–∞–±–ª–∏—Ü—å {table_idx}-{min(table_idx+4, 31)}...")
                
                current_position = None
                current_block = None  # '–ø—Ä–∏–±—É–≤' –∞–±–æ '–≤–∏–±—É–≤'
                
                # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç—É –∑ —Ä—è–¥–∫–∞ 2, –∫–æ–ª–æ–Ω–∫–∞ 0 (—Ñ–æ—Ä–º–∞—Ç 01.09.2025)
                event_date = None
                if len(table.rows) > 2 and len(table.rows[2].cells) > 0:
                    date_text = table.rows[2].cells[0].text.strip()
                    event_date = self._parse_date(date_text)
                    if event_date:
                        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
                        if table_idx == 1:
                            print(f"      üìÖ –ü–µ—Ä—à–∞ –¥–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}")
                        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–∫ —ñ –º—ñ—Å—è—Ü—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –∑–Ω–∞–π–¥–µ–Ω—ñ–π –¥–∞—Ç—ñ
                        if self.check_year is None or self.check_month is None:
                            self.check_year = event_date.year
                            self.check_month = event_date.month
                            print(f"      ‚úì –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {self.check_month}/{self.check_year}")
                    else:
                        print(f"      ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É '{date_text}'")
                
                if not event_date:
                    print(f"      ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Ç–∞–±–ª–∏—Ü—ñ - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É")
                    continue
                
                for row_idx, row in enumerate(table.rows):
                    cells = row.cells
                    if len(cells) < 2:
                        continue
                    
                    # –¢–µ–∫—Å—Ç –∑ –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫..." (—ñ–Ω–¥–µ–∫—Å 1)
                    cell_text = cells[1].text.strip()
                    
                    if not cell_text:
                        continue
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 5 —Ä—è–¥–∫—ñ–≤ –ø–µ—Ä—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    if table_idx == 1 and row_idx <= 5:
                        print(f"      [DEBUG] –†—è–¥–æ–∫ {row_idx}: '{cell_text[:80]}'...")
                    
                    # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –ø–æ–∑–∏—Ü—ñ—î—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–æ—Ç–∞—Ü—ñ—é –æ/—Å –í–ü "–ú–∞—Ä—ñ–æ-1"")
                    if self._is_position_header(cell_text):
                        current_position = self._extract_position(cell_text)
                        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Å—Ç—Ä—ñ–ª—É
                        if current_position == '–æ–±—Å—Ç—Ä—ñ–ª':
                            print(f"      üí• –û–±—Å—Ç—Ä—ñ–ª, —Ç–∞–±–ª–∏—Ü—è {table_idx}")
                        # –ù–ï —Ä–æ–±–∏–º–æ continue - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–∏–±—É–ª–∏/–≤–∏–±—É–ª–∏ –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É
                    
                    # –î–ª—è "–æ–±—Å—Ç—Ä—ñ–ª" - –æ–∫—Ä–µ–º–∞ –ª–æ–≥—ñ–∫–∞ (—à—É–∫–∞—î–º–æ "–ø–µ—Ä–µ–±—É–≤–∞–ª–∏:")
                    if current_position == '–æ–±—Å—Ç—Ä—ñ–ª' and '–ø–µ—Ä–µ–±—É–≤–∞–ª–∏:' in cell_text.lower():
                        # –ü–∞—Ä—Å–∏–º–æ –ü–Ü–ë –ø—ñ—Å–ª—è "–ø–µ—Ä–µ–±—É–≤–∞–ª–∏:" (–≤—Å—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –≤–∏–ø–ª–∞—Ç—É –∑–∞ —Ü–µ–π –¥–µ–Ω—å)
                        result = self._parse_person_row_from_text(event_date, cell_text, current_position, '–æ–±—Å—Ç—Ä—ñ–ª')
                        if result > 0:
                            people_found += result
                        continue
                    
                    # –®—É–∫–∞—î–º–æ –±–ª–æ–∫ –ø—Ä–∏–±—É–ª–∏:/–≤–∏–±—É–ª–∏: (–º–æ–∂–µ –±—É—Ç–∏ –≤ —Ç–æ–º—É –∂ —Ä—è–¥–∫—É —â–æ —ñ –ø–æ–∑–∏—Ü—ñ—è)
                    if '–ø—Ä–∏–±—É–ª–∏:' in cell_text.lower():
                        current_block = '–ø—Ä–∏–±—É–≤'
                        
                        # –ü–∞—Ä—Å–∏–º–æ –ü–Ü–ë –∑ —Ü—å–æ–≥–æ –∂ —Ä—è–¥–∫–∞
                        if current_position:
                            result = self._parse_person_row_from_text(event_date, cell_text, current_position, current_block)
                            if result > 0:
                                people_found += result
                    
                    if '–≤–∏–±—É–ª–∏:' in cell_text.lower():
                        current_block = '–≤–∏–±—É–≤'
                        
                        # –ü–∞—Ä—Å–∏–º–æ –ü–Ü–ë –∑ —Ü—å–æ–≥–æ –∂ —Ä—è–¥–∫–∞
                        if current_position:
                            result = self._parse_person_row_from_text(event_date, cell_text, current_position, current_block)
                            if result > 0:
                                people_found += result

                    if '—à—Ç—É—Ä–º–∞–Ω:' in cell_text.lower():
                        current_block = '—à—Ç—É—Ä–º–∞–Ω'

                        if current_position:
                            result = self._parse_person_row_from_text(event_date, cell_text, current_position, current_block)
                            if result > 0:
                                people_found += result
            
        except Exception as e:
            self.errors.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Word —Ñ–∞–π–ª—É {Path(file_path).name}: {str(e)}")
            import traceback
            traceback.print_exc()

    def _is_position_header(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ü–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –ø–æ–∑–∏—Ü—ñ—î—é"""
        # –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –ø–æ–∑–∏—Ü—ñ—ó –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–±—É–¥—å-—è–∫—É)
        text_lower = text.lower()
        for position in self.position_payments.keys():
            if position.lower() in text_lower:
                return True
        return False

    def _extract_position(self, text: str) -> str:
        """–í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –ø–æ–∑–∏—Ü—ñ—ó –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        text_lower = text.lower()
        for position in self.position_payments.keys():
            if position.lower() in text_lower:
                return position
        return text.strip()

    def _parse_person_row_from_text(self, event_date: date, content_text: str, position: str, block: str) -> int:
        """
        –ü–∞—Ä—Å–∏—Ç—å –ü–Ü–ë –∑ —Ç–µ–∫—Å—Ç—É –∫–æ–º—ñ—Ä–∫–∏ Word.
        
        Args:
            event_date: –î–∞—Ç–∞ –ø–æ–¥—ñ—ó (–∑ —Ç–∞–±–ª–∏—Ü—ñ Word)
            content_text: –¢–µ–∫—Å—Ç –∑ –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫..."
            position: –ü–æ–∑–∏—Ü—ñ—è
            block: –ë–ª–æ–∫ (–ø—Ä–∏–±—É–≤/–≤–∏–±—É–≤/–æ–±—Å—Ç—Ä—ñ–ª)
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ü–Ü–ë
        """
        found_count = 0
        
        try:
            if not hasattr(self, 'check_year') or not hasattr(self, 'check_month'):
                self.check_year = event_date.year
                self.check_month = event_date.month

            lines = content_text.split('\n')

            if block == '–æ–±—Å—Ç—Ä—ñ–ª':
                target_marker = '–ø–µ—Ä–µ–±—É–≤–∞–ª–∏:'
            elif block == '–ø—Ä–∏–±—É–≤':
                target_marker = '–ø—Ä–∏–±—É–ª–∏:'
            elif block == '—à—Ç—É—Ä–º–∞–Ω':
                target_marker = '—à—Ç—É—Ä–º–∞–Ω:'
            else:
                target_marker = '–≤–∏–±—É–ª–∏:'

            collecting = False
            for line in lines:
                line = line.strip()
                if not line:
                    continue

                normalized = line.lower()

                if target_marker in normalized:
                    collecting = True
                    continue

                if collecting and (
                    '–ø—Ä–∏–±—É–ª–∏:' in normalized or
                    '–≤–∏–±—É–ª–∏:' in normalized or
                    '–≤–æ–¥—ñ–π:' in normalized or
                    '—à—Ç—É—Ä–º–∞–Ω:' in normalized
                ):
                    break

                if not collecting:
                    continue

                if '–ø—Ä–æ–≤–µ–¥–µ–Ω–æ' in normalized or '—Ä–æ—Ç–∞—Ü' in normalized:
                    continue

                if len(line) < 5:
                    continue

                pib = line

                if block in ('–æ–±—Å—Ç—Ä—ñ–ª', '—à—Ç—É—Ä–º–∞–Ω'):
                    date_arrival = event_date
                    date_departure = event_date
                else:
                    date_arrival = event_date if block == '–ø—Ä–∏–±—É–≤' else None
                    date_departure = event_date if block == '–≤–∏–±—É–≤' else None

                if pib not in self.zbd_data:
                    self.zbd_data[pib] = []

                self.zbd_data[pib].append((position, block, date_arrival, date_departure))

                pib_normalized = self._normalize_pib(pib)
                self.pib_index[pib_normalized] = pib

                found_count += 1

                if found_count == 1:
                    print(f"        ‚Üí –ü–Ü–ë –ø—Ä–∏–∫–ª–∞–¥: '{pib_normalized}'")

            return found_count

        except Exception:
            return 0

    def _parse_person_row(self, cells, position: str, block: str) -> bool:
        """
        –ü–∞—Ä—Å–∏—Ç—å —Ä—è–¥–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –ª—é–¥–∏–Ω—É –∑ —Ç–∞–±–ª–∏—Ü—ñ Word.
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ Word:
        - –ö–æ–ª–æ–Ω–∫–∞ 0: –î–∞—Ç–∞, —á–∞—Å (–ø—É–Ω–∫—Ç 1)
        - –ö–æ–ª–æ–Ω–∫–∞ 1: –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫... (–ø—É–Ω–∫—Ç 2) - —Ç—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –ø—Ä–∏–±—É–ª–∏:/–≤–∏–±—É–ª–∏: —Ç–∞ –ü–Ü–ë
        - –ö–æ–ª–æ–Ω–∫–∞ 2: –ü—Ä–∏–º—ñ—Ç–∫–∞ (–ø—É–Ω–∫—Ç 3)
        
        –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            if len(cells) < 2:
                return False
            
            # –ü–Ü–ë –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –¥—Ä—É–≥—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ (—ñ–Ω–¥–µ–∫—Å 1) - "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–π—Å—å–∫..."
            # –í —Ü—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ —î –±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤, —à—É–∫–∞—î–º–æ –ü–Ü–ë (–ø—ñ—Å–ª—è –ø—Ä–∏–±—É–ª–∏:/–≤–∏–±—É–ª–∏:)
            cell_text = cells[1].text.strip()
            
            if not cell_text:
                return False
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏
            lines = cell_text.split('\n')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —à—É–∫–∞—î–º–æ –ü–Ü–ë
            found_block_marker = False
            for line in lines:
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not line or '–ø—Ä–æ–≤–µ–¥–µ–Ω–æ' in line.lower() or '—Ä–æ—Ç–∞—Ü' in line.lower():
                    continue
                
                # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –º–∞—Ä–∫–µ—Ä –±–ª–æ–∫—É
                if '–ø—Ä–∏–±—É–ª–∏:' in line.lower() or '–≤–∏–±—É–ª–∏:' in line.lower():
                    found_block_marker = True
                    continue
                
                # –Ø–∫—â–æ –º–∏ –ø—ñ—Å–ª—è –º–∞—Ä–∫–µ—Ä–∞ –±–ª–æ–∫—É —ñ —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ –ü–Ü–ë
                if found_block_marker and len(line) > 5:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –Ω–µ —ñ–Ω—à–∏–π –º–∞—Ä–∫–µ—Ä
                    if '–≤–æ–¥—ñ–π:' in line.lower() or '—à—Ç—É—Ä–º–∞–Ω:' in line.lower():
                        break
                    
                    # –¶–µ –ü–Ü–ë - –¥–æ–¥–∞—î–º–æ
                    pib = line
                    
                    # –®—É–∫–∞—î–º–æ –¥–∞—Ç–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ "–î–∞—Ç–∞, —á–∞—Å" (—ñ–Ω–¥–µ–∫—Å 0)
                    date_text = cells[0].text.strip() if len(cells) > 0 else ''
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É (–±–µ–∑ —á–∞—Å—É)
                    date_match = re.search(r'(\d{1,2}\.\d{1,2}\.\d{4})', date_text)
                    event_date = self._parse_date(date_match.group(1)) if date_match else None
                    
                    # –î–ª—è –±–ª–æ–∫—É "–ø—Ä–∏–±—É–≤" - —Ü–µ –¥–∞—Ç–∞ –ø—Ä–∏–±—É—Ç—Ç—è
                    # –î–ª—è –±–ª–æ–∫—É "–≤–∏–±—É–≤" - —Ü–µ –¥–∞—Ç–∞ –≤–∏–±—É—Ç—Ç—è
                    date_arrival = event_date if block == '–ø—Ä–∏–±—É–≤' else None
                    date_departure = event_date if block == '–≤–∏–±—É–≤' else None
                    
                    # –î–æ–¥–∞—î–º–æ –¥–æ –¥–∞–Ω–∏—Ö
                    if pib not in self.zbd_data:
                        self.zbd_data[pib] = []
                    
                    self.zbd_data[pib].append((position, block, date_arrival, date_departure))
                    return True
            
            return False
            
        except Exception as e:
            return False  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä—è–¥–∫–∏

    def _parse_date(self, date_str: str) -> Optional[date]:
        """–ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
        if not date_str or date_str == '-':
            return None
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏
        date_str = date_str.strip().replace('\n', ' ')
        
        # –§–æ—Ä–º–∞—Ç–∏: DD.MM.YYYY, DD.MM.YY
        patterns = [
            r'(\d{1,2})\.(\d{1,2})\.(\d{4})',
            r'(\d{1,2})\.(\d{1,2})\.(\d{2})',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, date_str)
            if match:
                day = int(match.group(1))
                month = int(match.group(2))
                year = int(match.group(3))
                
                if year < 100:
                    year += 2000
                
                try:
                    return date(year, month, day)
                except:
                    pass
        
        return None

    def _check_tabel(self, wb: Workbook, excel_file: str, output_path: str) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞–±–µ–ª—å –∑–≥—ñ–¥–Ω–æ –¥–∞–Ω–∏—Ö –ñ–ë–î"""
        ws = wb.active
        
        # –ß–∏—Ç–∞—î–º–æ –¥–∞—Ç–∏ –∑ E1:AI1
        dates = []
        for col in range(5, 36):  # E –¥–æ AI (5 –¥–æ 35)
            cell_value = ws.cell(1, col).value
            if cell_value:
                # –°–ü–û–ß–ê–¢–ö–£ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–º–µ—Ä –¥–Ω—è (1-31)
                parsed_date = None
                try:
                    day_number = int(cell_value)
                    if 1 <= day_number <= 31 and self.check_year and self.check_month:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç—É –∑ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Ä–æ–∫—É/–º—ñ—Å—è—Ü—è
                        parsed_date = date(self.check_year, self.check_month, day_number)
                        dates.append((col, parsed_date))
                        if len(dates) <= 3:  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–∏—Ö 3 –¥–∞—Ç
                            print(f"  [DEBUG] –ö–æ–ª–æ–Ω–∫–∞ {col}: –¥–µ–Ω—å {day_number} ‚Üí {parsed_date.strftime('%d.%m.%Y')}")
                except (ValueError, TypeError):
                    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —è–∫ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –¥–∞—Ç—É
                    parsed_date = self._parse_date_header(cell_value)
                    if parsed_date:
                        dates.append((col, parsed_date))
        
        print(f"  üìÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(dates)} –¥–∞—Ç —É —Ç–∞–±–µ–ª—ñ")
        print(f"  üìÖ –ú—ñ—Å—è—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {self.check_month}/{self.check_year}")
        print(f"  üë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(self.zbd_data)} –ü–Ü–ë —É –ñ–ë–î")
        
        # –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ 5 –ü–Ü–ë –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if self.zbd_data:
            print(f"  üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ü–Ü–ë:")
            for i, pib in enumerate(list(self.zbd_data.keys())[:5], 1):
                print(f"    {i}. {pib}")
        
        # –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ 5 –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ü–Ü–ë –∑ —ñ–Ω–¥–µ–∫—Å—É
        if self.pib_index:
            print(f"  üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ü–Ü–ë (—ñ–Ω–¥–µ–∫—Å):")
            for i, (norm_pib, orig_pib) in enumerate(list(self.pib_index.items())[:5], 1):
                print(f"    {i}. '{norm_pib}' ‚Üí '{orig_pib}'")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        wb_result = load_workbook(excel_file, data_only=False)
        ws_result = wb_result.active
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –ü–Ü–ë —É —Ç–∞–±–µ–ª—ñ
        row_num = 2
        people_checked = 0
        people_not_found = 0
        
        while True:
            pib_cell = ws.cell(row_num, 3)  # –ö–æ–ª–æ–Ω–∫–∞ C
            pib = pib_cell.value
            
            if not pib:
                break
            
            pib = str(pib).strip()
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ—ó –ª—é–¥–∏–Ω–∏
            if people_checked == 0:
                print(f"\n  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ–≥–æ –ü–Ü–ë: '{pib}'")
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ü–Ü–ë: —Å–ø–æ—á–∞—Ç–∫—É —Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫, –ø–æ—Ç—ñ–º –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
            found_pib = None
            if pib in self.zbd_data:
                found_pib = pib
                if people_checked == 0:
                    print(f"    ‚úì –ó–Ω–∞–π–¥–µ–Ω–æ (—Ç–æ—á–Ω–∏–π –∑–±—ñ–≥)")
            else:
                # –ü—Ä–æ–±—É—î–º–æ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫
                pib_normalized = self._normalize_pib(pib)
                if pib_normalized in self.pib_index:
                    found_pib = self.pib_index[pib_normalized]
                    if people_checked == 0:
                        print(f"    ‚úì –ó–Ω–∞–π–¥–µ–Ω–æ (–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è)")
                else:
                    if people_checked == 0:
                        print(f"    ‚úó –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ñ–ë–î")
            
            if found_pib is None:
                people_not_found += 1
            
            self._check_person_in_tabel(ws, ws_result, row_num, pib, dates, found_pib)
            people_checked += 1
            row_num += 1
        
        print(f"\n  üìä –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {people_checked} –ü–Ü–ë")
        print(f"  ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ñ–ë–î: {people_not_found}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        wb_result.save(output_path)
        wb_result.close()
        print(f"  üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")

    def _parse_date_header(self, value) -> Optional[date]:
        """–ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–µ–ª—é"""
        if isinstance(value, datetime):
            return value.date()
        elif isinstance(value, date):
            return value
        elif isinstance(value, (int, float)):
            # Excel date number
            try:
                return datetime(1899, 12, 30) + timedelta(days=int(value))
            except:
                pass
        elif isinstance(value, str):
            return self._parse_date(value)
        
        return None

    def _check_person_in_tabel(self, ws, ws_result, row_num: int, pib: str, dates: List[Tuple[int, date]], found_pib: Optional[str]) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–¥–Ω—É –ª—é–¥–∏–Ω—É –≤ —Ç–∞–±–µ–ª—ñ
        
        Args:
            ws: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞—Ä–∫—É—à
            ws_result: –ê—Ä–∫—É—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            row_num: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞
            pib: –ü–Ü–ë –∑ —Ç–∞–±–µ–ª—é (–±–µ–∑ –∑–≤–∞–Ω–Ω—è)
            dates: –°–ø–∏—Å–æ–∫ –¥–∞—Ç —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
            found_pib: –ü–Ü–ë –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ñ–ë–î (–∑—ñ –∑–≤–∞–Ω–Ω—è–º) –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ü–Ü–ë —É –ñ–ë–î
        if found_pib is None:
            # –ü–Ü–ë –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–∑–Ω–∞—á–∞—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–º
            ws_result.cell(row_num, 3).fill = PatternFill(start_color='FFCCCC', end_color='FFCCCC', fill_type='solid')
            self.errors.append(f"–ü–Ü–ë –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ñ–ë–î: {pib}")
            return
        
        # –ü–Ü–ë –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–∑–Ω–∞—á–∞—î–º–æ –∑–µ–ª–µ–Ω–∏–º
        ws_result.cell(row_num, 3).fill = PatternFill(start_color='CCFFCC', end_color='CCFFCC', fill_type='solid')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ñ–ë–î (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ found_pib –∑—ñ –∑–≤–∞–Ω–Ω—è–º)
        person_records = self.zbd_data[found_pib]
        
        # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ü–Ü–ë –¥–ª—è –¥–µ–±–∞–≥—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ _get_expected_payment)
        self._current_pib = pib

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –¥–∞—Ç—É –≤ —Ç–∞–±–µ–ª—ñ
        first_date_logged = False
        for col, check_date in dates:
            expected_payment_raw = self._get_expected_payment(person_records, check_date)
            expected_payment = self._normalize_payment_value(expected_payment_raw)

            actual_cell_value = ws.cell(row_num, col).value
            actual_payment_raw = str(actual_cell_value).strip() if actual_cell_value is not None else None
            actual_payment = self._normalize_payment_value(actual_cell_value)

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ—ó –¥–∞—Ç–∏ –ø–µ—Ä—à–æ—ó –ª—é–¥–∏–Ω–∏
            if not first_date_logged and row_num == 2:
                print(f"    [DEBUG] –ü–æ—à—É–∫ –≤–∏–ø–ª–∞—Ç–∏: –ü–Ü–ë —Ä—è–¥–æ–∫ {row_num}, –¥–∞—Ç–∞ {check_date.strftime('%d.%m.%Y')}, –∫–æ–ª–æ–Ω–∫–∞ {col}")
                print(f"    [DEBUG] –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞ (raw): '{expected_payment_raw}' ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: '{expected_payment}'")
                print(f"    [DEBUG] –§–∞–∫—Ç–∏—á–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞ –≤ —Ç–∞–±–µ–ª—ñ (raw): '{actual_payment_raw}' ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: '{actual_payment}'")
                print(f"    [DEBUG] –ó–±—ñ–≥: {expected_payment == actual_payment}")
                first_date_logged = True

            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –† –∞–±–æ –ó–í–† (–∑–∞–ª–∏—à–∞—î–º–æ –±—ñ–ª–µ)
            if expected_payment in ['–†', '–ó–í–†']:
                continue
            
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ
            if expected_payment != actual_payment:
                if expected_payment is None:
                    if actual_payment is None:
                        ws_result.cell(row_num, col).fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')
                        continue

                    if actual_payment in ['–†', '–ó–í–†']:
                        ws_result.cell(row_num, col).fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')
                        continue

                    if actual_payment not in ['–ë', '–ù']:
                        ws_result.cell(row_num, col).fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')
                        continue

                # –ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞ - –ø–æ–∑–Ω–∞—á–∞—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–º
                ws_result.cell(row_num, col).fill = PatternFill(start_color='FFCCCC', end_color='FFCCCC', fill_type='solid')
                expected_err = expected_payment if expected_payment is not None else expected_payment_raw
                actual_err = actual_payment if actual_payment is not None else actual_payment_raw
                self.errors.append(f"{pib}, –¥–∞—Ç–∞ {check_date}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å '{expected_err}', –∑–Ω–∞–π–¥–µ–Ω–æ '{actual_err}'")
            else:
                # –í—ñ—Ä–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞ - –ø–æ–∑–Ω–∞—á–∞—î–º–æ –∑–µ–ª–µ–Ω–∏–º
                if expected_payment is not None:  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∞—î –±—É—Ç–∏ –≤–∏–ø–ª–∞—Ç–∞
                    ws_result.cell(row_num, col).fill = PatternFill(start_color='CCFFCC', end_color='CCFFCC', fill_type='solid')

        # –°–∫–∏–¥–∞—î–º–æ –¥–µ–±–∞–≥-–ø–æ–ª–µ
        self._current_pib = None

    def _get_expected_payment(self, records: List[Tuple[str, str, Optional[date], Optional[date]]], check_date: date) -> Optional[str]:
        """–í–∏–∑–Ω–∞—á–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–ø–ª–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏"""

        if isinstance(check_date, datetime):
            check_date = check_date.date()

        if self.check_month is None or self.check_year is None:
            self.check_year = check_date.year
            self.check_month = check_date.month

        current_pib = getattr(self, '_current_pib', '–Ω–µ–≤—ñ–¥–æ–º–æ')
        print(f"\n    [DEBUG] === –ü–æ—à—É–∫ –≤–∏–ø–ª–∞—Ç–∏ –¥–ª—è '{current_pib}' –Ω–∞ {check_date.strftime('%d.%m.%Y')} ===")
        print(f"    [DEBUG] –ó–∞–ø–∏—Å—ñ–≤ —É –ñ–ë–î –¥–ª—è —Ü—ñ—î—ó –ª—é–¥–∏–Ω–∏: {len(records)}")

        def _log_record(idx: int, position: str, block: str, date_arrival: Optional[date], date_departure: Optional[date]) -> None:
            print(f"    [DEBUG] –ó–∞–ø–∏—Å #{idx+1}: –ø–æ–∑–∏—Ü—ñ—è='{position}', –±–ª–æ–∫='{block}'")
            print(f"    [DEBUG]   –ü—Ä–∏–±—É—Ç—Ç—è: {date_arrival.strftime('%d.%m.%Y') if isinstance(date_arrival, date) else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
            print(f"    [DEBUG]   –í–∏–±—É—Ç—Ç—è: {date_departure.strftime('%d.%m.%Y') if isinstance(date_departure, date) else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")

        departures_by_position: Dict[str, List[date]] = {}
        arrivals_by_position: Dict[str, List[date]] = {}
        for position, block, _date_arrival, date_departure in records:
            if block == '–≤–∏–±—É–≤' and isinstance(date_departure, date):
                departures_by_position.setdefault(position, []).append(date_departure)
            if block == '–ø—Ä–∏–±—É–≤' and isinstance(_date_arrival, date):
                arrivals_by_position.setdefault(position, []).append(_date_arrival)

        for pos in departures_by_position:
            departures_by_position[pos].sort()
        for pos in arrivals_by_position:
            arrivals_by_position[pos].sort()

        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –æ–±—Å—Ç—Ä—ñ–ª—ñ–≤, —â–æ–± –≤–æ–Ω–∏ –º–∞–ª–∏ –Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        priority_blocks = ('–æ–±—Å—Ç—Ä—ñ–ª', '—à—Ç—É—Ä–º–∞–Ω')

        for priority in priority_blocks:
            for idx, (position, block, date_arrival, date_departure) in enumerate(records):
                if block != priority:
                    continue

                _log_record(idx, position, block, date_arrival, date_departure)

                if priority == '–æ–±—Å—Ç—Ä—ñ–ª':
                    print(f"    [DEBUG]   üí• –û–±—Å—Ç—Ä—ñ–ª: –¥–∞—Ç–∞ –ø–æ–¥—ñ—ó {date_arrival.strftime('%d.%m.%Y') if isinstance(date_arrival, date) else '–Ω–µ–≤—ñ–¥–æ–º–∞'}")
                    print(f"    [DEBUG]      –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É {check_date.strftime('%d.%m.%Y')}")

                    if date_arrival and date_arrival == check_date:
                        payment = self._lookup_payment(position)
                        print(f"    [DEBUG]   ‚Üí ‚úì –ó–±—ñ–≥ –¥–∞—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∏–ø–ª–∞—Ç—É '{payment}'")
                        return payment

                    print(f"    [DEBUG]   ‚Üí ‚úó –Ü–Ω—à–∞ –¥–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É")
                else:
                    one_day_event = date_arrival or date_departure
                    print(f"    [DEBUG]   üß≠ –®—Ç—É—Ä–º–∞–Ω: –¥–∞—Ç–∞ –ø–æ–¥—ñ—ó {one_day_event.strftime('%d.%m.%Y') if isinstance(one_day_event, date) else '–Ω–µ–≤—ñ–¥–æ–º–∞'}")
                    print(f"    [DEBUG]      –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É {check_date.strftime('%d.%m.%Y')}")

                    if one_day_event and one_day_event == check_date:
                        payment = self._lookup_payment(position)
                        print(f"    [DEBUG]   ‚Üí ‚úì –û–¥–Ω–æ–¥–µ–Ω–Ω–∏–π –∑–∞–ø–∏—Å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∏–ø–ª–∞—Ç—É '{payment}'")
                        return payment

                    print(f"    [DEBUG]   ‚Üí ‚úó –Ü–Ω—à–∞ –¥–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É")

        # –î–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ –∑–∞–ø–∏—Å–∏ (–ø—Ä–∏–±—É—Ç—Ç—è/–≤–∏–±—É—Ç—Ç—è)
        for idx, (position, block, date_arrival, date_departure) in enumerate(records):
            if block in priority_blocks:
                continue

            _log_record(idx, position, block, date_arrival, date_departure)

            start_date = date_arrival if date_arrival else date(self.check_year, self.check_month, 1)
            end_date = date_departure if date_departure else self._get_last_day_of_month()

            if block == '–ø—Ä–∏–±—É–≤' and isinstance(date_arrival, date):
                possible_departures = [dep for dep in departures_by_position.get(position, []) if dep >= date_arrival]
                if possible_departures:
                    matched_departure = possible_departures[0]
                    if matched_departure < end_date:
                        print(f"    [DEBUG]   ‚Üí –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π '–≤–∏–±—É–≤' {matched_departure.strftime('%d.%m.%Y')} –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó '{position}', –æ–±–º–µ–∂—É—î–º–æ –ø–µ—Ä—ñ–æ–¥")
                        end_date = matched_departure

            if block == '–≤–∏–±—É–≤' and not date_arrival:
                if isinstance(date_departure, date):
                    possible_arrivals = [arr for arr in arrivals_by_position.get(position, []) if arr <= date_departure]
                    if possible_arrivals:
                        inferred_arrival = possible_arrivals[-1]
                        print(f"    [DEBUG]   ‚ö†Ô∏è '–í–∏–±—É–≤' –±–µ–∑ –ø—Ä–∏–±—É—Ç—Ç—è ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–±—É–≤ {inferred_arrival.strftime('%d.%m.%Y')} –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó '{position}'")
                        start_date = inferred_arrival
                    else:
                        print(f"    [DEBUG]   ‚ö†Ô∏è '–í–∏–±—É–≤' –±–µ–∑ –ø—Ä–∏–±—É—Ç—Ç—è ‚Üí —Å—Ç–∞—Ä—Ç –∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è")
                else:
                    print(f"    [DEBUG]   ‚ö†Ô∏è '–í–∏–±—É–≤' –±–µ–∑ –ø—Ä–∏–±—É—Ç—Ç—è ‚Üí —Å—Ç–∞—Ä—Ç –∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è")
            if block == '–ø—Ä–∏–±—É–≤' and not date_departure:
                print(f"    [DEBUG]   ‚ÑπÔ∏è '–ü—Ä–∏–±—É–≤' –±–µ–∑ –≤–∏–±—É—Ç—Ç—è ‚Üí –¥–æ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è")

            month_start = date(self.check_year, self.check_month, 1)
            month_end = self._get_last_day_of_month()
            if start_date < month_start:
                start_date = month_start
            if end_date > month_end:
                end_date = month_end

            print(f"    [DEBUG]   ‚Üí –ü–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
            print(f"    [DEBUG]   ‚Üí –î–∞—Ç–∞ –≤ –ø–µ—Ä—ñ–æ–¥—ñ? {start_date <= check_date <= end_date}")

            if start_date <= check_date <= end_date:
                payment = self._lookup_payment(position)
                print(f"    [DEBUG]   ‚Üí ‚úì –î–∞—Ç–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–µ—Ä—ñ–æ–¥—É, –≤–∏–ø–ª–∞—Ç–∞ '{payment}'")
                if payment is None:
                    print(f"    [DEBUG]   ‚Üí ‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è '{position}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
                    print(f"    [DEBUG]   ‚Üí –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó: {list(self.position_payments.keys())[:5]}")
                return payment

            print(f"    [DEBUG]   ‚Üí ‚úó –î–∞—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É –ø–µ—Ä—ñ–æ–¥")

        print(f"    [DEBUG] === –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–∏–ø–ª–∞—Ç–∏ –Ω–µ–º–∞—î (None) ===\n")
        return None

    def _lookup_payment(self, position: Optional[str]) -> Optional[str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –º–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤"""

        if not position:
            return None

        candidates = [position, position.strip(), position.lower(), position.upper()]
        for key in candidates:
            if key and key in self.position_payments:
                return self.position_payments[key]

        return None

    def _get_last_day_of_month(self) -> date:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
        from calendar import monthrange
        from datetime import datetime
        
        # –Ø–∫—â–æ –º—ñ—Å—è—Ü—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π
        if self.check_month is None or self.check_year is None:
            now = datetime.now()
            check_year = self.check_year if self.check_year else now.year
            check_month = self.check_month if self.check_month else now.month
        else:
            check_year = self.check_year
            check_month = self.check_month
            
        last_day = monthrange(check_year, check_month)[1]
        return date(check_year, check_month, last_day)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ stdin
        config_json = sys.stdin.read()
        config = json.loads(config_json)

        word_files = config.get('word_files', [])
        excel_file = config.get('excel_file', '')
        config_excel = config.get('config_excel', None)
        output_file = config.get('output_file', '')
        log_file = config.get('log_file')

        if not word_files:
            print("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ Word —Ñ–∞–π–ª–∏")
            sys.exit(1)

        if not excel_file:
            print("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ Excel —Ñ–∞–π–ª")
            sys.exit(1)

        if not output_file:
            print("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
            sys.exit(1)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î Excel —Ñ–∞–π–ª
        if not Path(excel_file).exists():
            print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {excel_file}")
            sys.exit(1)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å Word —Ñ–∞–π–ª–∏
        for word_file in word_files:
            if not Path(word_file).exists():
                print(f"‚ùå Word —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {word_file}")
                sys.exit(1)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ)
        if config_excel and not Path(config_excel).exists():
            print(f"‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_excel}")
            sys.exit(1)

        if not log_file:
            log_file = str(Path(output_file).with_suffix('.log'))

        _set_log_file(log_file)
        print(f"‚ÑπÔ∏è –õ–æ–≥–∏ –¥—É–±–ª—é—é—Ç—å—Å—è —É —Ñ–∞–π–ª: {log_file}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ checker
        checker = ZBDChecker(config_excel=config_excel)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        result = checker.check_files(word_files, excel_file, output_file)
        
        if not result.get('success'):
            sys.exit(1)

    except json.JSONDecodeError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {str(e)}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        _set_log_file(None)


if __name__ == '__main__':
    main()
