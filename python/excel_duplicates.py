"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ Excel —Ñ–∞–π–ª–∞—Ö
–®—É–∫–∞—î –∑–∞–¥–≤–æ—î–Ω–Ω—è –ü–Ü–ë –≤ –ª–∏—Å—Ç–∞—Ö –ó–°, –ë–ó —Ç–∞ 3–±–°–ø–ü –ë–ó
"""

from typing import List, Dict, Tuple
from dataclasses import dataclass
from openpyxl import load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from text_utils import normalize_text


@dataclass
class DuplicateEntry:
    """–ó–∞–ø–∏—Å –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç"""
    sheet: str          # –ù–∞–∑–≤–∞ –ª–∏—Å—Ç–∞
    column: str         # –ö–æ–ª–æ–Ω–∫–∞ (D –∞–±–æ E)
    value: str          # –ó–Ω–∞—á–µ–Ω–Ω—è, —â–æ –¥—É–±–ª—é—î—Ç—å—Å—è
    rows: List[int]     # –°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤, –¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç
    count: int          # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å


# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–∏—Å—Ç—ñ–≤ —Ç–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
SHEETS_CONFIG = {
    '–ó–°': {
        'column': 'D',
        'col_idx': 4,
        'name': '–ó–°'
    },
    '–ë–ó': {
        'column': 'E',
        'col_idx': 5,
        'name': '–ë–ó'
    },
    '3–±–°–ø–ü –ë–ó': {
        'column': 'E',
        'col_idx': 5,
        'name': '3–±–°–ø–ü –ë–ó'
    }
}


def _normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é"""
    # remove_spaces=False, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –ü–Ü–ë
    return normalize_text(text, remove_spaces=False)


def _find_duplicates_in_sheet(ws: Worksheet, col_idx: int, start_row: int = 2) -> Dict[str, List[int]]:
    """
    –ó–Ω–∞–π—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ –ª–∏—Å—Ç–∞
    
    Args:
        ws: –õ–∏—Å—Ç Excel
        col_idx: –Ü–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ (1-based)
        start_row: –ó —è–∫–æ–≥–æ —Ä—è–¥–∫–∞ –ø–æ—á–∏–Ω–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2 - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ {–∑–Ω–∞—á–µ–Ω–Ω—è: [—Å–ø–∏—Å–æ–∫_—Ä—è–¥–∫—ñ–≤]}
    """
    values_map = {}
    
    for row_idx in range(start_row, ws.max_row + 1):
        cell = ws.cell(row=row_idx, column=col_idx)
        value = cell.value
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        if not value:
            continue
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç
        normalized = _normalize_text(value)
        
        if not normalized:
            continue
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
        if normalized not in values_map:
            values_map[normalized] = []
        values_map[normalized].append(row_idx)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–¥–µ –±—ñ–ª—å—à–µ 1 —Ä—è–¥–∫–∞)
    duplicates = {k: v for k, v in values_map.items() if len(v) > 1}
    
    return duplicates


def check_duplicates(workbook_path: str) -> Tuple[List[DuplicateEntry], str, Dict]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ —Ñ–∞–π–ª—ñ
    
    Args:
        workbook_path: –®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É
    
    Returns:
        (—Å–ø–∏—Å–æ–∫_–¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–ø—Ä–æ_–ø–æ–º–∏–ª–∫—É, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–Ω–∏–≥—É
        wb = load_workbook(workbook_path, data_only=True)
        
        all_duplicates = []
        total_duplicates = 0
        stats_by_sheet = {}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –ª–∏—Å—Ç
        for sheet_key, config in SHEETS_CONFIG.items():
            sheet_name = config['name']
            
            # –®—É–∫–∞—î–º–æ –ª–∏—Å—Ç
            if sheet_name not in wb.sheetnames:
                print(f"   ‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            ws = wb[sheet_name]
            col_idx = config['col_idx']
            col_letter = config['column']
            
            print(f"   üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—Å—Ç–∞ '{sheet_name}', –∫–æ–ª–æ–Ω–∫–∞ {col_letter}...")
            
            # –®—É–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            duplicates = _find_duplicates_in_sheet(ws, col_idx)
            
            sheet_dup_count = 0
            
            for value, rows in duplicates.items():
                # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ) –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
                original_value = ws.cell(row=rows[0], column=col_idx).value
                
                entry = DuplicateEntry(
                    sheet=sheet_name,
                    column=col_letter,
                    value=str(original_value),
                    rows=rows,
                    count=len(rows)
                )
                all_duplicates.append(entry)
                sheet_dup_count += 1
            
            stats_by_sheet[sheet_name] = sheet_dup_count
            total_duplicates += sheet_dup_count
            
            if sheet_dup_count > 0:
                print(f"      ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {sheet_dup_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
            else:
                print(f"      ‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        wb.close()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total': total_duplicates,
            'by_sheet': stats_by_sheet
        }
        
        return all_duplicates, "", stats
        
    except FileNotFoundError:
        return [], f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {workbook_path}", {}
    except Exception as e:
        return [], f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {str(e)}", {}


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    import sys
    
    if len(sys.argv) < 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python excel_duplicates.py <—à–ª—è—Ö_–¥–æ_—Ñ–∞–π–ª—É>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    duplicates, error, stats = check_duplicates(file_path)
    
    if error:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")
        sys.exit(1)
    
    print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–ï–†–ï–í–Ü–†–ö–ò –î–£–ë–õ–Ü–ö–ê–¢–Ü–í ===")
    print(f"–í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {stats['total']}")
    
    for sheet, count in stats['by_sheet'].items():
        print(f"  {sheet}: {count}")
    
    if duplicates:
        print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
        for dup in duplicates:
            rows_str = ", ".join(map(str, dup.rows))
            print(f"  [{dup.sheet}] –ö–æ–ª–æ–Ω–∫–∞ {dup.column}: ¬´{dup.value}¬ª ‚Äî —Ä—è–¥–∫–∏: {rows_str} ({dup.count} —Ä–∞–∑—ñ–≤)")
