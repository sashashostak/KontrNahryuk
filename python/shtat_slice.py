"""
Shtat Slice - –ù–∞—Ä—ñ–∑–∫–∞ —à—Ç–∞—Ç–Ω–æ-–ø–æ—Å–∞–¥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É –ø–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö
–†–æ–∑—Ä—ñ–∑–∞—î Excel —Ñ–∞–π–ª –∑—ñ —à—Ç–∞—Ç–∫–æ—é –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É

–õ–æ–≥—ñ–∫–∞ –Ω–∞—Ä—ñ–∑–∫–∏:
–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –≤–∏–∑–Ω–∞—á–µ–Ω–æ:
- –ù–∞–∑–≤—É —Ñ–∞–π–ª—É
- –ö–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ—à—É–∫—É
- –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤ –∫–æ–ª–æ–Ω—Ü—ñ
- –î–æ–¥–∞—Ç–∫–æ–≤—É –∫–æ–ª–æ–Ω–∫—É J –¥–ª—è –¥–µ—è–∫–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤

–°—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —Ñ–∞–π–ª–∏:
1 –†–°–ø–ü, 2 –†–°–ø–ü, 3 –†–°–ø–ü, –†–í–ü, –ú–ë, –†–ë–ø–°, –í–†–ï–ë, –†–ú–¢–ó, –ú–ü, –í–Ü, –í–ó, –í–†–°–ü

–ö–æ–∂–µ–Ω —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å:
- –†—è–¥–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –∑ –ø–æ–≤–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
- –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–æ–∫) –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–π
- –§—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
"""

import sys
import json
import os
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
import win32com.client
from datetime import datetime
import traceback


# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
SUBUNITS_CONFIG = [
    {
        'file_name': '1 –†–°–ø–ü',
        'search_column': 'C',  # –∫–æ–ª–æ–Ω–∫–∞ C (3)
        'search_text': '1 —Ä–æ—Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞ –±—Ä–æ–Ω–µ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞—Ö)',
        'additional_column': 'J',  # –∫–æ–ª–æ–Ω–∫–∞ J (10)
        'additional_text': '1 —Ä–æ—Ç'
    },
    {
        'file_name': '2 –†–°–ø–ü',
        'search_column': 'C',
        'search_text': '2 —Ä–æ—Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞ –±—Ä–æ–Ω–µ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞—Ö)',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '3 –†–°–ø–ü',
        'search_column': 'C',
        'search_text': '3 —Ä–æ—Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞ –±—Ä–æ–Ω–µ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞—Ö)',
        'additional_column': 'J',
        'additional_text': '3 —Ä–æ—Ç'
    },
    {
        'file_name': '–†–í–ü',
        'search_column': 'C',
        'search_text': '–†–æ—Ç–∞ –≤–æ–≥–Ω–µ–≤–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '–ú–ë',
        'search_column': 'C',
        'search_text': '–º—ñ–Ω–æ–º–µ—Ç–Ω–∞ –±–∞—Ç–∞—Ä–µ—è',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '–†–ë–ø–°',
        'search_column': 'C',
        'search_text': '–†–æ—Ç–∞ –±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏—Ö —Å–∏—Å—Ç–µ–º',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '–í–†–ï–ë',
        'search_column': 'D',  # –∫–æ–ª–æ–Ω–∫–∞ D (4)
        'search_text': '–í–∑–≤–æ–¥ —Ä–∞–¥—ñ–æ–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –±–æ—Ä–æ—Ç—å–±–∏',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '–†–ú–¢–ó',
        'search_column': 'C',
        'search_text': '–†–æ—Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è',
        'additional_column': 'J',
        'additional_text': '–†–ú–¢–ó',
        'additional_conditions': [
            {
                'column': 'D',
                'text': 'S-4 (–ª–æ–≥—ñ—Å—Ç–∏–∫–∞)',
                'force_secondary': True
            }
        ]
    },
    {
        'file_name': '–ú–ü',
        'search_column': 'D',
        'search_text': '–º–µ–¥–∏—á–Ω–∏–π –ø—É–Ω–∫—Ç',
        'additional_column': 'J',
        'additional_text': '–º–µ–¥–ø—É–Ω–∫—Ç'
    },
    {
        'file_name': '–í–Ü',
        'search_column': 'E',  # –∫–æ–ª–æ–Ω–∫–∞ E (5)
        'search_text': '–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤',
        'additional_column': None,
        'additional_text': None
    },
    {
        'file_name': '–í–ó',
        'search_column': 'D',
        'search_text': "–≤–∑–≤–æ–¥ –∑–≤'—è–∑–∫—É",
        'additional_column': None,
        'additional_text': None,
        'additional_conditions': [
            {
                'column': 'D',
                'text': "S-6 (–∑–≤'—è–∑–æ–∫)",
                'force_secondary': True
            }
        ]
    },
    {
        'file_name': '–í–†–°–ü',
        'search_column': 'D',
        'search_text': '–≤–∑–≤–æ–¥ —Ä–æ–∑–≤—ñ–¥–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è',
        'additional_column': None,
        'additional_text': None
    }
]


def col_letter_to_number(letter: str) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–æ–º–µ—Ä (A=1, B=2, ..., Z=26, AA=27)"""
    result = 0
    for char in letter.upper():
        result = result * 26 + (ord(char) - ord('A') + 1)
    return result


class ShtatSlicer:
    """–ö–ª–∞—Å –¥–ª—è –Ω–∞—Ä—ñ–∑–∫–∏ —à—Ç–∞—Ç–Ω–æ-–ø–æ—Å–∞–¥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É"""
    
    def __init__(self, input_file: str, output_folder: str):
        self.input_file = input_file
        self.output_folder = output_folder
        self.excel = None
        self.wb = None
        
    def log(self, message: str):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ stdout"""
        print(message, flush=True)
        
    def slice(self) -> Dict:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞—Ä—ñ–∑–∫–∏
        
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–æ–±–∫–∏
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            if not os.path.exists(self.input_file):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {self.input_file}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –≤–∏–≤–æ–¥—É
            os.makedirs(self.output_folder, exist_ok=True)
            
            self.log("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Excel...")
            self.excel = win32com.client.Dispatch("Excel.Application")
            self.excel.Visible = False
            self.excel.DisplayAlerts = False
            
            self.log(f"üìÇ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: {self.input_file}")
            self.wb = self.excel.Workbooks.Open(self.input_file)
            
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∞—Ä–∫—É—à "–ó–°"
            ws = self._find_sheet("–ó–°")
            if ws is None:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ "–ó–°", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –∞—Ä–∫—É—à
                self.log("‚ö†Ô∏è –ê—Ä–∫—É—à '–ó–°' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–µ—Ä—à–∏–π –∞—Ä–∫—É—à")
                ws = self.wb.Worksheets(1)
                self.log(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞—Ä–∫—É—à: '{ws.Name}'")
            else:
                self.log("üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à '–ó–°'")
            
            self.log("üìä –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—É...")
            
            # –ì—Ä—É–ø—É—î–º–æ —Ä—è–¥–∫–∏ –ø–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö
            subunits_data = self._group_by_subunits(ws)
            
            if not subunits_data:
                raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É —É —Ñ–∞–π–ª—ñ")
            
            self.log(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(subunits_data)} –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            created_files = []
            for subunit_name, rows_info in subunits_data.items():
                output_file = self._create_subunit_file(subunit_name, rows_info, ws)
                created_files.append(output_file)
                self.log(f"   ‚úì {subunit_name}: {len(rows_info['rows'])} —Ä—è–¥–∫—ñ–≤ ‚Üí {Path(output_file).name}")
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
            self.wb.Close(SaveChanges=False)
            self.excel.Quit()
            
            return {
                'success': True,
                'subunits_count': len(subunits_data),
                'files_created': len(created_files),
                'output_folder': self.output_folder,
                'files': created_files,
                'message': f'–°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_files)} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è {len(subunits_data)} –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤'
            }
            
        except Exception as e:
            self.log(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}")
            self.log(traceback.format_exc())
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Excel —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π
            try:
                if self.wb:
                    self.wb.Close(SaveChanges=False)
                if self.excel:
                    self.excel.Quit()
            except:
                pass
            
            return {
                'success': False,
                'error': str(e),
                'traceback': traceback.format_exc()
            }
    
    def _find_sheet(self, name: str):
        """–ó–Ω–∞–π—Ç–∏ –∞—Ä–∫—É—à –∑–∞ –Ω–∞–∑–≤–æ—é (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤)"""
        name_norm = name.strip().lower()
        for ws in self.wb.Worksheets:
            if ws.Name.strip().lower() == name_norm:
                return ws
        return None
    
    def _normalize_text(self, text) -> str:
        """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
        if text is None:
            return ""
        return str(text).strip().lower()
    
    def _group_by_subunits(self, ws) -> Dict[str, Dict[str, Any]]:
        """
        –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –ø–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö –∑–≥—ñ–¥–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        
        Args:
            ws: Worksheet –æ–±'—î–∫—Ç
            
        Returns:
            Dict[–Ω–∞–∑–≤–∞_–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É, {'rows': [...], 'order_map': {...}}]
        """
        subunits_data = {
            config['file_name']: {
                'primary': [],
                'secondary': [],
                'forced': []
            }
            for config in SUBUNITS_CONFIG
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Ä—è–¥–æ–∫
        last_row = ws.UsedRange.Rows.Count
        
        self.log(f"üìã –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫—ñ–≤ 1-{last_row}...")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        for row in range(2, last_row + 1):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            for config in SUBUNITS_CONFIG:
                file_name = config['file_name']
                search_col_letter = config['search_column']
                search_text = config['search_text']
                additional_col = config.get('additional_column')
                additional_text = config.get('additional_text')
                additional_conditions = config.get('additional_conditions', [])

                data_entry = subunits_data[file_name]
                primary_rows_ref = data_entry['primary']
                secondary_rows_ref = data_entry['secondary']
                forced_rows_ref = data_entry['forced']

                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–æ–º–µ—Ä
                search_col_num = col_letter_to_number(search_col_letter)

                # –ß–∏—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏
                cell_value = ws.Cells(row, search_col_num).Value
                cell_text = self._normalize_text(cell_value)
                search_text_norm = self._normalize_text(search_text)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —É–º–æ–≤—É
                main_match = search_text_norm in cell_text

                # –û—Å–Ω–æ–≤–Ω—ñ –∑–±—ñ–≥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É
                if main_match:
                    if row not in primary_rows_ref and row not in forced_rows_ref:
                        primary_rows_ref.append(row)
                        self.log(f"   ‚Üí {file_name}: —Ä—è–¥–æ–∫ {row} (–æ—Å–Ω–æ–≤–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞)")

                # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–æ—à—É–∫ ‚Äî –Ω–∞–∫–æ–ø–∏—á—É—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É
                if additional_col and additional_text:
                    add_col_num = col_letter_to_number(additional_col)
                    add_cell_value = ws.Cells(row, add_col_num).Value
                    add_cell_text = self._normalize_text(add_cell_value)
                    add_text_norm = self._normalize_text(additional_text)

                    if add_text_norm in add_cell_text:
                        if row not in primary_rows_ref and row not in secondary_rows_ref and row not in forced_rows_ref:
                            secondary_rows_ref.append(row)
                            self.log(f"   ‚Üí {file_name}: —Ä—è–¥–æ–∫ {row} (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ {additional_col}, –¥–æ–¥–∞–Ω–æ –≤ –∫—ñ–Ω–µ—Ü—å)")

                for condition in additional_conditions:
                    cond_column = condition.get('column')
                    cond_text = condition.get('text')
                    force_secondary = condition.get('force_secondary', False)

                    if not cond_column or not cond_text:
                        continue

                    cond_col_num = col_letter_to_number(cond_column)
                    cond_cell_value = ws.Cells(row, cond_col_num).Value
                    cond_cell_text = self._normalize_text(cond_cell_value)
                    cond_text_norm = self._normalize_text(cond_text)

                    if cond_text_norm in cond_cell_text:
                        if force_secondary:
                            removed_primary = False
                            removed_secondary = False

                            if row in primary_rows_ref:
                                primary_rows_ref.remove(row)
                                removed_primary = True

                            if row in secondary_rows_ref:
                                secondary_rows_ref.remove(row)
                                removed_secondary = True

                            if row not in forced_rows_ref:
                                forced_rows_ref.append(row)

                            if removed_primary or removed_secondary:
                                self.log(f"   ‚Üí {file_name}: —Ä—è–¥–æ–∫ {row} (–ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∫—ñ–Ω–µ—Ü—å —á–µ—Ä–µ–∑ –∫–æ–ª–æ–Ω–∫—É {cond_column})")
                            else:
                                self.log(f"   ‚Üí {file_name}: —Ä—è–¥–æ–∫ {row} (–∫–æ–ª–æ–Ω–∫–∞ {cond_column}, –¥–æ–¥–∞–Ω–æ –≤ –∫—ñ–Ω–µ—Ü—å)")
                        else:
                            if row not in primary_rows_ref and row not in secondary_rows_ref and row not in forced_rows_ref:
                                secondary_rows_ref.append(row)
                                self.log(f"   ‚Üí {file_name}: —Ä—è–¥–æ–∫ {row} (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —É–º–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ {cond_column}, –¥–æ–¥–∞–Ω–æ –≤ –∫—ñ–Ω–µ—Ü—å)")

        final_data = {}
        for name, data in subunits_data.items():
            primary_rows = sorted(data['primary'])
            secondary_rows = sorted(row for row in data['secondary'] if row not in primary_rows)
            forced_rows = sorted(row for row in data['forced'] if row not in primary_rows and row not in secondary_rows)

            ordered_rows = primary_rows + secondary_rows + forced_rows
            if ordered_rows:
                order_map = {
                    row_idx: order
                    for order, row_idx in enumerate(ordered_rows, start=1)
                }
                final_data[name] = {
                    'rows': ordered_rows,
                    'order_map': order_map
                }

        return final_data
    
    def _create_subunit_file(self, subunit_name: str, rows_info: Dict[str, Any], source_ws) -> str:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –∑ –ø–æ–≤–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        
        Args:
            subunit_name: –ù–∞–∑–≤–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            rows_info: –î–∞–Ω—ñ –ø—Ä–æ —Ä—è–¥–∫–∏ (–≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∞ –∫–∞—Ä—Ç–∞ –ø–æ—Ä—è–¥–∫—É)
            source_ws: –í–∏—Ö—ñ–¥–Ω–∏–π worksheet
            
        Returns:
            –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        """
        # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
        safe_name = self._sanitize_filename(subunit_name)

        # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –±–µ–∑ –¥–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É)
        output_filename = f"{safe_name}.xlsx"
        output_path = os.path.join(self.output_folder, output_filename)

        ordered_rows = rows_info['rows']
        order_map = rows_info['order_map']

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π workbook –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –∞—Ä–∫—É—à–∞, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –í–°–ï —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        self.log(f"      –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∞—Ä–∫—É—à–∞ –∑ –ø–æ–≤–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º...")
        source_ws.Copy()
        new_wb = self.excel.ActiveWorkbook
        new_ws = new_wb.Worksheets(1)
        new_ws.Name = safe_name

        # –î–æ–¥–∞—î–º–æ —Å–ª—É–∂–±–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å —ñ–∑ –ø–æ—Ä—è–¥–∫–æ–º —Ä—è–¥–∫—ñ–≤
        temp_col_index = new_ws.UsedRange.Columns.Count + 1
        new_ws.Cells(1, temp_col_index).Value = "_order"
        for row_idx, order_value in order_map.items():
            new_ws.Cells(row_idx, temp_col_index).Value = order_value

        # –í–∏–¥–∞–ª—è—î–º–æ —É—Å—ñ —Ä—è–¥–∫–∏, —è–∫—ñ –Ω–µ –Ω–∞–ª–µ–∂–∞—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É (–∫—Ä—ñ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        keep_rows = {1}
        keep_rows.update(ordered_rows)
        last_row_in_copy = new_ws.UsedRange.Rows.Count
        self.log("      –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö —Ä—è–¥–∫—ñ–≤...")
        for row_idx in range(last_row_in_copy, 0, -1):
            if row_idx not in keep_rows:
                new_ws.Rows(row_idx).Delete()

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞–ª–∏—à–µ–Ω—ñ —Ä—è–¥–∫–∏ –∑–∞ —Å–ª—É–∂–±–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º
        last_row_after_cleanup = new_ws.UsedRange.Rows.Count
        sort_range = new_ws.Range(new_ws.Cells(1, 1), new_ws.Cells(last_row_after_cleanup, temp_col_index))
        sort_range.Sort(Key1=new_ws.Cells(1, temp_col_index), Order1=1, Header=1)

        # –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å
        new_ws.Columns(temp_col_index).Delete()

        # –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤/–∫–æ–ª–æ–Ω–æ–∫
        last_col = new_ws.UsedRange.Columns.Count
        data_row_count = len(ordered_rows)

        # –†–æ–∑–∫—Ä–∏–≤–∞—î–º–æ —É—Å—ñ —Ä—è–¥–∫–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
        new_ws.Rows(f"1:{data_row_count + 1}").EntireRow.Hidden = False

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—è–¥–∫–æ–≤—ñ –Ω–æ–º–µ—Ä–∏ —É –∫–æ–ª–æ–Ω—Ü—ñ A (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1 –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ –¥–∞–Ω–∏—Ö)
        self.log("      –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—ó –Ω—É–º–µ—Ä–∞—Ü—ñ—ó —É –∫–æ–ª–æ–Ω—Ü—ñ A...")
        if data_row_count > 0:
            for index in range(1, data_row_count + 1):
                new_ws.Cells(index + 1, 1).Value = index
        else:
            # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î ‚Äì –æ—á–∏—â–∞—î–º–æ –Ω–æ–º–µ—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å
            new_ws.Cells(2, 1).Value = None

        # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ä–µ–∂–∏–º—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∞–±–∏ Excel –Ω–µ —Ñ—ñ–∫—Å—É–≤–∞–≤ –≤–µ—Å—å –¥—ñ–∞–ø–∞–∑–æ–Ω
        self.excel.CutCopyMode = False

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä –Ω–∞ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏
        self.log("      –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä—ñ–≤...")
        if data_row_count > 0:  # –Ñ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
            last_data_row = new_ws.UsedRange.Rows.Count
            filter_range = new_ws.Range(new_ws.Cells(1, 1), new_ws.Cells(last_data_row, last_col))
            filter_range.AutoFilter()

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ª–∏—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        new_ws.Range("A1").Select()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª –±–µ–∑ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
        self.log(f"      –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –±–µ–∑ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è: {output_filename}")
        new_wb.SaveAs(output_path)

        if data_row_count > 0:
            # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            self.log("      –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞...")
            self.excel.CutCopyMode = False
            new_wb.Activate()
            new_ws.Activate()

            window = self.excel.ActiveWindow
            if window is not None:
                try:
                    window.Split = False
                except AttributeError:
                    pass

                window.FreezePanes = False
                window.SplitRow = 0
                window.SplitColumn = 0

                new_ws.Range("A2").Select()
                window.SplitRow = 1
                window.SplitColumn = 0
                window.FreezePanes = True

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∫–æ–º—ñ—Ä–∫–∏ A1
            new_ws.Range("A1").Select()
        else:
            self.log("      –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–º–∞—î —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö)")

        # –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É
        self.log("      –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...")
        new_wb.Save()
        new_wb.Close(SaveChanges=False)
        
        return output_path
    
    def _sanitize_filename(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É"""
        # –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤
        invalid_chars = '<>:"/\\|?*'
        
        safe_name = name
        for char in invalid_chars:
            safe_name = safe_name.replace(char, '_')
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
        max_length = 100
        if len(safe_name) > max_length:
            safe_name = safe_name[:max_length]
        
        return safe_name.strip()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç—É"""
    try:
        # –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑—ñ stdin
        config_json = sys.stdin.read()
        config = json.loads(config_json)
        
        input_file = config.get('input_file')
        output_folder = config.get('output_folder')
        
        if not input_file:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª")
        if not output_folder:
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞–ø–∫—É –≤–∏–≤–æ–¥—É")
        
        print(f"\n{'='*60}")
        print("üî™ –®–¢–ê–¢_SLICE - –ù–∞—Ä—ñ–∑–∫–∞ —à—Ç–∞—Ç–∫–∏ –¥–ª—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤")
        print(f"{'='*60}\n")
        print(f"üì• –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: {input_file}")
        print(f"üì§ –ü–∞–ø–∫–∞ –≤–∏–≤–æ–¥—É: {output_folder}\n")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –Ω–∞—Ä—ñ–∑–∫—É
        slicer = ShtatSlicer(input_file, output_folder)
        result = slicer.slice()
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
        print(f"\n__RESULT__{json.dumps(result, ensure_ascii=False)}__END__")
        
        if result['success']:
            sys.exit(0)
        else:
            sys.exit(1)
            
    except Exception as e:
        error_result = {
            'success': False,
            'error': str(e),
            'traceback': traceback.format_exc()
        }
        print(f"\n__RESULT__{json.dumps(error_result, ensure_ascii=False)}__END__")
        sys.exit(1)


if __name__ == "__main__":
    main()
