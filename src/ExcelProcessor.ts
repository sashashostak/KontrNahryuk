/**
 * ExcelProcessor - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–Ω—è–º Excel —Ñ–∞–π–ª—ñ–≤
 * FIXED: –í–∏–Ω–µ—Å–µ–Ω–æ –∑ main.ts (—Ä—è–¥–∫–∏ 1580-2025)
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏ —Ç–∞ —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤
 * - –ó–∞–ø—É—Å–∫ —Ç–∞ –∑—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–±—Ä–æ–±–∫–∏
 * - –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
 * - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
 * 
 * @class ExcelProcessor
 */

import type { Mode, StartProcessPayload } from './types';
import { byId } from './helpers';

export class ExcelProcessor {
  private inputFolder: string = '';
  private destinationFile: string = '';
  private isProcessing: boolean = false;
  private foundFiles: string[] = [];

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î ExcelProcessor
   * FIXED: –ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å–ª—É—Ö–∞—á—ñ–≤ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
   */
  constructor() {
    this.setupEventListeners();
    this.loadSavedSettings();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   * FIXED: –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–∞ —á–µ–∫–±–æ–∫—Å–∏
   * @private
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
    const selectFolderBtn = byId('excel-select-folder');
    const inputFolderField = byId<HTMLInputElement>('excel-input-folder');
    
    selectFolderBtn?.addEventListener('click', async () => {
      try {
        const result = await window.api?.selectFolder?.();
        if (result?.filePath) {
          this.inputFolder = result.filePath;
          inputFolderField!.value = result.filePath;
          
          await this.scanForExcelFiles();
          this.updateProcessButton();
          this.logMessage(`üìÇ –û–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: ${result.filePath}`);
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`, 'error');
      }
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    const selectDestinationBtn = byId('excel-select-destination');
    const destinationFileField = byId<HTMLInputElement>('excel-destination-file');
    
    selectDestinationBtn?.addEventListener('click', async () => {
      try {
        // FIXED: –¢—É—Ç –±–∏ –±—É–≤ –≤–∏–∫–ª–∏–∫ –¥–æ API –¥–ª—è –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É
        // const result = await window.api?.selectExcelFile?.();
        
        // –ü–æ–∫–∏ —â–æ –µ–º—É–ª—é—î–º–æ –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É
        const mockResult = {
          filePath: 'C:\\Excel\\–ó–≤—ñ–¥–Ω–∞_—Ç–∞–±–ª–∏—Ü—è_2024.xlsx'
        };
        
        if (mockResult?.filePath) {
          this.destinationFile = mockResult.filePath;
          destinationFileField!.value = mockResult.filePath;
          this.updateProcessButton();
          this.logMessage(`üíæ –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${mockResult.filePath}`);
          this.saveDestinationSettings();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${error}`, 'error');
      }
    });

    // –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    const startBtn = byId('excel-start-processing');
    startBtn?.addEventListener('click', () => {
      this.startSummarizationProcessing();
    });

    // –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const stopBtn = byId('excel-stop-processing');
    stopBtn?.addEventListener('click', () => {
      this.stopProcessing();
    });

    // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    const clearLogsBtn = byId('excel-clear-logs');
    clearLogsBtn?.addEventListener('click', () => {
      this.clearLogs();
    });

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    const saveLogsBtn = byId('excel-save-logs');
    saveLogsBtn?.addEventListener('click', () => {
      this.saveLogs();
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ —á–µ–∫–±–æ–∫—Å–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
    const rememberFilenameCheckbox = byId<HTMLInputElement>('excel-remember-filename');
    rememberFilenameCheckbox?.addEventListener('change', () => {
      this.saveDestinationSettings();
    });

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
    const sliceCheckbox = byId<HTMLInputElement>('excel-slice-check');
    const mismatchesCheckbox = byId<HTMLInputElement>('excel-mismatches');
    const sanitizerCheckbox = byId<HTMLInputElement>('excel-sanitizer');
    
    sliceCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    mismatchesCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    sanitizerCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–∞–¥—ñ–æ-–∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º—É –∑–≤–µ–¥–µ–Ω–Ω—è
    const modeRadios = document.querySelectorAll('input[name="excel-mode"]');
    modeRadios.forEach(radio => {
      radio.addEventListener('change', () => this.saveSummarizationMode());
    });
  }

  /**
   * –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Excel —Ñ–∞–π–ª—ñ–≤
   * FIXED: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ API
   * @private
   */
  private async scanForExcelFiles(): Promise<void> {
    try {
      if (!this.inputFolder) {
        this.logMessage(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞`, 'error');
        return;
      }

      this.logMessage(`üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏: ${this.inputFolder}`);

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤
      const foundFiles = await window.api?.scanExcelFiles?.(this.inputFolder);
      
      if (foundFiles && foundFiles.length > 0) {
        this.foundFiles = foundFiles;
        this.displayFoundFiles();
        this.logMessage(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${this.foundFiles.length} Excel —Ñ–∞–π–ª—ñ–≤`);
      } else {
        this.foundFiles = [];
        this.displayFoundFiles();
        this.logMessage(`‚ÑπÔ∏è Excel —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—Ä–∞–Ω—ñ–π –ø–∞–ø—Ü—ñ`);
      }
      
      this.updateProcessButton();
    } catch (error) {
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤: ${error}`, 'error');
      this.foundFiles = [];
      this.displayFoundFiles();
    }
  }

  /**
   * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
   * FIXED: –ü—Ä–∏—Ö–æ–≤—É—î –æ–±–ª–∞—Å—Ç—å (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)
   * @private
   */
  private displayFoundFiles(): void {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)
    const filesPreview = byId('excel-files-preview');
    if (filesPreview) {
      filesPreview.style.display = 'none';
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É"
   * FIXED: –ê–∫—Ç–∏–≤—É—î/–¥–µ–∞–∫—Ç–∏–≤—É—î –∫–Ω–æ–ø–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
   * @private
   */
  private updateProcessButton(): void {
    const startBtn = byId<HTMLButtonElement>('excel-start-processing');
    // FIXED: –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ foundFiles.length, –æ—Å–∫—ñ–ª—å–∫–∏ –æ–±–ª–∞—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞
    const canProcess = this.inputFolder && this.destinationFile && !this.isProcessing;
    
    if (startBtn) {
      startBtn.disabled = !canProcess;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤
   * FIXED: –í–∞–ª—ñ–¥–∞—Ü—ñ—è, —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è payload, –≤–∏–∫–ª–∏–∫ API
   * @private
   */
  private async startSummarizationProcessing(): Promise<void> {
    if (this.isProcessing) return;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!this.inputFolder || !this.destinationFile) {
      this.logMessage('‚ùå –ù–µ –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ', 'error');
      return;
    }

    this.isProcessing = true;
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è
    const selectedMode = document.querySelector('input[name="excel-mode"]:checked') as HTMLInputElement;
    const mode: Mode = (selectedMode?.value as Mode) || '–û–±–∏–¥–≤–∞';
    
    this.logMessage(`üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–≤–µ–¥–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤. –†–µ–∂–∏–º: ${mode}`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
    const progressSection = byId('excel-progress');
    const startBtn = byId<HTMLButtonElement>('excel-start-processing');
    const stopBtn = byId<HTMLButtonElement>('excel-stop-processing');
    
    progressSection!.style.display = 'block';
    startBtn!.style.display = 'none';
    stopBtn!.style.display = 'inline-block';

    try {
      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ payload –¥–ª—è –∑–≤–µ–¥–µ–Ω–Ω—è
      const payload: StartProcessPayload = {
        srcFolder: this.inputFolder,
        dstPath: this.destinationFile,
        mode: mode,
        // dstSheetPassword: undefined, // –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ
        // configPath: undefined // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      };

      this.logMessage(`üìÅ –ü–∞–ø–∫–∞ –¥–∂–µ—Ä–µ–ª–∞: ${payload.srcFolder}`);
      this.logMessage(`üíæ –§–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${payload.dstPath}`);
      this.logMessage(`üìä –†–µ–∂–∏–º –æ–±—Ä–æ–±–∫–∏: ${payload.mode}`);

      // FIXED: Mock –æ–±—Ä–æ–±–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç—É—Ç –±–∏ –±—É–≤ –≤–∏–∫–ª–∏–∫ –¥–æ –Ω–æ–≤–æ–≥–æ API)
      await this.mockSummarizationProcess(payload);
      
    } catch (error) {
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤–µ–¥–µ–Ω–Ω—è: ${error}`, 'error');
    } finally {
      this.stopProcessing();
    }
  }

  /**
   * Mock –ø—Ä–æ—Ü–µ—Å –∑–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
   * FIXED: –ï–º—É–ª—è—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
   * @private
   */
  private async mockSummarizationProcess(payload: StartProcessPayload): Promise<void> {
    // Mock –ø—Ä–æ—Ü–µ—Å –∑–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    this.logMessage('üîß –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
    this.updateProgress(10, '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
    const sliceCheck = byId<HTMLInputElement>('excel-slice-check')?.checked || false;
    const mismatches = byId<HTMLInputElement>('excel-mismatches')?.checked || false;
    const sanitizer = byId<HTMLInputElement>('excel-sanitizer')?.checked || false;
    
    const activeOptions = [];
    if (sliceCheck) activeOptions.push('Slice_Check');
    if (mismatches) activeOptions.push('Mismatches');  
    if (sanitizer) activeOptions.push('Sanitizer');
    
    this.logMessage(`üîß –ê–∫—Ç–∏–≤–Ω—ñ –æ–ø—Ü—ñ—ó: ${activeOptions.join(', ')}`);
    
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∑–∞ —Ä–µ–∂–∏–º–∞–º–∏
    const modes = payload.mode === '–û–±–∏–¥–≤–∞' ? ['–ë–ó', '–ó–°'] : [payload.mode];
    let totalFiles = 0;
    let totalRows = 0;
    
    for (let i = 0; i < modes.length; i++) {
      const currentMode = modes[i];
      const progress = Math.round(((i + 1) / modes.length) * 80) + 10; // 10-90%
      
      this.logMessage(`üìÇ –†–µ–∂–∏–º ${i + 1}/${modes.length}: ${currentMode}`);
      this.updateProgress(progress, `–û–±—Ä–æ–±–∫–∞ —Ä–µ–∂–∏–º—É ${currentMode}`, `–†–µ–∂–∏–º ${i + 1}/${modes.length}`);
      
      // Mock –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–µ–∂–∏–º—É
      const rules = currentMode === '–ë–ó' 
        ? ['1–†–°–ø–ü', '2–†–°–ø–ü', '3–†–°–ø–ü', '–†–í–ü–°–ø–ü', '–ú–ë', '–†–ë–ø–°', '–í–†–°–ü', '–í–†–ï–ë', '–í–Ü', '–í–ó', '–†–ú–¢–ó', '–ú–ü', '1241']
        : ['1–†–°–ø–ü', '2–†–°–ø–ü', '3–†–°–ø–ü', '–†–í–ü–°–ø–ü', '–ú–ë', '–†–ë–ø–°', '–í–†–°–ü', '–í–†–ï–ë', '–í–Ü', '–í–ó', '–†–ú–¢–ó', '–ú–ü'];
      
      this.logMessage(`üìã –û–±—Ä–æ–±–∫–∞ ${rules.length} –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ä–µ–∂–∏–º—É ${currentMode}`);
      
      for (let j = 0; j < rules.length; j++) {
        if (!this.isProcessing) break;
        
        const rule = rules[j];
        this.logMessage(`üìÑ –ü—Ä–∞–≤–∏–ª–æ "${rule}": –ø–æ—à—É–∫ —Ñ–∞–π–ª—É...`);
        
        // –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∞ –æ–±—Ä–æ–±–∫–∏
        await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 700));
        
        if (Math.random() > 0.2) { // 80% —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
          const rows = Math.floor(Math.random() * 20) + 5;
          totalFiles++;
          totalRows += rows;
          this.logMessage(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ "${rule}": –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª, —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ ${rows} —Ä—è–¥–∫—ñ–≤`);
        } else {
          this.logMessage(`‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–æ "${rule}": —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'error');
        }
      }
      
      this.logMessage(`‚úÖ –†–µ–∂–∏–º "${currentMode}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
    
    // –§—ñ–Ω–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø
    this.updateProgress(95, '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤', '–ó–∞–ø–∏—Å —É —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    this.logMessage(`üéâ –ó–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
    this.logMessage(`üìà –ü—ñ–¥—Å—É–º–æ–∫: —Ñ–∞–π–ª—ñ–≤ - ${totalFiles}, —Ä—è–¥–∫—ñ–≤ - ${totalRows}`);
    this.logMessage(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${payload.dstPath}`);
    
    this.updateProgress(100, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', `–û–±—Ä–æ–±–ª–µ–Ω–æ ${modes.length} —Ä–µ–∂–∏–º(—ñ–≤)`);
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
   * FIXED: –°–∫–∏–¥–∞—î –ø—Ä–∞–ø–æ—Ä —Ç–∞ —Ö–æ–≤–∞—î –ø—Ä–æ–≥—Ä–µ—Å
   * @private
   */
  private stopProcessing(): void {
    this.isProcessing = false;
    
    const progressSection = byId('excel-progress');
    const startBtn = byId<HTMLButtonElement>('excel-start-processing');
    const stopBtn = byId<HTMLButtonElement>('excel-stop-processing');
    
    progressSection!.style.display = 'none';
    startBtn!.style.display = 'inline-block';
    stopBtn!.style.display = 'none';
    
    this.updateProcessButton();
    this.logMessage('‚èπÔ∏è –û–±—Ä–æ–±–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
   * FIXED: –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä —Ç–∞ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
   * @private
   */
  private updateProgress(percent: number, status: string, detail: string): void {
    const progressFill = byId('excel-progress-fill');
    const progressPercent = byId('excel-progress-percent');
    const progressStatus = byId('excel-progress-status');
    const progressDetail = byId('excel-progress-detail');
    
    if (progressFill) progressFill.style.width = `${percent}%`;
    if (progressPercent) progressPercent.textContent = `${percent}%`;
    if (progressStatus) progressStatus.textContent = status;
    if (progressDetail) progressDetail.textContent = detail;
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   * FIXED: –î–æ–¥–∞—î timestamp —Ç–∞ –µ–º–æ–¥–∑—ñ —ñ–∫–æ–Ω–∫–∏
   * @private
   */
  private logMessage(message: string, type: 'info' | 'error' = 'info'): void {
    const logsContent = byId('excel-logs-content');
    const timestamp = new Date().toLocaleTimeString('uk-UA');
    const prefix = type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    
    if (logsContent) {
      logsContent.textContent += `[${timestamp}] ${prefix} ${message}\n`;
      logsContent.scrollTop = logsContent.scrollHeight;
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
   * FIXED: –°–∫–∏–¥–∞—î –≤–º—ñ—Å—Ç –ª–æ–≥—ñ–≤
   * @private
   */
  private clearLogs(): void {
    const logsContent = byId('excel-logs-content');
    if (logsContent) {
      logsContent.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏...\n';
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —É —Ñ–∞–π–ª
   * FIXED: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∑ –ª–æ–≥–∞–º–∏
   * @private
   */
  private async saveLogs(): Promise<void> {
    try {
      const logsContent = byId('excel-logs-content')?.textContent || '';
      if (!logsContent.trim()) {
        this.logMessage('‚ö†Ô∏è –ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        return;
      }

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
      const filename = `excel-processing-logs-${timestamp}.txt`;
      
      // FIXED: –¢—É—Ç –±–∏ –±—É–≤ –≤–∏–∫–ª–∏–∫ –¥–æ electron API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      // const result = await window.api?.saveFile?.(filename, logsContent);
      
      this.logMessage(`üíæ –õ–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${filename}`);
    } catch (error) {
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤: ${error}`, 'error');
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   * FIXED: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ API
   * @private
   */
  private async loadSavedSettings(): Promise<void> {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const savedDestination = await window.api?.getSetting?.('excelDestinationFile', '');
      const destinationFileField = byId<HTMLInputElement>('excel-destination-file');
      
      if (destinationFileField && savedDestination) {
        destinationFileField.value = savedDestination;
        this.destinationFile = savedDestination;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞–Ω —á–µ–∫–±–æ–∫—Å–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const rememberDestination = await window.api?.getSetting?.('excelRememberDestination', true);
      const rememberDestinationCheckbox = byId<HTMLInputElement>('excel-remember-destination');
      
      if (rememberDestinationCheckbox) {
        rememberDestinationCheckbox.checked = rememberDestination;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
      const sliceCheck = await window.api?.getSetting?.('excelSliceCheck', true);
      const mismatches = await window.api?.getSetting?.('excelMismatches', true);
      const sanitizer = await window.api?.getSetting?.('excelSanitizer', true);
      
      const sliceCheckbox = byId<HTMLInputElement>('excel-slice-check');
      const mismatchesCheckbox = byId<HTMLInputElement>('excel-mismatches');
      const sanitizerCheckbox = byId<HTMLInputElement>('excel-sanitizer');
      
      if (sliceCheckbox) sliceCheckbox.checked = sliceCheck;
      if (mismatchesCheckbox) mismatchesCheckbox.checked = mismatches;
      if (sanitizerCheckbox) sanitizerCheckbox.checked = sanitizer;

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è
      const savedMode = await window.api?.getSetting?.('excelSummarizationMode', '–û–±–∏–¥–≤–∞');
      const modeRadio = byId<HTMLInputElement>(`excel-mode-${savedMode === '–ë–ó' ? 'bz' : savedMode === '–ó–°' ? 'zs' : 'both'}`);
      if (modeRadio) {
        modeRadio.checked = true;
      }

      this.logMessage('üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
   * FIXED: –ó–±–µ—Ä—ñ–≥–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —Ç–∞ —Ä–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è
   * @private
   */
  private async saveDestinationSettings(): Promise<void> {
    try {
      const rememberDestinationCheckbox = byId<HTMLInputElement>('excel-remember-destination');
      
      if (rememberDestinationCheckbox?.checked && this.destinationFile) {
        await window.api?.setSetting?.('excelDestinationFile', this.destinationFile);
      }
      
      await window.api?.setSetting?.('excelRememberDestination', rememberDestinationCheckbox?.checked || false);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è
      const selectedMode = document.querySelector<HTMLInputElement>('input[name="excel-mode"]:checked');
      if (selectedMode) {
        const mode = selectedMode.value === 'bz' ? '–ë–ó' : selectedMode.value === 'zs' ? '–ó–°' : '–û–±–∏–¥–≤–∞';
        await window.api?.setSetting?.('excelSummarizationMode', mode);
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ–∫–±–æ–∫—Å—ñ–≤
      const sliceCheck = byId<HTMLInputElement>('excel-slice-check')?.checked || false;
      const mismatches = byId<HTMLInputElement>('excel-mismatches')?.checked || false;
      const sanitizer = byId<HTMLInputElement>('excel-sanitizer')?.checked || false;
      
      await window.api?.setSetting?.('excelSliceCheck', sliceCheck);
      await window.api?.setSetting?.('excelMismatches', mismatches);
      await window.api?.setSetting?.('excelSanitizer', sanitizer);
      
    } catch (error) {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
   * FIXED: –ó–±–µ—Ä—ñ–≥–∞—î —á–µ–∫–±–æ–∫—Å–∏ –æ–ø—Ü—ñ–π
   * @private
   */
  private async saveProcessingSettings(): Promise<void> {
    try {
      const sliceCheck = byId<HTMLInputElement>('excel-slice-check')?.checked || false;
      const mismatches = byId<HTMLInputElement>('excel-mismatches')?.checked || false;
      const sanitizer = byId<HTMLInputElement>('excel-sanitizer')?.checked || false;
      
      await window.api?.setSetting?.('excelSliceCheck', sliceCheck);
      await window.api?.setSetting?.('excelMismatches', mismatches);
      await window.api?.setSetting?.('excelSanitizer', sanitizer);
      
      this.logMessage(`üíæ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: Slice_Check=${sliceCheck}, Mismatches=${mismatches}, Sanitizer=${sanitizer}`);
    } catch (error) {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –∑–≤–µ–¥–µ–Ω–Ω—è
   * FIXED: –ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ–∂–∏–º (–ë–ó/–ó–°/–û–±–∏–¥–≤–∞)
   * @private
   */
  private async saveSummarizationMode(): Promise<void> {
    try {
      const selectedMode = document.querySelector('input[name="excel-mode"]:checked') as HTMLInputElement;
      const mode = selectedMode?.value || '–û–±–∏–¥–≤–∞';
      
      await window.api?.setSetting?.('excelSummarizationMode', mode);
      
      this.logMessage(`üíæ –†–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${mode}`);
    } catch (error) {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∂–∏–º –∑–≤–µ–¥–µ–Ω–Ω—è:', error);
    }
  }
}
