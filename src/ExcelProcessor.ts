/**
 * ExcelProcessor - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è UI –≤–∫–ª–∞–¥–∫–∏ "–°—Ç—Ä–æ–π–æ–≤–∫–∞"
 * 
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö Excel –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
 * - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
 * - –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * - –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ C:H –∑–∞ –∫–ª—é—á–µ–º –∑ –∫–æ–ª–æ–Ω–∫–∏ B
 * - –û–±—Ä–æ–±–∫–∞ –¥–≤–æ—Ö –∞—Ä–∫—É—à—ñ–≤: "–ó–°" —Ç–∞ "–ë–ó"
 * 
 * @class ExcelProcessor
 */

import { byId } from './helpers';
import { SubunitMappingProcessor } from './services/SubunitMappingProcessor';
import type { ProcessingStats } from './types/MappingTypes';

export class ExcelProcessor {
  private inputFolder: string = '';
  private destinationFile: string = '';
  private processor: SubunitMappingProcessor;
  private isProcessing: boolean = false;

  constructor() {
    this.processor = new SubunitMappingProcessor();
    this.setupEventListeners();
    this.loadSavedSettings();
    
    this.logMessage('‚úÖ –ú–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ Excel —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    
    // üß™ –¢–ï–°–¢–û–í–Ü –ó–ù–ê–ß–ï–ù–ù–Ø (–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    // this.inputFolder = 'D:\\TestFolder';
    // this.destinationFile = 'D:\\TestFolder\\destination.xlsx';
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setTimeout(() => this.updateButtonStates(), 100);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
    const selectFolderBtn = byId('excel-select-folder');
    const inputFolderField = byId<HTMLInputElement>('excel-input-folder');
    
    selectFolderBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏');
        const result = await window.api?.selectFolder?.();
        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', result);
        if (result?.filePath) {
          this.inputFolder = result.filePath;
          inputFolderField!.value = result.filePath;
          this.logMessage(`üìÇ –û–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: ${result.filePath}`);
          await this.saveInputFolderSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', error);
      }
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    const selectDestinationBtn = byId('excel-select-destination');
    const destinationFileField = byId<HTMLInputElement>('excel-destination-file');
    
    selectDestinationBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è');
        const result = await window.api?.selectExcelFile?.();
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);
        
        if (result) {
          this.destinationFile = result;
          destinationFileField!.value = result;
          this.logMessage(`üíæ –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${result}`);
          await this.saveDestinationSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    const startBtn = byId('excel-process-btn');
    startBtn?.addEventListener('click', () => {
      this.handleStartProcessing();
    });

    // –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const stopBtn = byId('excel-cancel-btn');
    stopBtn?.addEventListener('click', () => {
      this.handleStopProcessing();
    });

    // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É
    const rememberDestinationCheckbox = byId<HTMLInputElement>('excel-remember-destination');
    rememberDestinationCheckbox?.addEventListener('change', () => {
      this.saveDestinationSettings();
    });

    const sliceCheckbox = byId<HTMLInputElement>('excel-slice-check');
    const mismatchesCheckbox = byId<HTMLInputElement>('excel-mismatches');
    const sanitizerCheckbox = byId<HTMLInputElement>('excel-sanitizer');
    const enable3BSPCheckbox = byId<HTMLInputElement>('enable3BSP');
    const autoOpenCheckbox = byId<HTMLInputElement>('excel-autoopen');
    const duplicatesCheckbox = byId<HTMLInputElement>('excel-duplicates');
    
    sliceCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    mismatchesCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    sanitizerCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    enable3BSPCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    autoOpenCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
    duplicatesCheckbox?.addEventListener('change', () => this.saveProcessingSettings());
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   */
  private async handleStartProcessing(): Promise<void> {
    if (this.isProcessing) {
      this.logMessage('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è', 'warn');
      return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!this.inputFolder) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ Excel —Ñ–∞–π–ª–∞–º–∏', 'error');
      return;
    }

    if (!this.destinationFile) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è', 'error');
      return;
    }
    
    this.isProcessing = true;
    this.updateButtonStates();

    try {
      this.logMessage('üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤...');
      this.logMessage(`üìÇ –ü–∞–ø–∫–∞: ${this.inputFolder}`);
      this.logMessage(`üíæ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${this.destinationFile}`);
      this.logMessage('');
      
      console.log('üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ processor.process...');

      const stats = await this.processor.process(
        this.inputFolder,
        this.destinationFile,
        (percent: number, message: string) => {
          this.updateProgress(message, percent);
          this.logMessage(message);
        }
      );

      this.displayStats(stats);
      this.logMessage('');
      this.logMessage('‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!', 'success');
      
      // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É —è–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–µ
      const autoOpenCheckbox = byId<HTMLInputElement>('excel-autoopen');
      if (autoOpenCheckbox?.checked) {
        this.logMessage('üìÇ –í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...', 'info');
        try {
          await window.api?.openExternal?.(this.destinationFile);
        } catch (openError) {
          console.error('Failed to open file:', openError);
          this.logMessage('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª', 'warn');
        }
      }

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É "Permission denied" –∞–±–æ "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ"
      if (errorMsg.includes('Permission denied') || 
          errorMsg.includes('–≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ') ||
          errorMsg.includes('Errno 13')) {
        this.logMessage('‚ùå –§–ê–ô–õ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô!', 'error');
        this.logMessage('', 'error');
        this.logMessage('–§–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ Excel –∞–±–æ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ.', 'error');
        this.logMessage('', 'error');
        this.logMessage('üîß –ó–∞–∫—Ä–∏–π—Ç–µ —Ñ–∞–π–ª —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', 'error');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ alert –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        alert(
          '‚ùå –§–∞–π–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π!\n\n' +
          '–§–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ Excel –∞–±–æ —ñ–Ω—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ.\n\n' +
          'üîß –ó–∞–∫—Ä–∏–π—Ç–µ —Ñ–∞–π–ª —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
        );
      } else {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMsg}`, 'error');
      }
      
      console.error('Processing error:', error);
    } finally {
      this.isProcessing = false;
      this.updateButtonStates();
      this.resetProgress();
    }
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É
   */
  private handleStopProcessing(): void {
    if (!this.isProcessing) {
      return;
    }

    this.logMessage('üõë –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏...', 'warn');
    // TODO: Implement cancellation logic if needed
    this.isProcessing = false;
    this.updateButtonStates();
    this.resetProgress();
  }

  /**
   * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–æ–±–∫–∏
   */
  private displayStats(stats: ProcessingStats): void {
    this.logMessage('');
    this.logMessage('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    this.logMessage('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–û–ë–ö–ò');
    this.logMessage('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    this.logMessage(`üìÅ –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${stats.processedFiles} –∑ ${stats.totalFiles}`);
    this.logMessage(`‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ä—è–¥–∫—ñ–≤ (–ó–°): ${stats.totalCopiedRowsZS}`);
    this.logMessage(`‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ä—è–¥–∫—ñ–≤ (–ë–ó): ${stats.totalCopiedRowsBZ}`);
    this.logMessage(`‚è±Ô∏è –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: ${(stats.processingTime / 1000).toFixed(2)} —Å–µ–∫`);
    
    if (stats.allMissingSubunits.length > 0) {
      this.logMessage('');
      this.logMessage('‚ö†Ô∏è –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ñ–∞–π–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:');
      const uniqueMissing = [...new Set(stats.allMissingSubunits)];
      uniqueMissing.slice(0, 10).forEach(subunit => {
        this.logMessage(`   ‚Ä¢ ${subunit}`);
      });
      if (uniqueMissing.length > 10) {
        this.logMessage(`   ... —Ç–∞ —â–µ ${uniqueMissing.length - 10} –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤`);
      }
    }
    this.logMessage('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   */
  private updateProgress(phase: string, progress: number): void {
    const progressBar = byId('excel-progress');
    const progressText = byId('excel-progress-text');
    
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
    
    if (progressText) {
      progressText.textContent = `${phase} - ${Math.round(progress)}%`;
    }
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
   */
  private resetProgress(): void {
    const progressBar = byId('excel-progress');
    const progressText = byId('excel-progress-text');
    
    if (progressBar) {
      progressBar.style.width = '0%';
    }
    
    if (progressText) {
      progressText.textContent = '';
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   */
  private updateButtonStates(): void {
    const startBtn = byId<HTMLButtonElement>('excel-process-btn');
    const stopBtn = byId<HTMLButtonElement>('excel-cancel-btn');
    
    if (startBtn) {
      // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ–±—Ä–∞–Ω—ñ –ø–∞–ø–∫–∞ —Ç–∞ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const canStart = !this.isProcessing && this.inputFolder && this.destinationFile;
      startBtn.disabled = !canStart;
      
      // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
      if (!this.inputFolder || !this.destinationFile) {
        startBtn.title = '–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏ —Ç–∞ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è';
      } else {
        startBtn.title = '–†–æ–∑–ø–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É Excel —Ñ–∞–π–ª—ñ–≤';
      }
    }
    
    if (stopBtn) {
      stopBtn.disabled = !this.isProcessing;
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  private logMessage(message: string, level: 'info' | 'warn' | 'error' | 'success' = 'info'): void {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ UI
    console.log(`[${level.toUpperCase()}] ${message}`);
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–∞–ø–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
   */
  private async saveInputFolderSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('excel.inputFolder', this.inputFolder);
    } catch (error) {
      console.error('Failed to save input folder settings:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
   */
  private async saveDestinationSettings(): Promise<void> {
    const rememberCheckbox = byId<HTMLInputElement>('excel-remember-destination');
    const shouldRemember = rememberCheckbox?.checked ?? false;

    try {
      await window.api?.setSetting?.('excel.rememberDestination', shouldRemember);
      
      if (shouldRemember) {
        await window.api?.setSetting?.('excel.destinationFile', this.destinationFile);
      }
    } catch (error) {
      console.error('Failed to save destination settings:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
   */
  private async saveProcessingSettings(): Promise<void> {
    const sliceCheckbox = byId<HTMLInputElement>('excel-slice-check');
    const mismatchesCheckbox = byId<HTMLInputElement>('excel-mismatches');
    const sanitizerCheckbox = byId<HTMLInputElement>('excel-sanitizer');
    const enable3BSPCheckbox = byId<HTMLInputElement>('enable3BSP');
    const autoOpenCheckbox = byId<HTMLInputElement>('excel-autoopen');
    const duplicatesCheckbox = byId<HTMLInputElement>('excel-duplicates');

    try {
      await window.api?.setSetting?.('excel.enableSliceCheck', sliceCheckbox?.checked ?? false);
      await window.api?.setSetting?.('excel.showMismatches', mismatchesCheckbox?.checked ?? false);
      await window.api?.setSetting?.('excel.enableSanitizer', sanitizerCheckbox?.checked ?? false);
      await window.api?.setSetting?.('enable3BSP', enable3BSPCheckbox?.checked ?? false);
      await window.api?.setSetting?.('excel.autoOpen', autoOpenCheckbox?.checked ?? false);
      await window.api?.setSetting?.('excel.enableDuplicates', duplicatesCheckbox?.checked ?? false);
    } catch (error) {
      console.error('Failed to save processing settings:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  private async loadSavedSettings(): Promise<void> {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
      const savedInputFolder = await window.api?.getSetting?.('excel.inputFolder', '');
      if (savedInputFolder) {
        this.inputFolder = savedInputFolder;
        const inputFolderField = byId<HTMLInputElement>('excel-input-folder');
        if (inputFolderField) {
          inputFolderField.value = savedInputFolder;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const shouldRemember = await window.api?.getSetting?.('excel.rememberDestination', false);
      const rememberCheckbox = byId<HTMLInputElement>('excel-remember-destination');
      if (rememberCheckbox) {
        rememberCheckbox.checked = shouldRemember;
      }

      if (shouldRemember) {
        const savedDestination = await window.api?.getSetting?.('excel.destinationFile', '');
        if (savedDestination) {
          this.destinationFile = savedDestination;
          const destinationField = byId<HTMLInputElement>('excel-destination-file');
          if (destinationField) {
            destinationField.value = savedDestination;
          }
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
      const sliceCheckbox = byId<HTMLInputElement>('excel-slice-check');
      const mismatchesCheckbox = byId<HTMLInputElement>('excel-mismatches');
      const sanitizerCheckbox = byId<HTMLInputElement>('excel-sanitizer');
      const enable3BSPCheckbox = byId<HTMLInputElement>('enable3BSP');
      const autoOpenCheckbox = byId<HTMLInputElement>('excel-autoopen');
      const duplicatesCheckbox = byId<HTMLInputElement>('excel-duplicates');

      if (sliceCheckbox) {
        sliceCheckbox.checked = await window.api?.getSetting?.('excel.enableSliceCheck', false);
      }
      if (mismatchesCheckbox) {
        mismatchesCheckbox.checked = await window.api?.getSetting?.('excel.showMismatches', false);
      }
      if (sanitizerCheckbox) {
        sanitizerCheckbox.checked = await window.api?.getSetting?.('excel.enableSanitizer', false);
      }
      if (enable3BSPCheckbox) {
        enable3BSPCheckbox.checked = await window.api?.getSetting?.('enable3BSP', false);
      }
      if (autoOpenCheckbox) {
        autoOpenCheckbox.checked = await window.api?.getSetting?.('excel.autoOpen', true);
      }
      if (duplicatesCheckbox) {
        duplicatesCheckbox.checked = await window.api?.getSetting?.('excel.enableDuplicates', false);
      }

      // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      this.updateButtonStates();

    } catch (error) {
      console.error('Failed to load saved settings:', error);
    }
  }
}
