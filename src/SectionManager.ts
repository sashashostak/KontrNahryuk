/**
 * SectionManager - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Å–µ–∫—Ü—ñ–π —Ñ–æ—Ä–º–∏
 * FIXED: –í–∏–Ω–µ—Å–µ–Ω–æ –∑ main.ts (—Ä—è–¥–∫–∏ 437-481)
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–æ–∫–∞–∑/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É
 * - –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —á–µ–∫–±–æ–∫—Å–∞ "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è"
 * - –í–∏–∫–ª–∏–∫ –¥—ñ–∞–ª–æ–≥—É –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É
 */

import { DOM_IDS, EVENT_TYPES } from './constants';

// FIXED: –î–æ–¥–∞–Ω–æ helper —Ñ—É–Ω–∫—Ü—ñ—é byId (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—å –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ main.ts)
const byId = <T extends HTMLElement>(id: string): T | null => 
  document.getElementById(id) as T | null;

// FIXED: –î–æ–¥–∞–Ω–æ helper —Ñ—É–Ω–∫—Ü—ñ—é log (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—å –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ main.ts)
const log = (msg: string): void => {
  const el = byId<HTMLPreElement>(DOM_IDS.LOG_BODY);
  if (!el) return;
  const time = new Date().toLocaleTimeString();
  el.textContent += `[${time}] ${msg}\n`;
  el.scrollTop = el.scrollHeight;
};

/**
 * –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–º–æ–≤–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Å–µ–∫—Ü—ñ–π
 * –ü–æ–∫–∞–∑—É—î Excel —Å–µ–∫—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è"
 */
export class SectionManager {
  private orderCheckbox: HTMLInputElement | null;
  private excelSection: HTMLElement | null;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  constructor() {
    this.orderCheckbox = byId<HTMLInputElement>(DOM_IDS.T_ORDER);
    this.excelSection = byId(DOM_IDS.EXCEL_SECTION);
    this.bindEvents();
  }

  /**
   * FIXED: –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  private bindEvents(): void {
    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —á–µ–∫–±–æ–∫—Å–∞ "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è"
    this.orderCheckbox?.addEventListener(EVENT_TYPES.CHANGE, () => {
      this.toggleExcelSection();
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É
    byId(DOM_IDS.CHOOSE_EXCEL)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.selectExcelFile();
    });
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –∞–±–æ —Ö–æ–≤–∞—î Excel —Å–µ–∫—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É —á–µ–∫–±–æ–∫—Å–∞
   */
  private toggleExcelSection(): void {
    if (this.excelSection) {
      this.excelSection.style.display = this.orderCheckbox?.checked ? 'block' : 'none';
    }
  }

  /**
   * –í–∏–∫–ª–∏–∫–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ IPC
   * @async
   */
  private async selectExcelFile(): Promise<void> {
    try {
      const filePath = await window.api?.selectExcelFile?.();
      if (filePath) {
        const excelInput = byId<HTMLInputElement>(DOM_IDS.EXCEL_PATH);
        if (excelInput) {
          excelInput.value = filePath;
        }
        log(`üìä –û–±—Ä–∞–Ω–æ Excel —Ñ–∞–π–ª: ${filePath}`);
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É:', error);
      log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É: ${error}`);
    }
  }
}
