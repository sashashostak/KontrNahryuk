/**
 * ZBDProcessor - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è UI –≤–∫–ª–∞–¥–∫–∏ "–ñ–ë–î"
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –û–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—ñ–≤ –∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ Word –¥–æ–∫—É–º–µ–Ω—Ç
 * - –í–∏–±—ñ—Ä CSV —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (—Ç–∞–±–µ–ª—å –æ–±–ª—ñ–∫—É –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É)
 * - –í–∏–±—ñ—Ä –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
 * - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ 31 —Ç–∞–±–ª–∏—Ü–µ—é (–ø–æ –æ–¥–Ω—ñ–π –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –º—ñ—Å—è—Ü—è)
 * 
 * –õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏:
 * - –í–∏–∑–Ω–∞—á–∞—î –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
 * - –°—Ç–≤–æ—Ä—é—î –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é 3√ó5 –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è (1-31)
 * - –£ –∫–æ–∂–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ —Ä—è–¥–æ–∫ 3, –∫–æ–ª–æ–Ω–∫–∞ 1 –º—ñ—Å—Ç–∏—Ç—å –¥–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –¥–Ω—è
 * - –ú—ñ–∂ —Ç–∞–±–ª–∏—Ü—è–º–∏ –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è —Ä–æ–∑—Ä–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 *
 * @class ZBDProcessor
 */

import { byId } from './helpers';

export class ZBDProcessor {
  private csvFile: string = '';
  private configExcelFile: string = '';
  private outputFile: string = '';
  private isProcessing: boolean = false;

  constructor() {
    this.setupEventListeners();
    this.loadSavedSettings();

    this.logMessage('‚úÖ –ú–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ –ñ–ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setTimeout(() => this.updateButtonStates(), 100);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä CSV —Ñ–∞–π–ª—É
    const selectCsvBtn = byId('zbd-select-csv');
    const csvFileField = byId<HTMLInputElement>('zbd-csv-file');

    selectCsvBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É CSV —Ñ–∞–π–ª—É');
        const result = await window.api?.invoke?.('dialog:select-file', {
          title: '–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª',
          filters: [
            { name: 'CSV Files', extensions: ['csv'] },
            { name: 'All Files', extensions: ['*'] }
          ],
          properties: ['openFile']
        });
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);

        if (result && !result.canceled && result.filePaths?.length > 0) {
          this.csvFile = result.filePaths[0];
          csvFileField!.value = this.csvFile;
          this.logMessage(`üìÑ –û–±—Ä–∞–Ω–æ CSV —Ñ–∞–π–ª: ${this.csvFile}`);
          await this.saveCsvFileSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É CSV —Ñ–∞–π–ª—É: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –í–∏–±—ñ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel
    const selectConfigExcelBtn = byId('zbd-select-config-excel');
    const configExcelField = byId<HTMLInputElement>('zbd-config-excel');

    selectConfigExcelBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel');
        const result = await window.api?.invoke?.('dialog:select-file', {
          title: '–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel —Ñ–∞–π–ª',
          filters: [
            { name: 'Excel Files', extensions: ['xlsx', 'xls'] },
            { name: 'All Files', extensions: ['*'] }
          ],
          properties: ['openFile']
        });
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);

        if (result && !result.canceled && result.filePaths?.length > 0) {
          this.configExcelFile = result.filePaths[0];
          configExcelField!.value = this.configExcelFile;
          this.logMessage(`‚öôÔ∏è –û–±—Ä–∞–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel: ${this.configExcelFile}`);
          await this.saveConfigExcelSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –í–∏–±—ñ—Ä –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    const selectOutputBtn = byId('zbd-select-output');
    const outputField = byId<HTMLInputElement>('zbd-output-file');

    selectOutputBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        const result = await window.api?.chooseSavePath?.('–ñ–ë–î_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.docx');
        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', result);

        if (result) {
          this.outputFile = result;
          outputField!.value = result;
          this.logMessage(`üíæ –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${result}`);
          await this.saveOutputSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      }
    });

    // –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    const startBtn = byId('zbd-process-btn');
    startBtn?.addEventListener('click', () => {
      this.handleStartProcessing();
    });

    // –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const stopBtn = byId('zbd-cancel-btn');
    stopBtn?.addEventListener('click', () => {
      this.handleStopProcessing();
    });

    // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
    const autoOpenCheckbox = byId<HTMLInputElement>('zbd-autoopen');
    autoOpenCheckbox?.addEventListener('change', () => {
      this.saveProcessingSettings();
    });

    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—É
    const copyLogBtn = byId('zbd-copy-log');
    copyLogBtn?.addEventListener('click', () => {
      this.copyLog();
    });

    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
    const clearLogBtn = byId('zbd-clear-log');
    clearLogBtn?.addEventListener('click', () => {
      this.clearLog();
    });
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   */
  private async handleStartProcessing(): Promise<void> {
    if (this.isProcessing) {
      this.logMessage('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è', 'warn');
      return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!this.csvFile) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏', 'error');
      alert('‚ùå –û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
      return;
    }

    if (!this.outputFile) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É', 'error');
      alert('‚ùå –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É');
      return;
    }

    this.isProcessing = true;
    this.updateButtonStates();

    try {
      this.logMessage('üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É...');
      this.logMessage(`üìÑ CSV —Ñ–∞–π–ª: ${this.csvFile}`);
      if (this.configExcelFile) {
        this.logMessage(`‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel: ${this.configExcelFile}`);
      }
      this.logMessage(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${this.outputFile}`);
      this.logMessage('');

      // –í–∏–∫–ª–∏–∫ API –¥–ª—è –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É
      this.logMessage('‚öôÔ∏è –û–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ Python...', 'info');

      const result = await window.api?.invoke?.('process:zbd', {
        csvPath: this.csvFile,
        configExcelPath: this.configExcelFile || null,
        outputPath: this.outputFile
      });

      if (!result) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      if (!result.ok) {
        throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏');
      }

      this.logMessage('‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!', 'success');

      if (result.stats) {
        this.logMessage(`üìä –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: ${result.stats.rowsProcessed || 0}`, 'info');
      }

      if (result.message) {
        this.logMessage(result.message, 'info');
      }

      this.logMessage(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.outputFile}`, 'success');

      // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É —è–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–µ
      const autoOpenCheckbox = byId<HTMLInputElement>('zbd-autoopen');
      if (autoOpenCheckbox?.checked) {
        this.logMessage('üìÇ –í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...', 'info');
        try {
          await window.api?.openExternal?.(this.outputFile);
        } catch (openError) {
          console.error('Failed to open file:', openError);
          this.logMessage('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª', 'warn');
        }
      }

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMsg}`, 'error');
      console.error('Processing error:', error);
      alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMsg}`);
    } finally {
      this.isProcessing = false;
      this.updateButtonStates();
    }
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É
   */
  private handleStopProcessing(): void {
    if (!this.isProcessing) {
      return;
    }

    this.logMessage('üõë –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏...', 'warn');
    this.isProcessing = false;
    this.updateButtonStates();
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   */
  private updateButtonStates(): void {
    const startBtn = byId<HTMLButtonElement>('zbd-process-btn');
    const stopBtn = byId<HTMLButtonElement>('zbd-cancel-btn');

    if (startBtn) {
      // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ–±—Ä–∞–Ω—ñ CSV —Ñ–∞–π–ª —Ç–∞ –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      const canStart = !this.isProcessing && this.csvFile && this.outputFile;
      startBtn.disabled = !canStart;

      if (!this.csvFile || !this.outputFile) {
        startBtn.title = '–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª —Ç–∞ –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è';
      } else {
        startBtn.title = '–†–æ–∑–ø–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É CSV —Ñ–∞–π–ª—É';
      }
    }

    if (stopBtn) {
      stopBtn.style.display = this.isProcessing ? 'inline-block' : 'none';
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  private logMessage(message: string, level: 'info' | 'warn' | 'error' | 'success' = 'info'): void {
    const logBody = byId<HTMLPreElement>('zbd-log-body');
    if (!logBody) return;

    const time = new Date().toLocaleTimeString();
    const logEntry = `[${time}] ${message}\n`;
    logBody.textContent += logEntry;
    logBody.scrollTop = logBody.scrollHeight;

    console.log(`[${level.toUpperCase()}] ${message}`);
  }

  /**
   * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
   */
  private copyLog(): void {
    const logBody = byId<HTMLPreElement>('zbd-log-body');
    if (!logBody || !logBody.textContent) {
      this.logMessage('‚ö†Ô∏è –õ–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π', 'warn');
      return;
    }

    navigator.clipboard.writeText(logBody.textContent)
      .then(() => {
        this.logMessage('üìã –õ–æ–≥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'success');
      })
      .catch(err => {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${err}`, 'error');
      });
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
   */
  private clearLog(): void {
    const logBody = byId<HTMLPreElement>('zbd-log-body');
    if (logBody) {
      logBody.textContent = '';
      this.logMessage('üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω–æ');
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å CSV —Ñ–∞–π–ª—É
   */
  private async saveCsvFileSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('zbd.csvFile', this.csvFile);
    } catch (error) {
      console.error('Failed to save CSV file settings:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel
   */
  private async saveConfigExcelSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('zbd.configExcelFile', this.configExcelFile);
    } catch (error) {
      console.error('Failed to save config Excel settings:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
   */
  private async saveOutputSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('zbd.outputFile', this.outputFile);
    } catch (error) {
      console.error('Failed to save output settings:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
   */
  private async saveProcessingSettings(): Promise<void> {
    const autoOpenCheckbox = byId<HTMLInputElement>('zbd-autoopen');

    try {
      await window.api?.setSetting?.('zbd.autoOpen', autoOpenCheckbox?.checked ?? false);
    } catch (error) {
      console.error('Failed to save processing settings:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  private async loadSavedSettings(): Promise<void> {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É
      const savedCsvFile = await window.api?.getSetting?.('zbd.csvFile', '');
      if (savedCsvFile) {
        this.csvFile = savedCsvFile;
        const csvFileField = byId<HTMLInputElement>('zbd-csv-file');
        if (csvFileField) {
          csvFileField.value = savedCsvFile;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel
      const savedConfigExcel = await window.api?.getSetting?.('zbd.configExcelFile', '');
      if (savedConfigExcel) {
        this.configExcelFile = savedConfigExcel;
        const configExcelField = byId<HTMLInputElement>('zbd-config-excel');
        if (configExcelField) {
          configExcelField.value = savedConfigExcel;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      const savedOutput = await window.api?.getSetting?.('zbd.outputFile', '');
      if (savedOutput) {
        this.outputFile = savedOutput;
        const outputField = byId<HTMLInputElement>('zbd-output-file');
        if (outputField) {
          outputField.value = savedOutput;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
      const autoOpenCheckbox = byId<HTMLInputElement>('zbd-autoopen');
      if (autoOpenCheckbox) {
        autoOpenCheckbox.checked = await window.api?.getSetting?.('zbd.autoOpen', true);
      }

      // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      this.updateButtonStates();

    } catch (error) {
      console.error('Failed to load saved settings:', error);
    }
  }
}
