/**
 * ShtatSliceProcessor.ts - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è UI –≤–∫–ª–∞–¥–∫–∏ "–®—Ç–∞—Ç_Slice"
 * 
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –û–±—Ä–æ–±–∫–∞ Excel —Ñ–∞–π–ª—É –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏
 * - –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª—É
 * - –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
 * - –û–±—Ä–æ–±–∫–∞ —Ç–∞ –Ω–∞—Ä—ñ–∑–∫–∞ —Ñ–∞–π–ª—É
 * 
 * @class ShtatSliceProcessor
 */

import { byId } from './helpers';

export class ShtatSliceProcessor {
  private inputFile: string = '';
  private outputFolder: string = '';
  private isProcessing: boolean = false;

  constructor() {
    this.setupEventListeners();
    this.loadSavedSettings();

    this.logMessage('‚úÖ –ú–æ–¥—É–ª—å –®—Ç–∞—Ç_Slice —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setTimeout(() => this.updateButtonStates(), 100);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    const selectFileBtn = byId('shtat-slice-select-file');
    const inputFileField = byId<HTMLInputElement>('shtat-slice-input-file');
    
    selectFileBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É (–®—Ç–∞—Ç_Slice)');
        const result = await window.api?.selectExcelFile?.();
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);
        
        if (result) {
          this.inputFile = result;
          inputFileField!.value = result;
          this.logMessage(`üìÑ –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª: ${result}`);
          await this.saveInputFileSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    const selectFolderBtn = byId('shtat-slice-select-folder');
    const outputFolderField = byId<HTMLInputElement>('shtat-slice-output-folder');
    
    selectFolderBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏ (–®—Ç–∞—Ç_Slice)');
        const result = await window.api?.selectFolder?.();
        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', result);
        
        if (result?.filePath) {
          this.outputFolder = result.filePath;
          outputFolderField!.value = result.filePath;
          this.logMessage(`üìÅ –û–±—Ä–∞–Ω–æ –ø–∞–ø–∫—É: ${result.filePath}`);
          await this.saveOutputFolderSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', error);
      }
    });

    // –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    const startBtn = byId('shtat-slice-process-btn');
    startBtn?.addEventListener('click', () => {
      this.handleStartProcessing();
    });

    // –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const stopBtn = byId('shtat-slice-cancel-btn');
    stopBtn?.addEventListener('click', () => {
      this.handleStopProcessing();
    });

    // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    const clearLogBtn = byId('shtat-slice-clear-log');
    clearLogBtn?.addEventListener('click', () => {
      const logBody = byId<HTMLPreElement>('shtat-slice-log-body');
      if (logBody) {
        logBody.textContent = '';
        this.logMessage('üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ');
      }
    });

    // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    const copyLogBtn = byId('shtat-slice-copy-log');
    copyLogBtn?.addEventListener('click', () => {
      const logBody = byId<HTMLPreElement>('shtat-slice-log-body');
      if (logBody && logBody.textContent) {
        navigator.clipboard.writeText(logBody.textContent).then(() => {
          this.logMessage('üìã –õ–æ–≥–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ');
        }).catch((err) => {
          this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${err}`, 'error');
        });
      } else {
        this.logMessage('‚ö†Ô∏è –ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è', 'warn');
      }
    });
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   */
  private async handleStartProcessing(): Promise<void> {
    if (this.isProcessing) {
      this.logMessage('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è', 'warn');
      return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!this.inputFile) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å –≤—Ö—ñ–¥–Ω–∏–π Excel —Ñ–∞–π–ª', 'error');
      return;
    }

    if (!this.outputFolder) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É', 'error');
      return;
    }
    
    this.isProcessing = true;
    this.updateButtonStates();
    this.clearLog();

    try {
      this.logMessage('üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è –®—Ç–∞—Ç_Slice...');
      this.logMessage(`üìÑ –§–∞–π–ª: ${this.inputFile}`);
      this.logMessage(`üìÅ –ü–∞–ø–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${this.outputFolder}`);
      this.logMessage('');
      
      console.log('üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –®—Ç–∞—Ç_Slice...');

      const options = {
        inputFile: this.inputFile,
        outputFolder: this.outputFolder
      };

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ Python –æ–±—Ä–æ–±–∫—É —á–µ—Ä–µ–∑ IPC
      const result = await window.api?.invoke?.('process:shtat-slice', options);
      
      if (result?.ok) {
        const stats = result.stats || {};
        const subunitsCount = stats.subunitsCount || 0;
        const filesCreated = stats.filesCreated || 0;
        const files = result.files || [];
        
        this.logMessage('‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        this.logMessage(`üìä –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: ${subunitsCount}`);
        this.logMessage(`üìÅ –§–∞–π–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${filesCreated}`);
        
        // –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if (files.length > 0) {
          this.logMessage('\nüìÑ –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:');
          files.forEach((filePath: string, index: number) => {
            const fileName = filePath.split('\\').pop() || filePath;
            this.logMessage(`   ${index + 1}. ${fileName}`);
          });
        }
        
        // –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –ª–æ–≥–∏ –∑ Python (stdout)
        const rawLogs = typeof result.logs === 'string' ? result.logs : '';
        const fallbackLogs = !rawLogs && typeof result.out === 'string' && result.out.includes('\n') ? result.out : '';
        const combinedLogs = (rawLogs || fallbackLogs).trim();
        if (combinedLogs) {
          this.logMessage('\nüìã –î–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥:');
          for (const line of combinedLogs.split(/\r?\n/)) {
            if (line.trim() && !line.includes('__RESULT__') && !line.includes('__END__')) {
              this.logMessage(line.trim(), 'info');
            }
          }
        }
        
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        await window.api?.notify?.('–£—Å–ø—ñ—Ö', 
          `–®—Ç–∞—Ç–∫–∞ –Ω–∞—Ä—ñ–∑–∞–Ω–∞!\n${subunitsCount} –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ ‚Üí ${filesCreated} —Ñ–∞–π–ª—ñ–≤`
        );
      } else {
        const errorMsg = result?.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMsg}`, 'error');
        const errorLogs = typeof result?.logs === 'string' ? result.logs.trim() : '';
        if (errorLogs) {
          for (const line of errorLogs.split(/\r?\n/)) {
            if (line.trim()) {
              this.logMessage(line.trim(), 'warn');
            }
          }
        }
        await window.api?.notify?.('–ü–æ–º–∏–ª–∫–∞', errorMsg);
      }
      
    } catch (error) {
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${error}`, 'error');
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏:', error);
      await window.api?.notify?.('–ü–æ–º–∏–ª–∫–∞', `–ü–æ–º–∏–ª–∫–∞: ${error}`);
    } finally {
      this.isProcessing = false;
      this.updateButtonStates();
    }
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É
   */
  private handleStopProcessing(): void {
    this.logMessage('üõë –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏...');
    this.isProcessing = false;
    this.updateButtonStates();
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   */
  private updateButtonStates(): void {
    const processBtn = byId<HTMLButtonElement>('shtat-slice-process-btn');
    const cancelBtn = byId<HTMLButtonElement>('shtat-slice-cancel-btn');

    if (!processBtn || !cancelBtn) return;

    const canStart = this.inputFile && this.outputFolder && !this.isProcessing;

    processBtn.disabled = !canStart;
    processBtn.style.display = this.isProcessing ? 'none' : 'block';
    cancelBtn.style.display = this.isProcessing ? 'block' : 'none';
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
   */
  private clearLog(): void {
    const logBody = byId<HTMLPreElement>('shtat-slice-log-body');
    if (logBody) {
      logBody.textContent = '';
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  private logMessage(message: string, type: 'info' | 'warn' | 'error' = 'info'): void {
    const logBody = byId<HTMLPreElement>('shtat-slice-log-body');
    if (!logBody) {
      console.warn('‚ö†Ô∏è –õ–æ–≥-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (message === '') {
      logBody.append(document.createElement('br'));
      logBody.scrollTop = logBody.scrollHeight;
      return;
    }

    const time = new Date().toLocaleTimeString();
    let prefix = '‚ÑπÔ∏è';
    let cssClass = 'log-info';
    if (type === 'error') {
      prefix = '‚ùå';
      cssClass = 'log-error';
    } else if (type === 'warn') {
      prefix = '‚ö†Ô∏è';
      cssClass = 'log-warn';
    }

    const line = document.createElement('span');
    line.className = cssClass;
    line.textContent = `[${time}] ${prefix} ${message}`;

    logBody.append(line, document.createElement('br'));
    logBody.scrollTop = logBody.scrollHeight;
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
   */
  private async saveInputFileSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('shtatSlice.inputFile', this.inputFile);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
   */
  private async saveOutputFolderSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('shtatSlice.outputFolder', this.outputFolder);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–∞–ø–∫–∏:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  private async loadSavedSettings(): Promise<void> {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
      const savedInputFile = await window.api?.getSetting?.('shtatSlice.inputFile');
      if (savedInputFile) {
        this.inputFile = savedInputFile;
        const inputFileField = byId<HTMLInputElement>('shtat-slice-input-file');
        if (inputFileField) {
          inputFileField.value = savedInputFile;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const savedOutputFolder = await window.api?.getSetting?.('shtatSlice.outputFolder');
      if (savedOutputFolder) {
        this.outputFolder = savedOutputFolder;
        const outputFolderField = byId<HTMLInputElement>('shtat-slice-output-folder');
        if (outputFolderField) {
          outputFolderField.value = savedOutputFolder;
        }
      }

      this.updateButtonStates();
      this.logMessage('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }
}
