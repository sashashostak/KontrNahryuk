/**
 * Dodatok10Processor - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è UI –≤–∫–ª–∞–¥–∫–∏ "–î–æ–¥–∞—Ç–æ–∫ 10"
 * 
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –û–±—Ä–æ–±–∫–∞ Excel —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –î–æ–¥–∞—Ç–∫—É 10
 * - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
 * - –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * - –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –î–æ–¥–∞—Ç–∫—É 10
 * 
 * @class Dodatok10Processor
 */

import { byId } from './helpers';

export class Dodatok10Processor {
  private inputFolder: string = '';
  private destinationFile: string = '';
  private stroiovkaFile: string = '';
  private correctionsFile: string = '';
  private isProcessing: boolean = false;

  constructor() {
    this.setupEventListeners();
    this.loadSavedSettings();

    this.logMessage('‚úÖ –ú–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ –î–æ–¥–∞—Ç–∫—É 10 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setTimeout(() => this.updateButtonStates(), 100);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
    const selectFolderBtn = byId('dodatok10-select-folder');
    const inputFolderField = byId<HTMLInputElement>('dodatok10-input-folder');
    
    selectFolderBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏ (–î–æ–¥–∞—Ç–æ–∫ 10)');
        const result = await window.api?.selectFolder?.();
        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', result);
        if (result?.filePath) {
          this.inputFolder = result.filePath;
          inputFolderField!.value = result.filePath;
          this.logMessage(`üìÇ –û–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: ${result.filePath}`);
          await this.saveInputFolderSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', error);
      }
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    const selectDestinationBtn = byId('dodatok10-select-destination');
    const destinationFileField = byId<HTMLInputElement>('dodatok10-destination-file');
    
    selectDestinationBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–î–æ–¥–∞—Ç–æ–∫ 10)');
        const result = await window.api?.selectExcelFile?.();
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);
        
        if (result) {
          this.destinationFile = result;
          destinationFileField!.value = result;
          this.logMessage(`üíæ –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${result}`);
          await this.saveDestinationSettings();
          this.updateButtonStates();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    const startBtn = byId('dodatok10-process-btn');
    startBtn?.addEventListener('click', () => {
      this.handleStartProcessing();
    });

    // –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const stopBtn = byId('dodatok10-cancel-btn');
    stopBtn?.addEventListener('click', () => {
      this.handleStopProcessing();
    });

    // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É
    const rememberDestinationCheckbox = byId<HTMLInputElement>('dodatok10-remember-destination');
    rememberDestinationCheckbox?.addEventListener('change', () => {
      this.saveDestinationSettings();
    });

    const autoOpenCheckbox = byId<HTMLInputElement>('dodatok10-autoopen');
    autoOpenCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    // –í—Å—ñ —ñ–Ω—à—ñ —á–µ–∫–±–æ–∫—Å–∏ –æ–±—Ä–æ–±–∫–∏
    const ignoreFormulaColsCheckbox = byId<HTMLInputElement>('dodatok10-ignore-formula-cols');
    ignoreFormulaColsCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    const fnpCheckCheckbox = byId<HTMLInputElement>('dodatok10-fnp-check');
    fnpCheckCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    const updateStatusCheckbox = byId<HTMLInputElement>('dodatok10-update-status-check');
    updateStatusCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    const duplicatesCheckCheckbox = byId<HTMLInputElement>('dodatok10-duplicates-check');
    duplicatesCheckCheckbox?.addEventListener('change', () => this.saveProcessingSettings());

    // –ß–µ–∫–±–æ–∫—Å –°—Ç—Ä–æ–π–æ–≤–∫–∞ - –ø–æ–∫–∞–∑/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
    const stroiovkaCheckbox = byId<HTMLInputElement>('dodatok10-stroiovka-check');
    const stroiovkaFileSection = byId('dodatok10-stroiovka-file-section');

    stroiovkaCheckbox?.addEventListener('change', () => {
      if (stroiovkaFileSection) {
        stroiovkaFileSection.style.display = stroiovkaCheckbox.checked ? 'block' : 'none';
      }
      this.saveProcessingSettings();
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏
    const selectStroiovkaBtn = byId('dodatok10-select-stroiovka');
    const stroiovkaFileField = byId<HTMLInputElement>('dodatok10-stroiovka-file');

    selectStroiovkaBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏');
        const result = await window.api?.selectExcelFile?.();
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);

        if (result) {
          this.stroiovkaFile = result;
          stroiovkaFileField!.value = result;
          this.logMessage(`üìä –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª —Å—Ç—Ä–æ–π–æ–≤–∫–∏: ${result}`);
          await this.saveStroiovkaSettings();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –ù–æ–≤—ñ —á–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
    const fixRankCheckbox = byId<HTMLInputElement>('dodatok10-fix-rank');
    const fixPositionCheckbox = byId<HTMLInputElement>('dodatok10-fix-position');
    const correctionsFileSection = byId('dodatok10-corrections-file-section');

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —Ç—Ä–µ–±–∞ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–ª–µ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
    const updateCorrectionsFileVisibility = () => {
      if (correctionsFileSection) {
        const shouldShow = fixRankCheckbox?.checked || fixPositionCheckbox?.checked;
        correctionsFileSection.style.display = shouldShow ? 'block' : 'none';
      }
    };

    fixRankCheckbox?.addEventListener('change', () => {
      updateCorrectionsFileVisibility();
      this.saveProcessingSettings();
    });

    fixPositionCheckbox?.addEventListener('change', () => {
      updateCorrectionsFileVisibility();
      this.saveProcessingSettings();
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
    const selectCorrectionsBtn = byId('dodatok10-select-corrections');
    const correctionsFileField = byId<HTMLInputElement>('dodatok10-corrections-file');

    selectCorrectionsBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏');
        const result = await window.api?.selectExcelFile?.();
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);

        if (result) {
          this.correctionsFile = result;
          correctionsFileField!.value = result;
          this.logMessage(`üìù –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏: ${result}`);
          await this.saveCorrectionsSettings();
        }
      } catch (error) {
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏: ${error}`, 'error');
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', error);
      }
    });

    // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    const clearLogBtn = byId('dodatok10-clear-log');
    clearLogBtn?.addEventListener('click', () => {
      const logBody = byId<HTMLPreElement>('dodatok10-log-body');
      if (logBody) {
        logBody.textContent = '';
        this.logMessage('üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ');
      }
    });

    // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    const copyLogBtn = byId('dodatok10-copy-log');
    copyLogBtn?.addEventListener('click', () => {
      const logBody = byId<HTMLPreElement>('dodatok10-log-body');
      if (logBody && logBody.textContent) {
        navigator.clipboard.writeText(logBody.textContent).then(() => {
          this.logMessage('üìã –õ–æ–≥–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ');
        }).catch((err) => {
          this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${err}`, 'error');
        });
      } else {
        this.logMessage('‚ö†Ô∏è –ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è', 'warn');
      }
    });
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   */
  private async handleStartProcessing(): Promise<void> {
    if (this.isProcessing) {
      this.logMessage('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è', 'warn');
      return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!this.inputFolder) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ Excel —Ñ–∞–π–ª–∞–º–∏', 'error');
      return;
    }

    if (!this.destinationFile) {
      this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è', 'error');
      return;
    }
    
    this.isProcessing = true;
    this.updateButtonStates();

    try {
      this.logMessage('üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –î–æ–¥–∞—Ç–∫—É 10...');
      this.logMessage(`üìÇ –ü–∞–ø–∫–∞: ${this.inputFolder}`);
      this.logMessage(`üíæ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${this.destinationFile}`);
      this.logMessage('');
      
      console.log('üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –î–æ–¥–∞—Ç–∫—É 10...');

      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ UI
      const autoOpenCheckbox = byId<HTMLInputElement>('dodatok10-autoopen');
      const ignoreFormulaColsCheckbox = byId<HTMLInputElement>('dodatok10-ignore-formula-cols');
      const fnpCheckCheckbox = byId<HTMLInputElement>('dodatok10-fnp-check');
      const duplicatesCheckCheckbox = byId<HTMLInputElement>('dodatok10-duplicates-check');
      const stroiovkaCheckCheckbox = byId<HTMLInputElement>('dodatok10-stroiovka-check');
      const updateStatusCheckbox = byId<HTMLInputElement>('dodatok10-update-status-check');
      const fixRankCheckbox = byId<HTMLInputElement>('dodatok10-fix-rank');
      const fixPositionCheckbox = byId<HTMLInputElement>('dodatok10-fix-position');

      const stroiovkaEnabled = stroiovkaCheckCheckbox?.checked || false;
      if (stroiovkaEnabled && !this.stroiovkaFile) {
        this.logMessage('‚ùå –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª —Å—Ç—Ä–æ–π–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏', 'error');
        this.isProcessing = false;
        this.updateButtonStates();
        return;
      }

      const fixRank = fixRankCheckbox?.checked || false;
      const fixPosition = fixPositionCheckbox?.checked || false;
      if ((fixRank || fixPosition) && !this.correctionsFile) {
        this.logMessage('‚ùå –î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è –∑–≤–∞–Ω—å/–ø–æ—Å–∞–¥', 'error');
        this.isProcessing = false;
        this.updateButtonStates();
        return;
      }

      const options = {
        inputFolder: this.inputFolder,
        destinationFile: this.destinationFile,
        autoOpen: autoOpenCheckbox?.checked || false,
        ignoreFormulaCols: ignoreFormulaColsCheckbox?.checked !== false, // default true
        fnpCheck: fnpCheckCheckbox?.checked || false,
        duplicatesCheck: duplicatesCheckCheckbox?.checked || false,
        stroiovkaCheck: stroiovkaEnabled,
        stroiovkaFile: this.stroiovkaFile || '',
        fixRank,
        fixPosition,
        updateStatus: updateStatusCheckbox?.checked || false,
        correctionsFile: this.correctionsFile || ''
      };

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ Python –æ–±—Ä–æ–±–∫—É —á–µ—Ä–µ–∑ IPC
      const result = await window.api?.invoke?.('process:dodatok10', options);
      
      if (result?.ok) {
        const stats = result.stats || {};
        this.logMessage('‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        this.logMessage(`üìä –§–∞–π–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${stats.filesProcessed || 0}`);
        this.logMessage(`üìä –†—è–¥–∫—ñ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: ${stats.rowsWritten || 0}`);
        this.logMessage(`üìä –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: ${stats.unitsFound || 0}`);
        const fnpErrors = typeof stats.fnpErrors === 'number' ? stats.fnpErrors : undefined;
        if (typeof fnpErrors === 'number') {
          this.logMessage(`üìå FNP –ø–æ–º–∏–ª–æ–∫: ${fnpErrors}`, fnpErrors > 0 ? 'warn' : 'info');
        }

        const duplicatesErrors = typeof stats.duplicatesErrors === 'number' ? stats.duplicatesErrors : undefined;
        if (typeof duplicatesErrors === 'number') {
          this.logMessage(`üìå –î—É–±–ª—ñ–≤: ${duplicatesErrors}`, duplicatesErrors > 0 ? 'warn' : 'info');
        }

        const stroiovkaErrors = typeof stats.stroiovkaErrors === 'number' ? stats.stroiovkaErrors : undefined;
        if (typeof stroiovkaErrors === 'number') {
          this.logMessage(`üìå –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Å—Ç—Ä–æ–π–æ–≤–∫–∏: ${stroiovkaErrors}`, stroiovkaErrors > 0 ? 'warn' : 'info');
        }

        // –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –ª–æ–≥–∏ –∑ Python (stdout)
        const rawLogs = typeof result.logs === 'string' ? result.logs : '';
        const fallbackLogs = !rawLogs && typeof result.out === 'string' && result.out.includes('\n') ? result.out : '';
        const combinedLogs = (rawLogs || fallbackLogs).trim();
        if (combinedLogs) {
          for (const line of combinedLogs.split(/\r?\n/)) {
            if (line.trim()) {
              this.logMessage(line.trim(), 'info');
            }
          }
        }

        const destinationPath = typeof result.destination === 'string' && result.destination.trim()
          ? result.destination.trim()
          : (typeof result.out === 'string' && result.out.trim() && result.out.trim() !== combinedLogs
            ? result.out.trim()
            : this.destinationFile);
        if (destinationPath) {
          this.logMessage(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${destinationPath}`);
        }
        
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        await window.api?.notify?.('–£—Å–ø—ñ—Ö', 
          `–î–æ–¥–∞—Ç–æ–∫ 10 –æ–±—Ä–æ–±–ª–µ–Ω–æ!\n–§–∞–π–ª—ñ–≤: ${stats.filesProcessed || 0}, –†—è–¥–∫—ñ–≤: ${stats.rowsWritten || 0}`
        );
      } else {
        const errorMsg = result?.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMsg}`, 'error');
        const errorLogs = typeof result?.logs === 'string' ? result.logs.trim() : '';
        if (errorLogs) {
          for (const line of errorLogs.split(/\r?\n/)) {
            if (line.trim()) {
              this.logMessage(line.trim(), 'warn');
            }
          }
        }
        await window.api?.notify?.('–ü–æ–º–∏–ª–∫–∞', errorMsg);
      }
      
    } catch (error) {
      this.logMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${error}`, 'error');
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏:', error);
      await window.api?.notify?.('–ü–æ–º–∏–ª–∫–∞', `–ü–æ–º–∏–ª–∫–∞: ${error}`);
    } finally {
      this.isProcessing = false;
      this.updateButtonStates();
    }
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É
   */
  private handleStopProcessing(): void {
    this.logMessage('üõë –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏...');
    this.isProcessing = false;
    this.updateButtonStates();
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   */
  private updateButtonStates(): void {
    const processBtn = byId<HTMLButtonElement>('dodatok10-process-btn');
    const cancelBtn = byId<HTMLButtonElement>('dodatok10-cancel-btn');

    if (!processBtn || !cancelBtn) return;

    const canStart = this.inputFolder && this.destinationFile && !this.isProcessing;

    processBtn.disabled = !canStart;
    processBtn.style.display = this.isProcessing ? 'none' : 'block';
    cancelBtn.style.display = this.isProcessing ? 'block' : 'none';
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  private logMessage(message: string, type: 'info' | 'warn' | 'error' = 'info'): void {
    const logBody = byId<HTMLPreElement>('dodatok10-log-body');
    if (!logBody) {
      console.warn('‚ö†Ô∏è –õ–æ–≥-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (message === '') {
      logBody.append(document.createElement('br'));
      logBody.scrollTop = logBody.scrollHeight;
      return;
    }

    const time = new Date().toLocaleTimeString();
    let prefix = '‚ÑπÔ∏è';
    let cssClass = 'log-info';
    if (type === 'error') {
      prefix = '‚ùå';
      cssClass = 'log-error';
    } else if (type === 'warn') {
      prefix = '‚ö†Ô∏è';
      cssClass = 'log-warn';
    }

    const line = document.createElement('span');
    line.className = cssClass;
    line.textContent = `[${time}] ${prefix} ${message}`;

    logBody.append(line, document.createElement('br'));
    logBody.scrollTop = logBody.scrollHeight;
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–∞–ø–∫–∏ –≤–≤–æ–¥—É
   */
  private async saveInputFolderSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('dodatok10.inputFolder', this.inputFolder);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–∞–ø–∫–∏:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
   */
  private async saveDestinationSettings(): Promise<void> {
    try {
      const rememberCheckbox = byId<HTMLInputElement>('dodatok10-remember-destination');
      if (rememberCheckbox?.checked) {
        await window.api?.setSetting?.('dodatok10.destinationFile', this.destinationFile);
      } else {
        await window.api?.setSetting?.('dodatok10.destinationFile', '');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
   */
  private async saveProcessingSettings(): Promise<void> {
    try {
      const autoOpenCheckbox = byId<HTMLInputElement>('dodatok10-autoopen');
      const ignoreFormulaColsCheckbox = byId<HTMLInputElement>('dodatok10-ignore-formula-cols');
      const fnpCheckCheckbox = byId<HTMLInputElement>('dodatok10-fnp-check');
      const duplicatesCheckCheckbox = byId<HTMLInputElement>('dodatok10-duplicates-check');
      const stroiovkaCheckCheckbox = byId<HTMLInputElement>('dodatok10-stroiovka-check');
      const fixRankCheckbox = byId<HTMLInputElement>('dodatok10-fix-rank');
      const fixPositionCheckbox = byId<HTMLInputElement>('dodatok10-fix-position');
      const updateStatusCheckbox = byId<HTMLInputElement>('dodatok10-update-status-check');

      await window.api?.setSetting?.('dodatok10.autoOpen', autoOpenCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.ignoreFormulaCols', ignoreFormulaColsCheckbox?.checked !== false);
      await window.api?.setSetting?.('dodatok10.fnpCheck', fnpCheckCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.duplicatesCheck', duplicatesCheckCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.stroiovkaCheck', stroiovkaCheckCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.fixRank', fixRankCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.fixPosition', fixPositionCheckbox?.checked || false);
      await window.api?.setSetting?.('dodatok10.updateStatus', updateStatusCheckbox?.checked || false);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏
   */
  private async saveStroiovkaSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('dodatok10.stroiovkaFile', this.stroiovkaFile);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
   */
  private async saveCorrectionsSettings(): Promise<void> {
    try {
      await window.api?.setSetting?.('dodatok10.correctionsFile', this.correctionsFile);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  private async loadSavedSettings(): Promise<void> {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –≤–≤–æ–¥—É
      const savedInputFolder = await window.api?.getSetting?.('dodatok10.inputFolder');
      if (savedInputFolder) {
        this.inputFolder = savedInputFolder;
        const inputFolderField = byId<HTMLInputElement>('dodatok10-input-folder');
        if (inputFolderField) {
          inputFolderField.value = savedInputFolder;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const savedDestination = await window.api?.getSetting?.('dodatok10.destinationFile');
      if (savedDestination) {
        this.destinationFile = savedDestination;
        const destinationField = byId<HTMLInputElement>('dodatok10-destination-file');
        if (destinationField) {
          destinationField.value = savedDestination;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±—Ä–æ–±–∫–∏
      const autoOpen = await window.api?.getSetting?.('dodatok10.autoOpen');
      const autoOpenCheckbox = byId<HTMLInputElement>('dodatok10-autoopen');
      if (autoOpenCheckbox) {
        autoOpenCheckbox.checked = autoOpen !== false;
      }

      const ignoreFormulaCols = await window.api?.getSetting?.('dodatok10.ignoreFormulaCols');
      const ignoreFormulaColsCheckbox = byId<HTMLInputElement>('dodatok10-ignore-formula-cols');
      if (ignoreFormulaColsCheckbox) {
        ignoreFormulaColsCheckbox.checked = ignoreFormulaCols !== false;
      }

      const fnpCheck = await window.api?.getSetting?.('dodatok10.fnpCheck');
      const fnpCheckCheckbox = byId<HTMLInputElement>('dodatok10-fnp-check');
      if (fnpCheckCheckbox) {
        fnpCheckCheckbox.checked = fnpCheck === true;
      }

      const duplicatesCheck = await window.api?.getSetting?.('dodatok10.duplicatesCheck');
      const duplicatesCheckCheckbox = byId<HTMLInputElement>('dodatok10-duplicates-check');
      if (duplicatesCheckCheckbox) {
        duplicatesCheckCheckbox.checked = duplicatesCheck === true;
      }

      const stroiovkaCheck = await window.api?.getSetting?.('dodatok10.stroiovkaCheck');
      const stroiovkaCheckCheckbox = byId<HTMLInputElement>('dodatok10-stroiovka-check');
      if (stroiovkaCheckCheckbox) {
        stroiovkaCheckCheckbox.checked = stroiovkaCheck === true;
        // –ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏
        const stroiovkaFileSection = byId('dodatok10-stroiovka-file-section');
        if (stroiovkaFileSection) {
          stroiovkaFileSection.style.display = stroiovkaCheck ? 'block' : 'none';
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Å—Ç—Ä–æ–π–æ–≤–∫–∏
      const savedStroiovka = await window.api?.getSetting?.('dodatok10.stroiovkaFile');
      if (savedStroiovka) {
        this.stroiovkaFile = savedStroiovka;
        const stroiovkaField = byId<HTMLInputElement>('dodatok10-stroiovka-file');
        if (stroiovkaField) {
          stroiovkaField.value = savedStroiovka;
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–æ–≤–∏—Ö —á–µ–∫–±–æ–∫—Å—ñ–≤
      const fixRank = await window.api?.getSetting?.('dodatok10.fixRank');
      const fixRankCheckbox = byId<HTMLInputElement>('dodatok10-fix-rank');
      if (fixRankCheckbox) {
        fixRankCheckbox.checked = fixRank === true;
      }

      const fixPosition = await window.api?.getSetting?.('dodatok10.fixPosition');
      const fixPositionCheckbox = byId<HTMLInputElement>('dodatok10-fix-position');
      if (fixPositionCheckbox) {
        fixPositionCheckbox.checked = fixPosition === true;
      }

      const updateStatus = await window.api?.getSetting?.('dodatok10.updateStatus');
      const updateStatusCheckbox = byId<HTMLInputElement>('dodatok10-update-status-check');
      if (updateStatusCheckbox) {
        updateStatusCheckbox.checked = updateStatus === true;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
      const savedCorrections = await window.api?.getSetting?.('dodatok10.correctionsFile');
      if (savedCorrections) {
        this.correctionsFile = savedCorrections;
        const correctionsField = byId<HTMLInputElement>('dodatok10-corrections-file');
        if (correctionsField) {
          correctionsField.value = savedCorrections;
        }
      }

      // –ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
      const correctionsFileSection = byId('dodatok10-corrections-file-section');
      if (correctionsFileSection) {
        const shouldShow = fixRank || fixPosition;
        correctionsFileSection.style.display = shouldShow ? 'block' : 'none';
      }

      this.updateButtonStates();
      this.logMessage('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }
}
