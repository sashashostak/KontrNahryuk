/**
 * ZBDCheckProcessor - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è UI –≤–∫–ª–∞–¥–∫–∏ "–ñ–ë–î –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞"
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Excel —Ñ–∞–π–ª—É –ñ–ë–î –Ω–∞ –ø–æ–º–∏–ª–∫–∏
 * - –í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * - –í–∏–±—ñ—Ä –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
 * - –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
 * 
 * @class ZBDCheckProcessor
 */

import { byId } from './helpers';

export class ZBDCheckProcessor {
  private wordFiles: string[] = [];
  private inputFile: string = '';
  private configExcelFile: string = '';
  private outputFile: string = '';
  private isProcessing: boolean = false;

  constructor() {
    this.setupEventListeners();
    this.loadSavedSettings();

    this.logMessage('‚úÖ –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ñ–ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setTimeout(() => this.updateButtonStates(), 100);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä Word —Ñ–∞–π–ª—ñ–≤ –ñ–ë–î
    const selectWordBtn = byId('zbd-check-select-word');
    const wordFilesField = byId<HTMLInputElement>('zbd-check-word-files');

    selectWordBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É Word —Ñ–∞–π–ª—ñ–≤');
        const result = await window.api?.invoke?.('dialog:select-file', {
          title: '–û–±–µ—Ä—ñ—Ç—å Word —Ñ–∞–π–ª–∏ –ñ–ë–î',
          filters: [
            { name: 'Word Files', extensions: ['docx', 'doc'] },
            { name: 'All Files', extensions: ['*'] }
          ],
          properties: ['openFile', 'multiSelections']
        });

        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤:', result);

        if (result && !result.canceled && result.filePaths?.length > 0) {
          this.wordFiles = result.filePaths;
          if (wordFilesField) {
            const fileNames = this.wordFiles.map(f => f.split(/[/\\]/).pop()).join(', ');
            wordFilesField.value = `–í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${this.wordFiles.length} (${fileNames})`;
          }
          this.saveWordFilesSettings(this.wordFiles);
          this.logMessage(`üìù –í–∏–±—Ä–∞–Ω–æ Word —Ñ–∞–π–ª—ñ–≤: ${this.wordFiles.length}`);
          this.wordFiles.forEach((file, index) => {
            this.logMessage(`  ${index + 1}. ${file}`);
          });
          this.updateButtonStates();
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–∞–π–ª—ñ–≤:', error);
        this.logError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–∞–π–ª—ñ–≤: ${error}`);
      }
    });

    // –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª—É
    const selectInputBtn = byId('zbd-check-select-input');
    const inputFileField = byId<HTMLInputElement>('zbd-check-input-file');

    selectInputBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É Excel —Ñ–∞–π–ª—É');
        const result = await window.api?.invoke?.('dialog:select-file', {
          title: '–û–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏',
          filters: [
            { name: 'Excel Files', extensions: ['xlsx', 'xls'] },
            { name: 'All Files', extensions: ['*'] }
          ],
          properties: ['openFile']
        });

        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É:', result);

        if (result && !result.canceled && result.filePaths?.length > 0) {
          this.inputFile = result.filePaths[0];
          if (inputFileField) {
            inputFileField.value = this.inputFile;
          }
          this.saveInputFileSettings(this.inputFile);
          this.logMessage(`üìÑ –í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª: ${this.inputFile}`);
          this.updateButtonStates();
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–∞–π–ª—É:', error);
        this.logError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–∞–π–ª—É: ${error}`);
      }
    });

    // –í–∏–±—ñ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel
    const selectConfigBtn = byId('zbd-check-select-config');
    const configFileField = byId<HTMLInputElement>('zbd-check-config-excel');

    selectConfigBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel');
        const result = await window.api?.invoke?.('dialog:select-file', {
          title: '–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel —Ñ–∞–π–ª',
          filters: [
            { name: 'Excel Files', extensions: ['xlsx', 'xls'] },
            { name: 'All Files', extensions: ['*'] }
          ],
          properties: ['openFile']
        });

        console.log('‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', result);

        if (result && !result.canceled && result.filePaths?.length > 0) {
          this.configExcelFile = result.filePaths[0];
          if (configFileField) {
            configFileField.value = this.configExcelFile;
          }
          this.saveConfigExcelSettings(this.configExcelFile);
          this.logMessage(`‚öôÔ∏è –í–∏–±—Ä–∞–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel: ${this.configExcelFile}`);
          this.updateButtonStates();
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error);
        this.logError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: ${error}`);
      }
    });

    // –í–∏–±—ñ—Ä –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const selectOutputBtn = byId('zbd-check-select-output');
    const outputFileField = byId<HTMLInputElement>('zbd-check-output-file');

    selectOutputBtn?.addEventListener('click', async () => {
      try {
        console.log('üñ±Ô∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        const result = await window.api?.invoke?.('dialog:save-file', {
          defaultPath: 'ZBD_Check_Result.xlsx',
          filters: [
            { name: 'Excel Files', extensions: ['xlsx'] },
            { name: 'All Files', extensions: ['*'] }
          ]
        });

        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', result);

        if (result) {
          this.outputFile = result;
          if (outputFileField) {
            outputFileField.value = this.outputFile;
          }
          this.saveOutputFileSettings(this.outputFile);
          this.logMessage(`üíæ –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${this.outputFile}`);
          this.updateButtonStates();
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
        this.logError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ü—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error}`);
      }
    });

    // –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–æ–±–∫–∏
    const processBtn = byId('zbd-check-process-btn');
    processBtn?.addEventListener('click', () => this.processFile());

    // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    const cancelBtn = byId('zbd-check-cancel-btn');
    cancelBtn?.addEventListener('click', () => this.cancelProcessing());

    // –ö–Ω–æ–ø–∫–∏ –ª–æ–≥—É
    const clearLogBtn = byId('zbd-check-clear-log');
    clearLogBtn?.addEventListener('click', () => this.clearLog());

    const copyLogBtn = byId('zbd-check-copy-log');
    copyLogBtn?.addEventListener('click', () => this.copyLog());
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É
   */
  private async processFile(): Promise<void> {
    if (this.isProcessing) {
      this.logWarning('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
      return;
    }

    if (this.wordFiles.length === 0) {
      this.logError('‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ Word —Ñ–∞–π–ª–∏ –ñ–ë–î');
      return;
    }

    if (!this.inputFile) {
      this.logError('‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –≤—Ö—ñ–¥–Ω–∏–π Excel —Ñ–∞–π–ª');
      return;
    }

    if (!this.outputFile) {
      this.logError('‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É');
      return;
    }

    this.isProcessing = true;
    this.updateButtonStates();
    this.clearLog();

    try {
      this.logMessage('üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—ñ–≤...');
      this.logMessage(`üìù Word —Ñ–∞–π–ª—ñ–≤: ${this.wordFiles.length}`);
      this.wordFiles.forEach((file, index) => {
        this.logMessage(`  ${index + 1}. ${file.split(/[/\\]/).pop()}`);
      });
      this.logMessage(`üìÑ Excel —Ñ–∞–π–ª: ${this.inputFile}`);
      if (this.configExcelFile) {
        this.logMessage(`‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π Excel: ${this.configExcelFile}`);
      }
      this.logMessage(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.outputFile}`);

      const autoOpen = byId<HTMLInputElement>('zbd-check-autoopen')?.checked ?? true;

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ IPC –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      const result = await window.api?.invoke?.('process:zbd-check', {
        wordFilePaths: this.wordFiles,
        inputFilePath: this.inputFile,
        configExcelPath: this.configExcelFile || null,
        outputFilePath: this.outputFile,
        autoOpen: autoOpen
      });

      if (result?.success) {
        this.logSuccess('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        this.logMessage(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.outputFile}`);

        // –í–∏–≤–æ–¥–∏–º–æ –ª–æ–≥–∏ –∑ Python
        if (result.logs) {
          this.logMessage('\nüìù –õ–æ–≥–∏ –æ–±—Ä–æ–±–∫–∏:');
          this.logMessage(result.logs);
        }

        if (result.stats) {
          this.logMessage(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
          if (result.stats.errors !== undefined) {
            this.logMessage(`  - –ü–æ–º–∏–ª–æ–∫: ${result.stats.errors}`);
          }
          if (result.stats.warnings !== undefined) {
            this.logMessage(`  - –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${result.stats.warnings}`);
          }
        }

        if (autoOpen) {
          this.logMessage('üìÇ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É...');
        }
      } else {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if (result?.logs) {
          this.logMessage('\nüìù –õ–æ–≥–∏ –æ–±—Ä–æ–±–∫–∏:');
          this.logMessage(result.logs);
        }
        throw new Error(result?.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ:', error);
      this.logError(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
    } finally {
      this.isProcessing = false;
      this.updateButtonStates();
    }
  }

  /**
   * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
   */
  private cancelProcessing(): void {
    this.logWarning('üõë –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏...');
    this.isProcessing = false;
    this.updateButtonStates();
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   */
  private updateButtonStates(): void {
    const processBtn = byId<HTMLButtonElement>('zbd-check-process-btn');
    const cancelBtn = byId<HTMLButtonElement>('zbd-check-cancel-btn');

    if (processBtn) {
      processBtn.disabled = this.isProcessing || this.wordFiles.length === 0 || !this.inputFile || !this.outputFile;
      processBtn.style.display = this.isProcessing ? 'none' : 'block';
    }

    if (cancelBtn) {
      cancelBtn.style.display = this.isProcessing ? 'block' : 'none';
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  private logMessage(message: string): void {
    const logBody = byId('zbd-check-log-body');
    if (logBody) {
      const timestamp = new Date().toLocaleTimeString('uk-UA');
      logBody.textContent += `[${timestamp}] ${message}\n`;
      logBody.scrollTop = logBody.scrollHeight;
    }
    console.log(message);
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
   */
  private logError(message: string): void {
    this.logMessage(`‚ùå ${message}`);
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
   */
  private logWarning(message: string): void {
    this.logMessage(`‚ö†Ô∏è ${message}`);
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É
   */
  private logSuccess(message: string): void {
    this.logMessage(`‚úÖ ${message}`);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
   */
  private clearLog(): void {
    const logBody = byId('zbd-check-log-body');
    if (logBody) {
      logBody.textContent = '';
    }
  }

  /**
   * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—É
   */
  private async copyLog(): Promise<void> {
    const logBody = byId('zbd-check-log-body');
    if (logBody && logBody.textContent) {
      try {
        await navigator.clipboard.writeText(logBody.textContent);
        this.logMessage('üìã –õ–æ–≥–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
      } catch (error) {
        this.logError(`–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${error}`);
      }
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Word —Ñ–∞–π–ª—ñ–≤
   */
  private saveWordFilesSettings(files: string[]): void {
    try {
      localStorage.setItem('zbdcheck_word_files', JSON.stringify(files));
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
   */
  private saveInputFileSettings(filePath: string): void {
    try {
      localStorage.setItem('zbdcheck_input_file', filePath);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
   */
  private saveOutputFileSettings(filePath: string): void {
    try {
      localStorage.setItem('zbdcheck_output_file', filePath);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ Excel
   */
  private saveConfigExcelSettings(filePath: string): void {
    try {
      localStorage.setItem('zbdcheck_config_excel', filePath);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  private loadSavedSettings(): void {
    try {
      const savedWordFiles = localStorage.getItem('zbdcheck_word_files');
      const savedInputFile = localStorage.getItem('zbdcheck_input_file');
      const savedConfigExcel = localStorage.getItem('zbdcheck_config_excel');
      const savedOutputFile = localStorage.getItem('zbdcheck_output_file');

      if (savedWordFiles) {
        try {
          this.wordFiles = JSON.parse(savedWordFiles);
          const wordFilesField = byId<HTMLInputElement>('zbd-check-word-files');
          if (wordFilesField && this.wordFiles.length > 0) {
            const fileNames = this.wordFiles.map(f => f.split(/[/\\]/).pop()).join(', ');
            wordFilesField.value = `–í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${this.wordFiles.length} (${fileNames})`;
          }
        } catch (e) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Word —Ñ–∞–π–ª—ñ–≤:', e);
        }
      }

      if (savedInputFile) {
        this.inputFile = savedInputFile;
        const inputFileField = byId<HTMLInputElement>('zbd-check-input-file');
        if (inputFileField) {
          inputFileField.value = savedInputFile;
        }
      }

      if (savedConfigExcel) {
        this.configExcelFile = savedConfigExcel;
        const configFileField = byId<HTMLInputElement>('zbd-check-config-excel');
        if (configFileField) {
          configFileField.value = savedConfigExcel;
        }
      }

      if (savedOutputFile) {
        this.outputFile = savedOutputFile;
        const outputFileField = byId<HTMLInputElement>('zbd-check-output-file');
        if (outputFileField) {
          outputFileField.value = savedOutputFile;
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }
}
