/**
 * NavigationService - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
 * FIXED: –í–∏–Ω–µ—Å–µ–Ω–æ –∑ main.ts (hashchange –æ–±—Ä–æ–±–Ω–∏–∫–∏)
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –†–æ—É—Ç–∏–Ω–≥ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏ –¥–æ–¥–∞—Ç–∫—É
 * - –û–±—Ä–æ–±–∫–∞ hash –∑–º—ñ–Ω URL
 * - –ü–æ–∫–∞–∑/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º
 * - –í–∏–∫–ª–∏–∫ callback-—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É
 * 
 * @class NavigationService
 */

import type { Route } from '../types';
import { log } from '../helpers';

type RouteCallback = (route: Route) => void;

export class NavigationService {
  private callbacks: RouteCallback[] = [];

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î NavigationService
   * FIXED: –ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å–ª—É—Ö–∞—á–∞ hashchange
   */
  constructor() {
    this.setupHashChangeListener();
    this.handleInitialRoute();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –∑–º—ñ–Ω–∏ hash –≤ URL
   * FIXED: –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ hashchange –ø–æ–¥—ñ—ó
   * @private
   */
  private setupHashChangeListener(): void {
    window.addEventListener('hashchange', () => {
      this.handleRouteChange();
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
   * FIXED: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –º–∞—Ä—à—Ä—É—Ç –∑ URL –∞–±–æ –ø–æ–∫–∞–∑—É—î home
   * @private
   */
  private handleInitialRoute(): void {
    const route = this.getCurrentRoute();
    this.showRoute(route);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç—É
   * FIXED: –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ hashchange
   * @private
   */
  private handleRouteChange(): void {
    const route = this.getCurrentRoute();
    this.showRoute(route);
    this.notifyCallbacks(route);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –∑ URL
   * FIXED: –ü–∞—Ä—Å–∏—Ç—å hash —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î Route
   * @public
   */
  public getCurrentRoute(): Route {
    const hash = location.hash.slice(2) || 'functions'; // #/ –≤–∏–¥–∞–ª—è—î–º–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º functions
    return hash as Route;
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–µ–∫—Ü—ñ—ó –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º
   * FIXED: –•–æ–≤–∞—î –≤—Å—ñ .route —Ç–∞ –ø–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π
   * @private
   */
  private showRoute(route: Route): void {
    // –•–æ–≤–∞—î–º–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    document.querySelectorAll<HTMLElement>('.route').forEach(el => {
      el.hidden = true;
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç (—à—É–∫–∞—î–º–æ –∑–∞ data-route)
    const routeElement = document.querySelector<HTMLElement>(`[data-route="/${route}"]`);
    if (routeElement) {
      routeElement.hidden = false;
      log(`üìç –ù–∞–≤—ñ–≥–∞—Ü—ñ—è: ${route}`);
    } else {
      console.warn(`Route element not found: /${route}`);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—É–Ω–∫—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    document.querySelectorAll('.nav a').forEach(link => {
      const href = link.getAttribute('href') || '';
      link.classList.toggle('active', href === `#/${route}`);
    });
  }

  /**
   * –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–∞ —ñ–Ω—à–∏–π –º–∞—Ä—à—Ä—É—Ç
   * FIXED: –ó–º—ñ–Ω—é—î hash —Ç–∞ –æ–Ω–æ–≤–ª—é—î UI
   * @public
   */
  public navigateTo(route: Route): void {
    location.hash = `#/${route}`;
  }

  /**
   * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callback –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É
   * FIXED: –î–æ–∑–≤–æ–ª—è—î —ñ–Ω—à–∏–º –º–æ–¥—É–ª—è–º —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
   * @public
   */
  public onRouteChange(callback: RouteCallback): void {
    this.callbacks.push(callback);
  }

  /**
   * –í–∏–∫–ª–∏–∫ –≤—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö callbacks
   * FIXED: –°–ø–æ–≤—ñ—â–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É –º–∞—Ä—à—Ä—É—Ç—É
   * @private
   */
  private notifyCallbacks(route: Route): void {
    this.callbacks.forEach(callback => {
      try {
        callback(route);
      } catch (error) {
        console.error('Error in route callback:', error);
      }
    });
  }
}
