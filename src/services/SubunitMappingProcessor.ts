/**
 * SubunitMappingProcessor.ts - –ì–æ–ª–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ –∫–ª—é—á—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–æ–±–∫–∏:
 * 1. –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ Excel —Ñ–∞–π–ª–∞–º–∏
 * 2. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * 3. –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ (Map<–Ω–∞–∑–≤–∞, –Ω–æ–º–µ—Ä_—Ä—è–¥–∫–∞>)
 * 4. –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É:
 *    - –ß–∏—Ç–∞–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤ –ó–° —Ç–∞ –ë–ó
 *    - –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞:
 *      - –ß–∏—Ç–∞–Ω–Ω—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –∑ –∫–æ–ª–æ–Ω–∫–∏ B
 *      - –ü–æ—à—É–∫ —É —ñ–Ω–¥–µ–∫—Å—ñ
 *      - –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è C:H —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 * 6. –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import ExcelJS from 'exceljs';
import { 
  SubunitIndex, 
  FileProcessingResult, 
  SheetProcessingResult,
  ProcessingStats,
  CopyOptions,
  ProgressCallback,
  FileInfo
} from '../types/MappingTypes';
import { 
  SHEET_NAMES, 
  COLUMNS, 
  DEFAULT_COPY_OPTIONS,
  PROCESSING_PHASES,
  PROCESSING_OPTIONS,
  SUBUNIT_BLACKLIST
} from '../config/constants';

// üêç –¢–∏–ø–∏ –¥–ª—è Python —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó (snake_case –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ Python)
export interface PythonProcessConfig {
  destination_file: string;
  source_files: string[];
  sheets: Array<{
    name: string;
    key_column: string;
    data_columns: string[];
    blacklist: string[];
  }>;
}

export interface PythonProcessResult {
  success: boolean;
  total_rows?: number;
  error?: string;
}
import { 
  getColumnsRange,
  isTempFile,
  isExcelFile
} from '../utils/subunitUtils';
import {
  findSingleContiguousBlock,
  findAllContiguousBlocks
} from '../utils/blockUtils';

export class SubunitMappingProcessor {
  private destinationWorkbook: ExcelJS.Workbook | null = null;
  private copyOptions: CopyOptions = DEFAULT_COPY_OPTIONS;
  
  /**
   * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏
   * 
   * @param inputFolder - –ü–∞–ø–∫–∞ –∑ –≤—Ö—ñ–¥–Ω–∏–º–∏ Excel —Ñ–∞–π–ª–∞–º–∏
   * @param destinationFile - –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
   * @param onProgress - Callback –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
   * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏
   */
  async process(
    inputFolder: string,
    destinationFile: string,
    onProgress?: ProgressCallback
  ): Promise<ProcessingStats> {
    // üêç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Python –∑–∞–º—ñ—Å—Ç—å ExcelJS (–≤–∏–ø—Ä–∞–≤–ª—è—î XML –ø–æ–º–∏–ª–∫–∏)
    console.log(`\nÔøΩ ‚ïê‚ïê‚ïê –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–¢–¨–°–Ø PYTHON EXCEL PROCESSOR ‚ïê‚ïê‚ïê\n`);
    return this.processWithPython(inputFolder, destinationFile, onProgress);
  }
  
  /**
   * –§–∞–∑–∞ 1: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Excel —Ñ–∞–π–ª—ñ–≤
   * 
   * @param folderPath - –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
   * @returns –ú–∞—Å–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª–∏
   */
  private async scanFolder(folderPath: string): Promise<FileInfo[]> {
    try {
      // –í–∏–∫–ª–∏–∫ Electron API –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏
      if (!window.api || !window.api.readDirectory) {
        throw new Error('API –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
      }
      
      const allFiles: FileInfo[] = await window.api.readDirectory(folderPath);
      
      // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ Excel —Ñ–∞–π–ª—ñ–≤ (–±–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö)
      const excelFiles = allFiles.filter(file => {
        const isExcel = isExcelFile(file.name);
        const isNotTemp = PROCESSING_OPTIONS.SKIP_TEMP_FILES 
          ? !isTempFile(file.name)
          : true;
        
        return isExcel && isNotTemp;
      });
      
      return excelFiles;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏: ${errorMessage}`);
    }
  }
  
  /**
   * @deprecated –¶–µ–π –º–µ—Ç–æ–¥ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –í—Å—è –æ–±—Ä–æ–±–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ Python.
   * –ó–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ.
   */
  // @ts-ignore - Deprecated ExcelJS method, not used in production
  private async processSheet(
    sourceSheet: ExcelJS.Worksheet,
    sheetName: string,
    index: SubunitIndex,
    sheetType: 'ZS' | 'BZ'
  ): Promise<SheetProcessingResult> {
    console.log(`\nüîÑ === –û–ë–†–û–ë–ö–ê –õ–ò–°–¢–ê "${sheetName}" (–ù–û–í–ò–ô –ê–õ–ì–û–†–ò–¢–ú) ===`);
    
    // ‚úÖ –í–ò–ë–ò–†–ê–Ñ–ú–û –ü–†–ê–í–ò–õ–¨–ù–Ü –ö–û–õ–û–ù–ö–ò
    const columns = COLUMNS[sheetType];
    console.log(`üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ${sheetType}:`);
    console.log(`   ‚Ä¢ –ö–ª—é—á: ${columns.SUBUNIT_KEY}`);
    console.log(`   ‚Ä¢ –î–∞–Ω—ñ: ${columns.DATA_START}:${columns.DATA_END}`);
    
    const result: SheetProcessingResult = {
      sheetName,
      totalRows: 0,
      copiedRows: 0,
      skippedRows: 0,
      missingSubunits: [],
      errors: []
    };
    
    const destSheet = this.destinationWorkbook?.getWorksheet(sheetName);
    if (!destSheet) {
      const error = `–õ–∏—Å—Ç "${sheetName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è`;
      console.error(`‚ùå ${error}`);
      result.errors.push(error);
      return result;
    }
    
    console.log(`‚úÖ –õ–∏—Å—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –æ–±—Ä–æ–±–∫–∏`);
    console.log(`üìä –í—Ö—ñ–¥–Ω–∏–π: ${sourceSheet.rowCount} —Ä—è–¥–∫—ñ–≤`);
    console.log(`üìä –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${destSheet.rowCount} —Ä—è–¥–∫—ñ–≤`);
    
    const columnsTo–°opy = getColumnsRange(columns.DATA_START, columns.DATA_END);
    console.log(`üìã –ö–æ–ª–æ–Ω–∫–∏: ${columnsTo–°opy.join(', ')}`);
    
    // –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–ª—é—á—ñ –∑ —ñ–Ω–¥–µ–∫—Å—É
    const uniqueKeys = Array.from(index.keys());
    
    // ‚úÖ –ù–û–í–ï: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è blacklist
    const blacklist = SUBUNIT_BLACKLIST[sheetType] as readonly string[];
    const filteredKeys = uniqueKeys.filter(key => !blacklist.includes(key));
    
    console.log(`ÔøΩ –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –≤ —ñ–Ω–¥–µ–∫—Å—ñ: ${uniqueKeys.length}`);
    console.log(`üö´ –í–∏–∫–ª—é—á–µ–Ω–æ (blacklist): ${uniqueKeys.length - filteredKeys.length}`);
    console.log(`‚úÖ –î–æ –æ–±—Ä–æ–±–∫–∏: ${filteredKeys.length}`);
    
    if (blacklist.length > 0) {
      console.log(`   Blacklist –¥–ª—è ${sheetType}: ${blacklist.join(', ')}`);
    }
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ)
    for (const key of filteredKeys) {
      console.log(`\n--- –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: "${key}" ---`);
      
      // 1) –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫ —É –¥–∂–µ—Ä–µ–ª—ñ
      const srcBlock = findSingleContiguousBlock(sourceSheet, columns.SUBUNIT_KEY, key);
      
      if (!srcBlock) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–∂–µ—Ä–µ–ª—ñ`);
        continue;
      }
      
      console.log(`‚úÖ –î–∂–µ—Ä–µ–ª–æ: —Ä—è–¥–∫–∏ ${srcBlock.startRow}-${srcBlock.endRow} (${srcBlock.rowCount} —Ä—è–¥–∫—ñ–≤)`);
      result.totalRows += srcBlock.rowCount;
      
      // 2) –ó–Ω–∞—Ö–æ–¥–∏–º–æ –í–°–Ü –±–ª–æ–∫–∏ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ
      const dstBlocks = findAllContiguousBlocks(destSheet, columns.SUBUNIT_KEY, key);
      
      if (dstBlocks.length === 0) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ`);
        result.skippedRows += srcBlock.rowCount;
        if (!result.missingSubunits.includes(key)) {
          result.missingSubunits.push(key);
        }
        continue;
      }
      
      console.log(`‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${dstBlocks.length} –±–ª–æ–∫(—ñ–≤)`);
      dstBlocks.forEach((block, idx) => {
        console.log(`   –ë–ª–æ–∫ ${idx + 1}: —Ä—è–¥–∫–∏ ${block.startRow}-${block.endRow} (${block.rowCount} —Ä—è–¥–∫—ñ–≤)`);
      });
      
      // 3) –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –ø–æ —á–∞—Å—Ç–∏–Ω–∞–º
      let srcRowPtr = srcBlock.startRow;
      
      for (let d = 0; d < dstBlocks.length; d++) {
        const dstBlock = dstBlocks[d];
        
        // –°–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—å —É –¥–∂–µ—Ä–µ–ª—ñ
        const rowsLeftSrc = (srcBlock.endRow - srcRowPtr + 1);
        if (rowsLeftSrc <= 0) {
          console.log(`‚ö†Ô∏è  –î–∞–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å`);
          break;
        }
        
        // –°–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –∫–æ–ø—ñ—é–≤–∞—Ç–∏
        const rowsToCopy = Math.min(rowsLeftSrc, dstBlock.rowCount);
        
        console.log(`\nÔøΩ –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —É –±–ª–æ–∫ ${d + 1}:`);
        console.log(`   –î–∂–µ—Ä–µ–ª–æ: —Ä—è–¥–∫–∏ ${srcRowPtr}-${srcRowPtr + rowsToCopy - 1}`);
        console.log(`   –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: —Ä—è–¥–∫–∏ ${dstBlock.startRow}-${dstBlock.startRow + rowsToCopy - 1}`);
        console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${rowsToCopy} —Ä—è–¥–∫—ñ–≤ √ó ${columnsTo–°opy.length} –∫–æ–ª–æ–Ω–æ–∫`);
        
        try {
          // –ö–õ–Æ–ß–û–í–ò–ô –ú–û–ú–ï–ù–¢: –ö–æ–ø—ñ—é—î–º–æ –ë–õ–û–ö, –∞ –Ω–µ –∫–æ–º—ñ—Ä–∫—É –∑–∞ –∫–æ–º—ñ—Ä–∫–æ—é!
          // @ts-ignore - Deprecated method, not used in production
          this.copyBlockValues(
            sourceSheet,
            destSheet,
            srcRowPtr,
            dstBlock.startRow,
            rowsToCopy,
            columnsTo–°opy
          );
          
          result.copiedRows += rowsToCopy;
          console.log(`   ‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
          
          // –û—á–∏—â—É—î–º–æ "—Ö–≤—ñ—Å—Ç" —è–∫—â–æ –±–ª–æ–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—ñ–ª—å—à–∏–π
          if (rowsToCopy < dstBlock.rowCount) {
            const tailRows = dstBlock.rowCount - rowsToCopy;
            const tailStart = dstBlock.startRow + rowsToCopy;
            
            // @ts-ignore - Deprecated method, not used in production
            this.clearBlockValues(
              destSheet,
              tailStart,
              tailRows,
              columnsTo–°opy
            );
            
            console.log(`   üßπ –û—á–∏—â–µ–Ω–æ —Ö–≤—ñ—Å—Ç: ${tailRows} —Ä—è–¥–∫—ñ–≤`);
          }
          
          srcRowPtr += rowsToCopy;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          const errorMsg = `–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${errorMessage}`;
          result.errors.push(errorMsg);
          console.error(`   ‚ùå –ü–û–ú–ò–õ–ö–ê:`, error);
        }
      }
    }
    
    console.log(`\nüìä –ü–Ü–î–°–£–ú–û–ö "${sheetName}":`);
    console.log(`   –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤: ${result.totalRows}`);
    console.log(`   –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ${result.copiedRows}`);
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skippedRows}`);
    console.log(`üîÑ === –ö–Ü–ù–ï–¶–¨ "${sheetName}" ===\n`);
    
    return result;
  }
  
  /**
   * –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * 
   * @param results - –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
   * @param startTime - –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏ (ms)
   * @returns –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  private calculateStats(
    results: FileProcessingResult[], 
    startTime: number
  ): ProcessingStats {
    const stats: ProcessingStats = {
      totalFiles: results.length,
      processedFiles: 0,
      failedFiles: 0,
      totalCopiedRowsZS: 0,
      totalCopiedRowsBZ: 0,
      totalSkippedRowsZS: 0,
      totalSkippedRowsBZ: 0,
      allMissingSubunits: [],
      processingTime: (Date.now() - startTime) / 1000
    };
    
    const missingSet = new Set<string>();
    
    results.forEach(result => {
      if (result.processed) {
        stats.processedFiles++;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ó–°
        if (result.zsSheet) {
          stats.totalCopiedRowsZS += result.zsSheet.copiedRows;
          stats.totalSkippedRowsZS += result.zsSheet.skippedRows;
          result.zsSheet.missingSubunits.forEach(s => missingSet.add(s));
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–ó
        if (result.bzSheet) {
          stats.totalCopiedRowsBZ += result.bzSheet.copiedRows;
          stats.totalSkippedRowsBZ += result.bzSheet.skippedRows;
          result.bzSheet.missingSubunits.forEach(s => missingSet.add(s));
        }
      } else {
        stats.failedFiles++;
      }
    });
    
    stats.allMissingSubunits = Array.from(missingSet).sort();
    
    return stats;
  }
  
  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
   * 
   * @param options - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
   */
  setCopyOptions(options: Partial<CopyOptions>): void {
    this.copyOptions = {
      ...this.copyOptions,
      ...options
    };
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
   */
  getCopyOptions(): CopyOptions {
    return { ...this.copyOptions };
  }
  
  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥: –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª—ñ—Ç–µ—Ä –∫–æ–ª–æ–Ω–æ–∫
   */
  private getColumnsList(start: string, end: string): string[] {
    const columns: string[] = [];
    const startCode = start.charCodeAt(0);
    const endCode = end.charCodeAt(0);
    
    for (let code = startCode; code <= endCode; code++) {
      columns.push(String.fromCharCode(code));
    }
    
    return columns;
  }
  
  /**
   * –ù–û–í–ò–ô –ú–ï–¢–û–î: –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ Python
   */
  async processWithPython(
    inputFolder: string,
    destinationFile: string,
    onProgress?: ProgressCallback
  ): Promise<ProcessingStats> {
    const startTime = Date.now();
    
    try {
      // –§–∞–∑–∞ 1: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏
      onProgress?.(PROCESSING_PHASES.SCANNING.percent, PROCESSING_PHASES.SCANNING.label);
      const files = await this.scanFolder(inputFolder);
      
      console.log(`\nüìÅ ‚ïê‚ïê‚ïê –°–ö–ê–ù–£–í–ê–ù–ù–Ø –ü–ê–ü–ö–ò ‚ïê‚ïê‚ïê`);
      console.log(`üìç –®–ª—è—Ö: ${inputFolder}`);
      console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª—ñ–≤: ${files.length}`);
      
      if (files.length === 0) {
        console.log(`‚ö†Ô∏è –£ –ø–∞–ø—Ü—ñ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ Excel`);
        throw new Error('–£ –ø–∞–ø—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª—ñ–≤');
      }
      
      console.log(`üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏:`);
      files.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file.name}`);
      });
      
      // üêç –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û PYTHON
      console.log(`\nüêç ‚ïê‚ïê‚ïê –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û PYTHON EXCEL PROCESSOR ===\n`);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è 3–ë–°–ü
      const enable3BSP = await window.api?.getSetting?.('enable3BSP', false) || false;
      console.log(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è enable3BSP: ${enable3BSP}`);
      
      const enableSanitizer = await window.api?.getSetting?.('excel.enableSanitizer', false) || false;
      console.log(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è enableSanitizer: ${enableSanitizer}`);
      
      const enableMismatches = await window.api?.getSetting?.('excel.showMismatches', false) || false;
      console.log(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è enableMismatches: ${enableMismatches}`);
      
      const enableSliceCheck = await window.api?.getSetting?.('excel.enableSliceCheck', false) || false;
      console.log(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è enableSliceCheck: ${enableSliceCheck}`);
      
      const enableDuplicates = await window.api?.getSetting?.('excel.enableDuplicates', false) || false;
      console.log(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è enableDuplicates: ${enableDuplicates}`);
      
      // –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è Python (snake_case –¥–ª—è Python)
      const config: any = {
        destination_file: destinationFile,
        source_files: files.map(f => f.path),
        enable_3bsp: enable3BSP,  // üÜï –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è 3–ë–°–ü
        enable_sanitizer: enableSanitizer,  // üßπ –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó
        enable_mismatches: enableMismatches,  // üîç –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π
        enable_slice_check: enableSliceCheck,  // üî™ –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ¬´–∑—Ä—ñ–∑—ñ–≤¬ª
        enable_duplicates: enableDuplicates,  // üîÅ –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        sheets: [
          {
            name: SHEET_NAMES.ZS,
            key_column: COLUMNS.ZS.SUBUNIT_KEY,
            data_columns: this.getColumnsList(COLUMNS.ZS.DATA_START, COLUMNS.ZS.DATA_END),
            blacklist: Array.from(SUBUNIT_BLACKLIST.ZS)
          },
          {
            name: SHEET_NAMES.BZ,
            key_column: COLUMNS.BZ.SUBUNIT_KEY,
            data_columns: this.getColumnsList(COLUMNS.BZ.DATA_START, COLUMNS.BZ.DATA_END),
            blacklist: Array.from(SUBUNIT_BLACKLIST.BZ)
          }
        ]
      };
      
      onProgress?.(PROCESSING_PHASES.PROCESSING.percentStart, '–û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ Python...');
      
      // üêç –í–∏–∫–ª–∏–∫–∞—î–º–æ Python —á–µ—Ä–µ–∑ IPC
      if (!window.api || !window.api.invoke) {
        throw new Error('‚ùå Electron API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ preload.ts –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
      }
      
      const pythonResult = await window.api.invoke('python:process-excel', config) as PythonProcessResult;
      
      if (!pythonResult.success) {
        throw new Error(pythonResult.error || 'Python processing failed');
      }
      
      console.log(`‚úÖ Python –æ–±—Ä–æ–±–∏–≤ ${pythonResult.total_rows} —Ä—è–¥–∫—ñ–≤`);
      
      // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const results: FileProcessingResult[] = files.map(file => ({
        fileName: file.name,
        filePath: file.path,
        processed: true,
        zsSheet: { sheetName: SHEET_NAMES.ZS, totalRows: 0, copiedRows: pythonResult.total_rows || 0, skippedRows: 0, missingSubunits: [], errors: [] },
        bzSheet: null
      }));
      
      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const stats = this.calculateStats(results, startTime);
      
      onProgress?.(PROCESSING_PHASES.COMPLETE.percent, PROCESSING_PHASES.COMPLETE.label);
      
      console.log(`\n‚úÖ ‚ïê‚ïê‚ïê –û–ë–†–û–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n`);
      
      return stats;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMessage}`);
    }
  }
}
