/**
 * Orchestrator - –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤
 * –ö–µ—Ä—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –∑–∞–ø—É—Å–∫–æ–º –æ–±—Ä–æ–±–∫–∏
 */

import { 
  StartProcessPayload, 
  Event, 
  SummarizeParams,
  Mode
} from './types';
import { loadConfig, getPresetsForMode, validatePreset } from './config';
import { summarize, validateSummarizeParams } from './summarizer';

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è
 * @param payload - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥ UI
 * @param emit - —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–¥—ñ–π
 */
export async function startProcess(
  payload: StartProcessPayload,
  emit: (event: Event) => void
): Promise<void> {
  try {
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const validationErrors = validateInputs(payload);
    if (validationErrors.length > 0) {
      const errorMessage = `–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${validationErrors.join('; ')}`;
      emit({ type: 'failed', error: errorMessage });
      return;
    }

    emit({ 
      type: 'log', 
      level: 'INFO', 
      message: `üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–≤–µ–¥–µ–Ω–Ω—è. –†–µ–∂–∏–º: ${payload.mode}`, 
      ts: new Date().toISOString() 
    });

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    const config = await loadConfig(payload.configPath);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º—É
    const runModes = getPresetsForMode(config, payload.mode);
    
    if (runModes.length === 0) {
      emit({ type: 'failed', error: `–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∂–∏–º—É "${payload.mode}"` });
      return;
    }

    // –í–∞–ª—ñ–¥—É—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏
    for (const preset of runModes) {
      if (!validatePreset(preset)) {
        emit({ type: 'failed', error: `–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–µ—Å–µ—Ç—É –¥–ª—è —Ä–µ–∂–∏–º—É "${preset.DST_SHEET}"` });
        return;
      }
    }

    emit({ 
      type: 'log', 
      level: 'INFO', 
      message: `üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${runModes.length} —Ä–µ–∂–∏–º(—ñ–≤) –¥–ª—è –æ–±—Ä–æ–±–∫–∏`, 
      ts: new Date().toISOString() 
    });

    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö–∏—Å—Ç –∞—Ä–∫—É—à–∞ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–æ–ª—å
    if (payload.dstSheetPassword) {
      emit({ 
        type: 'log', 
        level: 'WARN', 
        message: `‚ö†Ô∏è –í–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞—Ä–∫—É—à–∞, –∞–ª–µ –∑–Ω—è—Ç—Ç—è –∑–∞—Ö–∏—Å—Ç—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∞—Ä–∫—É—à –Ω–µ –∑–∞—Ö–∏—â–µ–Ω–∏–π.`, 
        ts: new Date().toISOString() 
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å—ñ—Ö —Ä–µ–∂–∏–º–∞—Ö
    let foundFilesTotal = 0;
    let copiedRowsTotal = 0;
    let warningsTotal = 0;
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ä–µ–∂–∏–º
    for (let i = 0; i < runModes.length; i++) {
      const preset = runModes[i];
      
      emit({ 
        type: 'log', 
        level: 'INFO', 
        message: `üìä –†–µ–∂–∏–º ${i + 1}/${runModes.length}: ${preset.DST_SHEET}`, 
        ts: new Date().toISOString() 
      });

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–≤–µ–¥–µ–Ω–Ω—è
      const summarizeParams: SummarizeParams = {
        ...preset,
        SRC_FOLDER: payload.srcFolder,
        DST_SHEET_PASSWORD: payload.dstSheetPassword
      };

      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
      const paramErrors = validateSummarizeParams(summarizeParams);
      if (paramErrors.length > 0) {
        const errorMessage = `–ü–æ–º–∏–ª–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ä–µ–∂–∏–º—É "${preset.DST_SHEET}": ${paramErrors.join('; ')}`;
        emit({ type: 'log', level: 'ERROR', message: errorMessage, ts: new Date().toISOString() });
        emit({ type: 'failed', error: errorMessage });
        return;
      }

      try {
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        const result = await summarize(summarizeParams, payload.dstPath, emit);
        
        foundFilesTotal += result.foundFiles;
        copiedRowsTotal += result.copiedRows;
        warningsTotal += result.warnings;

        emit({ 
          type: 'log', 
          level: 'INFO', 
          message: `‚úÖ –†–µ–∂–∏–º "${preset.DST_SHEET}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª—ñ–≤: ${result.foundFiles}, —Ä—è–¥–∫—ñ–≤: ${result.copiedRows}, –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${result.warnings}`, 
          ts: new Date().toISOString() 
        });

      } catch (error) {
        const errorMessage = `–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∂–∏–º—ñ "${preset.DST_SHEET}": ${error}`;
        emit({ type: 'log', level: 'ERROR', message: errorMessage, ts: new Date().toISOString() });
        emit({ type: 'failed', error: errorMessage });
        return;
      }
    }

    // –ü—ñ–¥—Å—É–º–æ–∫
    emit({ 
      type: 'log', 
      level: 'INFO', 
      message: `üéâ –í—Å—ñ —Ä–µ–∂–∏–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`, 
      ts: new Date().toISOString() 
    });
    
    emit({ 
      type: 'log', 
      level: 'INFO', 
      message: `üìà –ü—ñ–¥—Å—É–º–æ–∫: —Ñ–∞–π–ª—ñ–≤ - ${foundFilesTotal}, —Ä—è–¥–∫—ñ–≤ - ${copiedRowsTotal}, –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å - ${warningsTotal}`, 
      ts: new Date().toISOString() 
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    emit({
      type: 'done',
      summary: {
        foundFiles: foundFilesTotal,
        copiedRows: copiedRowsTotal,
        warnings: warningsTotal
      }
    });

  } catch (error) {
    const errorMessage = `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ orchestrator: ${error}`;
    emit({ type: 'log', level: 'ERROR', message: errorMessage, ts: new Date().toISOString() });
    emit({ type: 'failed', error: errorMessage });
  }
}

/**
 * –í–∞–ª—ñ–¥—É—î –≤—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥ UI
 */
function validateInputs(payload: StartProcessPayload): string[] {
  const errors: string[] = [];

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ –¥–∂–µ—Ä–µ–ª–∞
  if (!payload.srcFolder || payload.srcFolder.trim() === '') {
    errors.push('–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞–ø–∫—É –¥–∂–µ—Ä–µ–ª–∞');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
  if (!payload.dstPath || payload.dstPath.trim() === '') {
    errors.push('–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è');
  } else if (!payload.dstPath.toLowerCase().endsWith('.xlsx')) {
    errors.push('–§–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .xlsx');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É
  const validModes: Mode[] = ['–ë–ó', '–ó–°', '–û–±–∏–¥–≤–∞'];
  if (!validModes.includes(payload.mode)) {
    errors.push(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º "${payload.mode}". –î–æ–∑–≤–æ–ª–µ–Ω—ñ: ${validModes.join(', ')}`);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–ª—è—Ö—É –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ)
  if (payload.configPath && payload.configPath.trim() !== '') {
    if (!payload.configPath.toLowerCase().endsWith('.json')) {
      errors.push('–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .json');
    }
  }

  return errors;
}

/**
 * –°—Ç–≤–æ—Ä—é—î mock stream –ø–æ–¥—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 * –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ü–µ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ Observable –∞–±–æ EventEmitter
 */
export class ProcessEventEmitter {
  private listeners: ((event: Event) => void)[] = [];

  subscribe(listener: (event: Event) => void): void {
    this.listeners.push(listener);
  }

  unsubscribe(listener: (event: Event) => void): void {
    const index = this.listeners.indexOf(listener);
    if (index >= 0) {
      this.listeners.splice(index, 1);
    }
  }

  emit(event: Event): void {
    this.listeners.forEach(listener => {
      try {
        listener(event);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤ listener:', error);
      }
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –µ–º—ñ—Å—ñ—î—é –ø–æ–¥—ñ–π
   */
  async startProcess(payload: StartProcessPayload): Promise<void> {
    await startProcess(payload, (event) => this.emit(event));
  }
}

/**
 * –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É
 */
export async function runSummarization(
  payload: StartProcessPayload,
  onEvent?: (event: Event) => void
): Promise<{ foundFiles: number; copiedRows: number; warnings: number } | null> {
  
  return new Promise((resolve, reject) => {
    const emitter = new ProcessEventEmitter();
    
    let result: { foundFiles: number; copiedRows: number; warnings: number } | null = null;

    emitter.subscribe((event) => {
      // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–¥—ñ—ó –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É
      if (onEvent) {
        onEvent(event);
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó
      switch (event.type) {
        case 'done':
          result = event.summary;
          resolve(result);
          break;
        case 'failed':
          reject(new Error(event.error));
          break;
      }
    });

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å
    emitter.startProcess(payload).catch(reject);
  });
}