/**
 * UILoggerService - –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –≤ UI –¥–æ–¥–∞—Ç–∫—É
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö console.log/error/warn –∑ main process
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –≤ UI
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π scroll –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ª–æ–≥—É
 * - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ –µ–º–æ–¥–∑—ñ
 * 
 * @module UILoggerService
 * @version 1.0.0
 */

export class UILoggerService {
  private logContainer: HTMLElement | null = null;
  private maxLogs: number = 100; // –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ 100 –¥–ª—è –ø—Ä–æ—Å—Ç—ñ—à–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
  private autoScroll: boolean = true;

  constructor() {
    this.initialize();
    this.setupClearButton();
    this.setupCopyButton();
    this.clearOldLogs(); // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –ª–æ–≥—É–≤–∞–Ω–Ω—è
   */
  private initialize(): void {
    this.logContainer = document.getElementById('log-body');
    
    if (!this.logContainer) {
      console.warn('‚ùå UILoggerService: log-body –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
      return;
    }

    // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏ –∑ main process
    this.setupLogListeners();
    
    // –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è console –≤ renderer process
    this.interceptConsole();
    
    this.log('info', '‚úÖ UILoggerService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }

  /**
   * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏ –∑ main process —á–µ—Ä–µ–∑ IPC
   */
  private setupLogListeners(): void {
    // –°–ª—É—Ö–∞—î–º–æ –ª–æ–≥–∏ –∑ main process
    if (window.api && 'onLog' in window.api) {
      (window.api as any).onLog((level: string, message: string) => {
        this.log(level as 'info' | 'warn' | 'error', message);
      });
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
   */
  private setupClearButton(): void {
    const clearButton = document.getElementById('btn-clear-log');
    if (clearButton) {
      clearButton.addEventListener('click', () => {
        this.clear();
        this.log('info', 'üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ');
      });
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
   */
  private setupCopyButton(): void {
    const copyButton = document.getElementById('btn-copy-log');
    if (copyButton) {
      copyButton.addEventListener('click', async () => {
        const logBody = document.getElementById('log-body');
        if (logBody && logBody.textContent) {
          try {
            await navigator.clipboard.writeText(logBody.textContent);
            this.log('info', 'üìã –õ–æ–≥–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
          } catch (err) {
            this.log('error', `‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${err}`);
          }
        } else {
          this.log('warn', '‚ö†Ô∏è –ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è');
        }
      });
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è console.log/warn/error –≤ renderer process
   */
  private interceptConsole(): void {
    const originalLog = console.log;
    const originalWarn = console.warn;
    const originalError = console.error;

    console.log = (...args: any[]) => {
      originalLog.apply(console, args);
      this.log('info', this.formatArgs(args));
    };

    console.warn = (...args: any[]) => {
      originalWarn.apply(console, args);
      this.log('warn', this.formatArgs(args));
    };

    console.error = (...args: any[]) => {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ Autofill –ø–æ–º–∏–ª–∫–∏
      const msg = args[0]?.toString() || '';
      if (msg.includes('Autofill.enable') || msg.includes('Autofill.setAddresses')) {
        return;
      }
      originalError.apply(console, args);
      this.log('error', this.formatArgs(args));
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ console –≤ —Å—Ç—Ä–æ–∫—É
   */
  private formatArgs(args: any[]): string {
    return args.map(arg => {
      if (typeof arg === 'object') {
        try {
          return JSON.stringify(arg, null, 2);
        } catch {
          return String(arg);
        }
      }
      return String(arg);
    }).join(' ');
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É –≤ UI
   */
  public log(level: 'info' | 'warn' | 'error', message: string): void {
    if (!this.logContainer) return;

    const timestamp = new Date().toLocaleTimeString('uk-UA');
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry log-${level}`;
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è
    let emoji = '';
    switch (level) {
      case 'error':
        emoji = '‚ùå';
        break;
      case 'warn':
        emoji = '‚ö†Ô∏è';
        break;
      default:
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —î
        emoji = this.extractEmoji(message) || 'üìù';
    }

    logEntry.innerHTML = `
      <span class="log-time">${timestamp}</span>
      <span class="log-icon">${emoji}</span>
      <span class="log-message">${this.escapeHtml(message)}</span>
    `;

    // –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.logContainer.appendChild(logEntry);

    // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤
    this.limitLogs();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π scroll –≤–Ω–∏–∑
    if (this.autoScroll) {
      this.scrollToBottom();
    }
  }

  /**
   * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –∑ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  private extractEmoji(message: string): string | null {
    const emojiRegex = /^[\u{1F300}-\u{1F9FF}]|^[\u{2600}-\u{26FF}]|^[\u{2700}-\u{27BF}]/u;
    const match = message.match(emojiRegex);
    return match ? match[0] : null;
  }

  /**
   * Escape HTML —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   */
  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–æ–≥—ñ–≤
   */
  private limitLogs(): void {
    if (!this.logContainer) return;

    const entries = this.logContainer.querySelectorAll('.log-entry');
    if (entries.length > this.maxLogs) {
      const toRemove = entries.length - this.maxLogs;
      for (let i = 0; i < toRemove; i++) {
        entries[i].remove();
      }
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ª–æ–≥—É
   */
  private scrollToBottom(): void {
    if (!this.logContainer) return;
    this.logContainer.scrollTop = this.logContainer.scrollHeight;
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ª–æ–≥—ñ–≤
   */
  public clear(): void {
    if (this.logContainer) {
      this.logContainer.innerHTML = '';
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
   */
  private clearOldLogs(): void {
    // –û—á–∏—â–∞—î–º–æ –ª–æ–≥–∏ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
    this.clear();
    this.log('info', 'üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É');
  }

  /**
   * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ scroll
   */
  public setAutoScroll(enabled: boolean): void {
    this.autoScroll = enabled;
  }
}
