import ExcelJS from 'exceljs';

/**
 * –ë–ª–æ–∫ —Ä—è–¥–∫—ñ–≤ –∑ –æ–¥–Ω–∏–º –∫–ª—é—á–µ–º
 */
export interface ContiguousBlock {
  startRow: number;      // –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –±–ª–æ–∫—É
  endRow: number;        // –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –±–ª–æ–∫—É
  rowCount: number;      // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
  key: string;           // –ö–ª—é—á –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
}

/**
 * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ü–ï–†–®–ò–ô –∫–æ–Ω—Ç—ñ–≥—É–∞–ª—å–Ω–∏–π –±–ª–æ–∫ —É –¥–∂–µ—Ä–µ–ª—ñ
 * (–≤—Å—ñ –ø—ñ–¥—Ä—è–¥ —Ä—è–¥–∫–∏ –∑ –æ–¥–Ω–∏–º –∫–ª—é—á–µ–º —É –∫–æ–ª–æ–Ω—Ü—ñ B)
 */
export function findSingleContiguousBlock(
  sheet: ExcelJS.Worksheet,
  keyColumn: string,
  key: string
): ContiguousBlock | null {
  
  console.log(`  üîç –ü–æ—à—É–∫ –±–ª–æ–∫—É –¥–ª—è –∫–ª—é—á–∞ "${key}"`);
  console.log(`  üìç –ö–æ–ª–æ–Ω–∫–∞: ${keyColumn}`);
  console.log(`  üìä –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ —É –ª–∏—Å—Ç—ñ: ${sheet.rowCount}`);
  
  let startRow = 0;
  let endRow = 0;
  let debugInfo: Array<{row: number, raw: any, normalized: string}> = [];
  
  // –ó–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—ñ 20 –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  let rowsChecked = 0;
  sheet.eachRow((row, rowNumber) => {
    if (rowNumber === 1) {
      console.log(`  ‚è≠Ô∏è  –†—è–¥–æ–∫ 1: –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–≥–æ–ª–æ–≤–æ–∫)`);
      return;
    }
    
    rowsChecked++;
    
    const cell = row.getCell(keyColumn);
    const rawValue = cell.value;
    const normalizedKey = normalizeKey(rawValue);
    
    // –ó–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—ñ 20 –¥–ª—è debug
    if (debugInfo.length < 20) {
      debugInfo.push({
        row: rowNumber,
        raw: rawValue,
        normalized: normalizedKey || '(null)'
      });
    }
    
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    if (rowNumber === 2) {
      console.log(`  üîç –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö (${rowNumber}):`);
      console.log(`     RAW –∑–Ω–∞—á–µ–Ω–Ω—è:`, rawValue);
      console.log(`     –¢–∏–ø:`, typeof rawValue);
      console.log(`     –ü—ñ—Å–ª—è normalize:`, normalizedKey);
    }
    
    if (startRow > 0) return; // –í–∂–µ –∑–Ω–∞–π—à–ª–∏
    
    if (normalizedKey === key.toLowerCase()) {
      startRow = rowNumber;
      console.log(`  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—á–∞—Ç–æ–∫ —É —Ä—è–¥–∫—É ${rowNumber}`);
    }
  });
  
  console.log(`  üìä –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: ${rowsChecked}`);
  
  if (startRow === 0) {
    console.log(`  ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—á–∞—Ç–∫—É –±–ª–æ–∫—É`);
    console.log(`  üìã –ü–µ—Ä—à—ñ 20 –∑–Ω–∞—á–µ–Ω—å –∫–æ–ª–æ–Ω–∫–∏ ${keyColumn}:`);
    debugInfo.forEach(info => {
      console.log(`     –†—è–¥–æ–∫ ${info.row}: "${info.raw}" ‚Üí "${info.normalized}"`);
    });
    return null;
  }
  
  // –®—É–∫–∞—î–º–æ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É
  endRow = startRow;
  for (let r = startRow + 1; r <= sheet.rowCount; r++) {
    const row = sheet.getRow(r);
    const cellValue = row.getCell(keyColumn).value;
    const normalizedKey = normalizeKey(cellValue);
    
    if (normalizedKey === key.toLowerCase()) {
      endRow = r;
    } else {
      break;
    }
  }
  
  console.log(`  ‚úÖ –ë–ª–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ: —Ä—è–¥–∫–∏ ${startRow}-${endRow} (${endRow - startRow + 1} —Ä—è–¥–∫—ñ–≤)`);
  
  return {
    startRow,
    endRow,
    rowCount: endRow - startRow + 1,
    key
  };
}

/**
 * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –í–°–Ü –∫–æ–Ω—Ç—ñ–≥—É–∞–ª—å–Ω—ñ –±–ª–æ–∫–∏ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ
 * (–º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ä–æ–∑–∫–∏–¥–∞–Ω—ñ –ø–æ —Ñ–∞–π–ª—É)
 */
export function findAllContiguousBlocks(
  sheet: ExcelJS.Worksheet,
  keyColumn: string,
  key: string
): ContiguousBlock[] {
  const blocks: ContiguousBlock[] = [];
  let inBlock = false;
  let startRow = 0;
  
  sheet.eachRow((row, rowNumber) => {
    if (rowNumber === 1) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    const cellValue = row.getCell(keyColumn).value;
    const normalizedKey = normalizeKey(cellValue);
    const matches = normalizedKey === key.toLowerCase();
    
    if (matches && !inBlock) {
      // –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É
      inBlock = true;
      startRow = rowNumber;
    } else if (!matches && inBlock) {
      // –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É
      inBlock = false;
      blocks.push({
        startRow,
        endRow: rowNumber - 1,
        rowCount: rowNumber - startRow,
        key
      });
    }
  });
  
  // –Ø–∫—â–æ –±–ª–æ–∫ —Ç—Ä–∏–≤–∞—î –¥–æ –∫—ñ–Ω—Ü—è –ª–∏—Å—Ç–∞
  if (inBlock) {
    blocks.push({
      startRow,
      endRow: sheet.rowCount,
      rowCount: sheet.rowCount - startRow + 1,
      key
    });
  }
  
  return blocks;
}

/**
 * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
 */
function normalizeKey(value: any): string {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null/undefined
  if (value === null || value === undefined) {
    return '';
  }
  
  // –Ø–∫—â–æ —Ü–µ –æ–±'—î–∫—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ richText –∞–±–æ —Ñ–æ—Ä–º—É–ª–∞)
  if (typeof value === 'object') {
    // –Ø–∫—â–æ —Ü–µ richText
    if ('richText' in value) {
      const text = value.richText.map((t: any) => t.text).join('');
      value = text;
    }
    // –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ä–º—É–ª–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    else if ('result' in value) {
      value = value.result;
    }
    // –Ø–∫—â–æ —Ü–µ —â–æ—Å—å —ñ–Ω—à–µ - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ string
    else {
      value = JSON.stringify(value);
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ string
  let str = String(value).trim();
  
  // –í–∏–¥–∞–ª—è—î–º–æ –í–°–Ü –ø—Ä–æ–±—ñ–ª–∏
  str = str.replace(/\s+/g, '');
  
  // toLowerCase
  str = str.toLowerCase();
  
  return str;
}
