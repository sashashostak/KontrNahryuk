/**
 * SourceSelectionManager - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏–±–æ—Ä–æ–º –¥–∂–µ—Ä–µ–ª–∞ —Ñ–∞–π–ª—ñ–≤
 * FIXED: –í–∏–Ω–µ—Å–µ–Ω–æ –∑ main.ts (—Ä—è–¥–∫–∏ 352-432)
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ä–µ–∂–∏–º–∞–º–∏ –≤–∏–±–æ—Ä—É (–æ–¥–∏–Ω —Ñ–∞–π–ª / –º–Ω–æ–∂–∏–Ω–Ω—ñ —Ñ–∞–π–ª–∏ / –ø–∞–ø–∫–∞)
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö input –ø–æ–ª—ñ–≤
 * - –í–∏–∫–ª–∏–∫ –¥—ñ–∞–ª–æ–≥—ñ–≤ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤/–ø–∞–ø–æ–∫
 * - –ù–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
 */

import { DOM_IDS, EVENT_TYPES, SOURCE_TYPES } from './constants';

// FIXED: –î–æ–¥–∞–Ω–æ helper —Ñ—É–Ω–∫—Ü—ñ—é byId
const byId = <T extends HTMLElement>(id: string): T | null => 
  document.getElementById(id) as T | null;

// FIXED: –î–æ–¥–∞–Ω–æ helper —Ñ—É–Ω–∫—Ü—ñ—é log
const log = (msg: string): void => {
  const el = byId<HTMLPreElement>(DOM_IDS.LOG_BODY);
  if (!el) return;
  const time = new Date().toLocaleTimeString();
  el.textContent += `[${time}] ${msg}\n`;
  el.scrollTop = el.scrollHeight;
};

/**
 * –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏–±–æ—Ä–æ–º –¥–∂–µ—Ä–µ–ª–∞ —Ñ–∞–π–ª—ñ–≤ (single/multiple/folder)
 */
export class SourceSelectionManager {
  private sourceRadios: NodeListOf<HTMLInputElement>;
  private singleFileInput: HTMLElement | null;
  private multipleFilesInput: HTMLElement | null;
  private folderInput: HTMLElement | null;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  constructor() {
    this.sourceRadios = document.querySelectorAll<HTMLInputElement>('input[name="source-type"]');
    this.singleFileInput = byId(DOM_IDS.SINGLE_FILE_INPUT);
    this.multipleFilesInput = byId(DOM_IDS.MULTIPLE_FILES_INPUT);
    this.folderInput = byId(DOM_IDS.FOLDER_INPUT);
    
    this.bindEvents();
  }

  /**
   * FIXED: –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  private bindEvents(): void {
    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ radio buttons
    this.sourceRadios.forEach(radio => {
      radio.addEventListener(EVENT_TYPES.CHANGE, () => {
        this.handleSourceChange(radio.value);
      });
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏
    byId(DOM_IDS.CHOOSE_FOLDER)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.selectFolder();
    });
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Ç–∏–ø—É –¥–∂–µ—Ä–µ–ª–∞ - –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π input
   * @param sourceType - –¢–∏–ø –¥–∂–µ—Ä–µ–ª–∞ ('single-file' | 'multiple-files' | 'folder')
   */
  private handleSourceChange(sourceType: string): void {
    // –•–æ–≤–∞—î–º–æ –≤—Å—ñ inputs
    if (this.singleFileInput) this.singleFileInput.style.display = 'none';
    if (this.multipleFilesInput) this.multipleFilesInput.style.display = 'none';
    if (this.folderInput) this.folderInput.style.display = 'none';

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π input
    switch (sourceType) {
      case SOURCE_TYPES.SINGLE_FILE:
        if (this.singleFileInput) this.singleFileInput.style.display = 'block';
        break;
      case SOURCE_TYPES.MULTIPLE_FILES:
        if (this.multipleFilesInput) this.multipleFilesInput.style.display = 'block';
        break;
      case SOURCE_TYPES.FOLDER:
        if (this.folderInput) this.folderInput.style.display = 'block';
        break;
    }
  }

  /**
   * –í–∏–∫–ª–∏–∫–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ IPC
   * @async
   */
  private async selectFolder(): Promise<void> {
    try {
      const folderPath = await window.api?.selectBatchDirectory?.();
      if (folderPath) {
        const folderInput = byId<HTMLInputElement>(DOM_IDS.FOLDER_PATH);
        if (folderInput) {
          folderInput.value = folderPath;
        }
        log(`üìÅ –û–±—Ä–∞–Ω–æ –ø–∞–ø–∫—É: ${folderPath}`);
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', error);
      log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`);
    }
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—Ä–∞–Ω–∏–π —Ç–∏–ø –¥–∂–µ—Ä–µ–ª–∞
   * @returns –¢–∏–ø –¥–∂–µ—Ä–µ–ª–∞ –∞–±–æ 'single-file' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
   * @public
   */
  public getSelectedSource(): string {
    const checkedRadio = document.querySelector('input[name="source-type"]:checked') as HTMLInputElement;
    return checkedRadio ? checkedRadio.value : SOURCE_TYPES.SINGLE_FILE;
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∞–±–æ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
   * @returns –ú–∞—Å–∏–≤ File –æ–±'—î–∫—Ç—ñ–≤ –∞–±–æ –º–∞—Å–∏–≤ –∑ —à–ª—è—Ö–æ–º –¥–æ –ø–∞–ø–∫–∏
   * @public
   */
  public getSelectedFiles(): File[] | string[] {
    const sourceType = this.getSelectedSource();
    
    switch (sourceType) {
      case SOURCE_TYPES.SINGLE_FILE:
        const singleFile = byId<HTMLInputElement>(DOM_IDS.WORD_FILE);
        return singleFile?.files ? Array.from(singleFile.files) : [];
        
      case SOURCE_TYPES.MULTIPLE_FILES:
        const multipleFiles = byId<HTMLInputElement>(DOM_IDS.WORD_FILES);
        return multipleFiles?.files ? Array.from(multipleFiles.files) : [];
        
      case SOURCE_TYPES.FOLDER:
        const folderPath = byId<HTMLInputElement>(DOM_IDS.FOLDER_PATH)?.value;
        return folderPath ? [folderPath] : [];
        
      default:
        return [];
    }
  }
}
