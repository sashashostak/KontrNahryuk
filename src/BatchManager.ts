/**
 * BatchManager - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é Excel —Ñ–∞–π–ª—ñ–≤
 * FIXED: –í–∏–Ω–µ—Å–µ–Ω–æ –∑ main.ts (—Ä—è–¥–∫–∏ 951-1206)
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ —Ç–∞ —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
 * - –ó–∞–ø—É—Å–∫ —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–±—Ä–æ–±–∫–∏
 * - –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –æ–±—Ä–æ–±–∫–∏
 * - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É
 */

import type { BatchProgress, BatchResult, LogLevel } from './types';
import { DOM_IDS, EVENT_TYPES, LOCALE, LOG_ICONS, MIME_TYPES, FILE_EXTENSIONS } from './constants';

// FIXED: –î–æ–¥–∞–Ω–æ helper —Ñ—É–Ω–∫—Ü—ñ—é byId
const byId = <T extends HTMLElement>(id: string): T | null => 
  document.getElementById(id) as T | null;

/**
 * –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é Excel —Ñ–∞–π–ª—ñ–≤
 */
export class BatchManager {
  private isProcessing = false;
  private logContainer?: HTMLElement;
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  constructor() {
    this.setupElements();
    this.setupEventListeners();
    this.loadSavedSettings();
  }

  /**
   * FIXED: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   */
  private setupElements(): void {
    this.logContainer = byId(DOM_IDS.BATCH_LOG_BODY) || undefined;
  }

  /**
   * FIXED: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  private setupEventListeners(): void {
    // –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏
    byId(DOM_IDS.BTN_CHOOSE_BATCH_FOLDER)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.selectInputFolder();
    });

    // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    byId(DOM_IDS.BTN_CHOOSE_BATCH_OUTPUT)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.selectOutputFile();
    });

    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏
    byId(DOM_IDS.BTN_START_BATCH)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.startProcessing();
    });

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
    byId(DOM_IDS.BTN_CANCEL_BATCH)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.cancelProcessing();
    });

    // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
    byId(DOM_IDS.BTN_CLEAR_BATCH_LOG)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.clearLog();
    });

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É
    byId(DOM_IDS.BTN_SAVE_BATCH_LOG)?.addEventListener(EVENT_TYPES.CLICK, () => {
      this.saveLog();
    });

    // FIXED: –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó –∑ backend —á–µ—Ä–µ–∑ IPC
    window.api?.onBatchProgress?.((progress: BatchProgress) => {
      this.updateProgress(progress);
    });

    window.api?.onBatchLog?.((logEntry: { level: string, message: string }) => {
      this.addLogEntry(logEntry.level as LogLevel, logEntry.message);
    });

    window.api?.onBatchComplete?.((result: BatchResult) => {
      this.onProcessingComplete(result);
    });
  }

  /**
   * –í–∏–∫–ª–∏–∫–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
   * @async
   */
  private async selectInputFolder(): Promise<void> {
    try {
      const folderPath = await window.api?.selectBatchDirectory?.();
      if (folderPath) {
        const input = byId<HTMLInputElement>(DOM_IDS.BATCH_INPUT_FOLDER);
        if (input) {
          input.value = folderPath;
          this.updateButtonStates();
        }
      }
    } catch (error) {
      this.addLogEntry('error', `–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏: ${error}`);
    }
  }

  /**
   * –í–∏–∫–ª–∏–∫–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
   * @async
   */
  private async selectOutputFile(): Promise<void> {
    try {
      const filePath = await window.api?.selectBatchOutputFile?.();
      if (filePath) {
        const input = byId<HTMLInputElement>(DOM_IDS.BATCH_OUTPUT_FILE);
        if (input) {
          input.value = filePath;
        }
      }
    } catch (error) {
      this.addLogEntry('error', `–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É: ${error}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –ø–∞–∫–µ—Ç–Ω—É –æ–±—Ä–æ–±–∫—É
   * @async
   */
  private async startProcessing(): Promise<void> {
    if (this.isProcessing) return;

    const inputFolder = byId<HTMLInputElement>(DOM_IDS.BATCH_INPUT_FOLDER)?.value;
    if (!inputFolder) {
      this.addLogEntry('error', '–û–±–µ—Ä—ñ—Ç—å –≤—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É');
      return;
    }

    let outputFile = byId<HTMLInputElement>(DOM_IDS.BATCH_OUTPUT_FILE)?.value;
    if (!outputFile) {
      // FIXED: –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
      outputFile = `${inputFolder}\\–Ü–Ω–¥–µ–∫—Å_–±—ñ–π—Ü—ñ–≤_${dateStr}_${timeStr}${FILE_EXTENSIONS.XLSX}`;
    }

    const options = {
      inputDirectory: inputFolder,
      outputFilePath: outputFile,
      includeStats: true,
      includeConflicts: true,
      includeOccurrences: false, // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–æ–∑–º—ñ—Ä
      resolveConflicts: true
    };

    try {
      this.isProcessing = true;
      this.updateButtonStates();
      this.showProgress();
      this.clearLog();
      this.addLogEntry('info', '–ü–æ—á–∞—Ç–æ–∫ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏...');

      await window.api?.startBatchProcessing?.(options);
    } catch (error) {
      this.addLogEntry('error', `–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: ${error}`);
      this.isProcessing = false;
      this.updateButtonStates();
      this.hideProgress();
    }
  }

  /**
   * –°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –æ–±—Ä–æ–±–∫—É
   * @async
   */
  private async cancelProcessing(): Promise<void> {
    if (!this.isProcessing) return;

    try {
      const cancelled = await window.api?.cancelBatchProcessing?.();
      if (cancelled) {
        this.addLogEntry('warning', '–û–±—Ä–æ–±–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
      }
    } catch (error) {
      this.addLogEntry('error', `–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: ${error}`);
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–±—Ä–æ–±–∫–∏
   * @param progress - –û–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å
   */
  private updateProgress(progress: BatchProgress): void {
    const progressFill = byId(DOM_IDS.BATCH_PROGRESS_FILL);
    const progressPercent = byId(DOM_IDS.BATCH_PROGRESS_PERCENT);
    const progressStatus = byId(DOM_IDS.BATCH_PROGRESS_STATUS);
    const progressDetail = byId(DOM_IDS.BATCH_PROGRESS_DETAIL);

    if (progressFill) {
      progressFill.style.width = `${progress.percentage}%`;
    }

    if (progressPercent) {
      progressPercent.textContent = `${progress.percentage}%`;
    }

    if (progressStatus) {
      progressStatus.textContent = progress.message;
    }

    if (progressDetail) {
      const timeElapsedStr = Math.round(progress.timeElapsed / 1000);
      let detailText = `–§–∞–π–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${progress.filesProcessed}/${progress.totalFiles} (${timeElapsedStr}—Å)`;
      
      if (progress.estimatedTimeRemaining) {
        const etaStr = Math.round(progress.estimatedTimeRemaining / 1000);
        detailText += `, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ~${etaStr}—Å`;
      }
      
      progressDetail.textContent = detailText;
    }
  }

  /**
   * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –≤ –ª–æ–≥
   * @param level - –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è ('info' | 'warning' | 'error')
   * @param message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
   */
  private addLogEntry(level: LogLevel, message: string): void {
    if (!this.logContainer) return;

    const timestamp = new Date().toLocaleTimeString(LOCALE);
    const levelIcon = LOG_ICONS[level] || LOG_ICONS.info;

    const logLine = `[${timestamp}] ${levelIcon} ${message}\n`;
    this.logContainer.textContent += logLine;
    this.logContainer.scrollTop = this.logContainer.scrollHeight;
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
   * @param result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
   */
  private onProcessingComplete(result: BatchResult): void {
    this.isProcessing = false;
    this.updateButtonStates();
    this.hideProgress();

    if (result.success) {
      this.addLogEntry('info', `‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
      this.addLogEntry('info', `üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${result.stats.fightersFound} –±—ñ–π—Ü—ñ–≤`);
      this.addLogEntry('info', `üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.outputFilePath}`);
      
      if (result.stats.conflicts > 0) {
        this.addLogEntry('warning', `‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${result.stats.conflicts} –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤`);
      }
    } else {
      this.addLogEntry('error', '‚ùå –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏');
      result.errors.forEach((error: string) => {
        this.addLogEntry('error', error);
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
   */
  private showProgress(): void {
    const progressContainer = byId(DOM_IDS.BATCH_PROGRESS);
    if (progressContainer) {
      progressContainer.hidden = false;
    }
  }

  /**
   * –•–æ–≤–∞—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
   */
  private hideProgress(): void {
    const progressContainer = byId(DOM_IDS.BATCH_PROGRESS);
    if (progressContainer) {
      progressContainer.hidden = true;
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ (enabled/disabled)
   */
  private updateButtonStates(): void {
    const inputFolder = byId<HTMLInputElement>(DOM_IDS.BATCH_INPUT_FOLDER)?.value;
    const startBtn = byId<HTMLButtonElement>(DOM_IDS.BTN_START_BATCH);
    const cancelBtn = byId<HTMLButtonElement>(DOM_IDS.BTN_CANCEL_BATCH);

    if (startBtn) {
      startBtn.disabled = this.isProcessing || !inputFolder;
      startBtn.textContent = this.isProcessing ? '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...' : '–û–±—Ä–æ–±–∏—Ç–∏';
    }

    if (cancelBtn) {
      cancelBtn.disabled = !this.isProcessing;
    }
  }

  /**
   * –û—á–∏—â—É—î –≤–º—ñ—Å—Ç –ª–æ–≥—É
   */
  private clearLog(): void {
    if (this.logContainer) {
      this.logContainer.textContent = '';
    }
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î –ª–æ–≥ —É —Ñ–∞–π–ª
   */
  private saveLog(): void {
    if (!this.logContainer) return;
    
    const logText = this.logContainer.textContent;
    if (!logText) return;

    // FIXED: –°—Ç–≤–æ—Ä—é—î–º–æ Blob –∑ —Ç–µ–∫—Å—Ç–æ–º –ª–æ–≥—É
    const blob = new Blob([logText], { type: MIME_TYPES.TEXT });
    const url = URL.createObjectURL(blob);
    
    // FIXED: –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const a = document.createElement('a');
    a.href = url;
    a.download = `batch_log_${new Date().toISOString().split('T')[0]}${FILE_EXTENSIONS.TXT}`;
    a.click();
    
    URL.revokeObjectURL(url);
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ)
   */
  private loadSavedSettings(): void {
    // FIXED: –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —à–ª—è—Ö—ñ–≤
    this.updateButtonStates();
  }
}
