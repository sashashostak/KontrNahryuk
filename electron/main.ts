import { app, BrowserWindow, ipcMain, dialog, shell } from 'electron'
import path from 'node:path'
import fs from 'node:fs/promises'
import * as mammoth from 'mammoth'
import { Document, Paragraph, Packer, TextRun } from 'docx'
import * as xlsx from 'xlsx'

import { setupOSIntegration, notify, openExternal, togglePowerSaveBlocker } from './services/osIntegration'
import { createStorage } from './services/storage'
import { UpdateService, UpdateState } from './services/updateService'
import { UkrainianNameDeclension } from './services/UkrainianNameDeclension'

console.log('\n\nüåüüåüüåüüåüüåü MAIN.TS –§–ê–ô–õ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û - –í–ï–†–°–Ü–Ø 17.10.2025-15:00 üåüüåüüåüüåüüåü\n')
console.log('üìÅ –ü–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª:', __filename)
console.log('üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è:', __dirname)

const isDev = process.env.NODE_ENV !== 'production' && (process.env.VITE_DEV_SERVER_URL !== undefined || process.argv.includes('--dev'))

let storage: any
let updateService: UpdateService
let mainWindow: BrowserWindow | null = null

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤ –≤ renderer process
function sendLog(level: 'info' | 'warn' | 'error', message: string) {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send('main:log', level, message)
  }
}

// –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ console.log/warn/error –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ UI
const originalLog = console.log
const originalWarn = console.warn
const originalError = console.error

console.log = (...args: any[]) => {
  originalLog.apply(console, args)
  const message = args.map(arg => {
    if (typeof arg === 'object') {
      try { return JSON.stringify(arg, null, 2) }
      catch { return String(arg) }
    }
    return String(arg)
  }).join(' ')
  sendLog('info', message)
}

console.warn = (...args: any[]) => {
  originalWarn.apply(console, args)
  const message = args.map(arg => String(arg)).join(' ')
  sendLog('warn', message)
}

console.error = (...args: any[]) => {
  originalError.apply(console, args)
  const message = args.map(arg => String(arg)).join(' ')
  sendLog('error', message)
}

function norm(str: string): string {
  return str.toLowerCase()
    .replace(/[¬´¬ª"""''`]/g, '"')
    .replace(/[‚Äî‚Äì‚àí]/g, '-')
    .replace(/‚Ä¶/g, '...')
    .replace(/\s+/g, ' ')
    .trim()
}

function createWindow(): BrowserWindow {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: false
    }
  })

  if (isDev) {
    const devURL = process.env.VITE_DEV_SERVER_URL || 'http://localhost:5177'
    mainWindow.loadURL(devURL)
    
    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ DevTools –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    mainWindow.webContents.openDevTools({ mode: 'detach' })
    
    // FIXED: –í–∏–º–∏–∫–∞—î–º–æ Autofill –≤ DevTools –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    mainWindow.webContents.on('devtools-opened', () => {
      if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.devToolsWebContents?.executeJavaScript(`
          // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Autofill —É –∫–æ–Ω—Å–æ–ª—ñ
          const originalError = console.error;
          console.error = function(...args) {
            const msg = args[0]?.toString() || '';
            if (msg.includes('Autofill')) {
              return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Autofill
            }
            originalError.apply(console, args);
          };
        `).catch(() => {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        });
      }
    });
  } else {
    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))
  }

  // –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ DevTools –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ (F12)
  mainWindow.webContents.on('before-input-event', (event, input) => {
    if (input.key === 'F12' && mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.toggleDevTools()
    }
  })
  
  return mainWindow
}

function setupUpdateHandlers() {
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  ipcMain.handle('updates:download', async (_, manifest) => {
    try {
      return await updateService.downloadUpdate(manifest)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error)
      return false
    }
  })

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  ipcMain.handle('updates:install', async (_, manifest) => {
    try {
      return await updateService.installUpdate(manifest)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error)
      return false
    }
  })

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
  ipcMain.handle('updates:get-version', () => {
    return updateService.getCurrentVersion()
  })

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  ipcMain.handle('updates:get-state', () => {
    return updateService.getState()
  })

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  ipcMain.handle('updates:get-progress', () => {
    return updateService.getDownloadProgress()
  })

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ–π–Ω–æ–≥–æ –∫–ª—é—á–∞
  ipcMain.handle('updates:set-license', async (_, key: string) => {
    return await updateService.setLicenseKey(key)
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –ª—ñ—Ü–µ–Ω–∑—ñ–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
  ipcMain.handle('updates:check-existing-license', async () => {
    return await updateService.checkUpdateAccess()
  })

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é
  ipcMain.handle('updates:get-license-info', async () => {
    return await updateService.getLicenseInfo()
  })

  ipcMain.handle('updates:check-access', async () => {
    return await updateService.checkUpdateAccess()
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ GitHub API
  ipcMain.handle('updates:check-github', async () => {
    return await updateService.checkForUpdatesViaGitHub()
  })

  // –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ GitHub Releases
  ipcMain.handle('updates:download-and-install', async (_, updateInfo) => {
    try {
      console.log('–°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', updateInfo)
      
      const releaseInfo = updateInfo.releaseInfo
      if (!releaseInfo) {
        throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–ª—ñ–∑')
      }

      // –®—É–∫–∞—î–º–æ portable ZIP —Ñ–∞–π–ª –≤ assets
      const portableAsset = releaseInfo.assets?.find((asset: any) => 
        asset.name.toLowerCase().includes('portable') && asset.name.endsWith('.zip')
      )
      
      if (!portableAsset) {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î portable —Ñ–∞–π–ª—É, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–ª—ñ–∑—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        shell.openExternal(releaseInfo.html_url)
        throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í—ñ–¥–∫—Ä–∏—Ç–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.')
      }

      // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ –ø–æ—á–∞–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      BrowserWindow.getAllWindows().forEach(window => {
        window.webContents.send('updates:download-started', {
          fileName: portableAsset.name,
          size: portableAsset.size
        })
      })

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ portable –≤–µ—Ä—Å—ñ—é —á–µ—Ä–µ–∑ GitHub API
      const success = await updateService.downloadFromGitHub(portableAsset)
      
      if (success) {
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('updates:download-completed', {
            filePath: success
          })
        })
        return true
      } else {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
      }

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error)
      const errorMessage = error instanceof Error ? error.message : String(error)
      BrowserWindow.getAllWindows().forEach(window => {
        window.webContents.send('updates:error', errorMessage)
      })
      return false
    }
  })

  // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  ipcMain.handle('updates:cancel', async () => {
    try {
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true
      return true
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error)
      return false
    }
  })

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥ —Ñ–∞–π–ª—É –æ–Ω–æ–≤–ª–µ–Ω—å
  ipcMain.handle('updates:save-log', async (_, content: string) => {
    try {
      const { dialog } = require('electron')
      const fs = require('fs')
      const path = require('path')
      const os = require('os')
      
      // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —É Downloads
      const defaultPath = path.join(os.homedir(), 'Downloads', `KontrNahryuk-Update-Log-${Date.now()}.txt`)
      
      const result = await dialog.showSaveDialog(BrowserWindow.getFocusedWindow() || BrowserWindow.getAllWindows()[0], {
        title: '–ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
        defaultPath,
        filters: [
          { name: 'Text Files', extensions: ['txt'] },
          { name: 'All Files', extensions: ['*'] }
        ]
      })
      
      if (!result.canceled && result.filePath) {
        fs.writeFileSync(result.filePath, content, 'utf8')
        return true
      }
      
      return false
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥ —Ñ–∞–π–ª—É:', error)
      return false
    }
  })

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞
  ipcMain.handle('updates:restart-app', async () => {
    try {
      app.relaunch()
      app.exit(0)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É:', error)
    }
  })

  // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  updateService.on('state-changed', (state) => {
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('updates:state-changed', state)
    })
  })

  updateService.on('download-progress', (progress) => {
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('updates:download-progress', progress)
    })
  })

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–¥—ñ—ó –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  updateService.on('update-complete', () => {
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('updates:complete')
    })
  })

  updateService.on('update-error', (error) => {
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('updates:error', error)
    })
  })
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
function setupBatchProcessing() {
  const { BatchProcessor } = require('./services/batch/BatchProcessor')
  let batchProcessor: any = null

  // –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:process', async (_, options) => {
    try {
      if (batchProcessor && batchProcessor.isRunning()) {
        throw new Error('–ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è')
      }

      batchProcessor = new BatchProcessor()
      
      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –ø—Ä–æ–≥—Ä–µ—Å—É
      batchProcessor.on('progress', (progress: any) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:progress', progress)
        })
      })

      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –ª–æ–≥—É–≤–∞–Ω–Ω—è
      batchProcessor.on('log', (level: string, message: string) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:log', { level, message })
        })
      })

      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      batchProcessor.on('complete', (result: any) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:complete', result)
        })
      })

      return await batchProcessor.processDirectory(options)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:', error)
      throw error
    }
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:is-running', () => {
    return batchProcessor ? batchProcessor.isRunning() : false
  })

  // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:cancel', () => {
    if (batchProcessor) {
      batchProcessor.cancel()
      return true
    }
    return false
  })

  // –í–∏–±—ñ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  ipcMain.handle('batch:select-directory', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: '–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Excel —Ñ–∞–π–ª–∞–º–∏'
    })
    return result.canceled ? null : result.filePaths[0]
  })

  // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  ipcMain.handle('batch:select-output-file', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showSaveDialog({
      title: '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É',
      defaultPath: '–Ü–Ω–¥–µ–∫—Å_–±—ñ–π—Ü—ñ–≤.xlsx',
      filters: [
        { name: 'Excel Files', extensions: ['xlsx'] }
      ]
    })
    return result.canceled ? null : result.filePath
  })

  // –í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É –∑ —ñ–º–µ–Ω–∞–º–∏
  ipcMain.handle('batch:select-excel-file', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showOpenDialog({
      title: '–û–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª –∑ —ñ–º–µ–Ω–∞–º–∏',
      filters: [
        { name: 'Excel Files', extensions: ['xlsx', 'xls'] },
        { name: 'All Files', extensions: ['*'] }
      ],
      properties: ['openFile']
    })
    return result.canceled ? null : result.filePaths[0]
  })

  // –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ
  ipcMain.handle('batch:scan-excel-files', async (event, folderPath: string) => {
    const fs = require('fs')
    const path = require('path')
    
    try {
      if (!fs.existsSync(folderPath)) {
        return []
      }
      
      const files = fs.readdirSync(folderPath)
      const excelFiles = files.filter((file: string) => {
        const ext = path.extname(file).toLowerCase()
        return ext === '.xlsx' || ext === '.xls'
      })
      
      return excelFiles
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error)
      return []
    }
  })
}

app.whenReady().then(async () => {
  storage = createStorage()
  updateService = new UpdateService(storage)
  
  // –î–∞—î–º–æ —á–∞—Å storage —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—å —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é
  setTimeout(async () => {
    await updateService.initializeLicense()
  }, 200)
  
  setupUpdateHandlers()
  setupBatchProcessing()
  setupOSIntegration(); 
  const window = createWindow();
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})

// IPC handlers
ipcMain.handle('os:notify', (_e, { title, body }) => notify(title, body))
ipcMain.handle('os:openExternal', (_e, { url }) => openExternal(url))
ipcMain.handle('os:powerBlocker', (_e, { enable }) => togglePowerSaveBlocker(!!enable))

ipcMain.handle('storage:getSetting', (_e, { key, fallback }) => storage.getSetting(key, fallback))
ipcMain.handle('storage:setSetting', (_e, { key, value }) => storage.setSetting(key, value))
ipcMain.handle('storage:addNote', (_e, { text }) => storage.addNote(text))
ipcMain.handle('storage:listNotes', () => storage.listNotes())

ipcMain.handle('dialog:save', async (e, { suggestName }) => {
  const result = await dialog.showSaveDialog(BrowserWindow.fromWebContents(e.sender)!, {
    defaultPath: suggestName || 'result.docx',
    filters: [
      { name: 'Word Documents', extensions: ['docx'] },
      { name: 'All Files', extensions: ['*'] }
    ]
  })
  
  return result.canceled ? null : result.filePath
})

ipcMain.handle('dialog:select-folder', async (e) => {
  const result = await dialog.showOpenDialog(BrowserWindow.fromWebContents(e.sender)!, {
    properties: ['openDirectory']
  })
  
  return result.canceled ? null : { filePath: result.filePaths[0] }
})

// –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
function findParagraphsByKeyword(paragraphs: string[], keyword: string): string[] {
  const normalizedKeyword = keyword.toLowerCase()
  const matched: string[] = []
  
  console.log(`[findParagraphsByKeyword] –®—É–∫–∞—é "${keyword}" (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: "${normalizedKeyword}") –≤ ${paragraphs.length} –∞–±–∑–∞—Ü–∞—Ö`)
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i]
    const normalizedParagraph = norm(paragraph)
    
    if (normalizedParagraph.includes(normalizedKeyword)) {
      matched.push(paragraph)
      console.log(`[findParagraphsByKeyword] –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥ #${matched.length} –≤ –∞–±–∑–∞—Ü—ñ ${i + 1}: "${paragraph.substring(0, 150)}..."`)
    }
  }
  
  console.log(`[findParagraphsByKeyword] –ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ ${matched.length} –∑–±—ñ–≥—ñ–≤ –¥–ª—è "${keyword}"`)
  return matched
}

async function extractParagraphsFromWord(wordBuf: ArrayBuffer): Promise<string[]> {
  try {
    const result = await mammoth.convertToHtml({ 
      buffer: Buffer.from(wordBuf)
    })
    
    // –†–æ–∑–±–∏—Ç–∏ HTML –Ω–∞ –∞–±–∑–∞—Ü–∏
    const paragraphs = result.value
      .split(/<\/?p[^>]*>/i)
      .map(p => p.replace(/<[^>]+>/g, '').trim()) // –í–∏–¥–∞–ª–∏—Ç–∏ HTML —Ç–µ–≥–∏
      .filter(p => p.length > 0) // –ó–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ
    
    return paragraphs
  } catch (err) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Word: ${err instanceof Error ? err.message : String(err)}`)
  }
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö –∞–±–∑–∞—Ü—ñ–≤
async function extractFormattedParagraphsFromWord(wordBuf: ArrayBuffer): Promise<{
  paragraphs: Array<{ text: string, html: string }>,
  firstLine: string
}> {
  try {
    const result = await mammoth.convertToHtml({ 
      buffer: Buffer.from(wordBuf)
    })
    
    const htmlParagraphs = result.value.split(/<\/?p[^>]*>/i).filter(p => p.trim().length > 0)
    
    const paragraphs = htmlParagraphs.map((htmlPara) => {
      const text = htmlPara.replace(/<[^>]+>/g, '').trim()
      const html = htmlPara.trim()
      
      return { text, html }
    }).filter(p => p.text.length > 0)
    
    const firstLine = paragraphs.length > 0 ? paragraphs[0].text : ''
    
    console.log(`[extractFormatted] –ó–∞–≥–∞–ª–æ–º –∞–±–∑–∞—Ü—ñ–≤: ${paragraphs.length}`)
    
    return { paragraphs, firstLine }
  } catch (err) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Word: ${err instanceof Error ? err.message : String(err)}`)
  }
}

// –¢–∏–ø–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É
interface OrderItem {
  type: 'point' | 'subpoint' | 'dash-point' | 'paragraph'
  number?: string  // "1", "7.1", "8.3" —Ç–æ—â–æ
  text: string
  html: string
  index: number    // –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
  children: OrderItem[]
  parent?: OrderItem
  matchedNames?: string[] // –ü–Ü–ë –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ü—å–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
}

// ============================================================================
// –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –®–¢–†–ò–•–ü–£–ù–ö–¢–£ –ó–ê –í–Ü–ô–°–¨–ö–û–í–ò–ú–ò –ó–í–ê–ù–ù–Ø–ú–ò
// ============================================================================

function isDashPointByPattern(text: string): boolean {
  // –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
  const cleanText = text.trim().toLowerCase()
  
  // === –°–ü–ò–°–û–ö –î–û–ó–í–û–õ–ï–ù–ò–• –í–Ü–ô–°–¨–ö–û–í–ò–• –ó–í–ê–ù–¨ ===
  const allowedRanks = [
    '—Å–æ–ª–¥–∞—Ç',
    '—Å—Ç–∞—Ä—à–∏–π —Å–æ–ª–¥–∞—Ç',
    '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '—Å–µ—Ä–∂–∞–Ω—Ç',
    '—Å—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '—à—Ç–∞–±-—Å–µ—Ä–∂–∞–Ω—Ç',
    '–∫–∞–ø—ñ—Ç–∞–Ω',
    '–º–∞–π–æ—Ä',
    '–º–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç',
    '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç',
    '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç'
  ]
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å (–º–æ–∂–ª–∏–≤–æ –∑ —Ç–∏—Ä–µ –≤ –∫—ñ–Ω—Ü—ñ)
  for (const rank of allowedRanks) {
    // –í–∞—Ä—ñ–∞–Ω—Ç 1: –¢–æ—á–Ω–æ —è–∫ —É —Å–ø–∏—Å–∫—É
    if (cleanText === rank) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è: "${text}"`)
      return true
    }
    
    // –í–∞—Ä—ñ–∞–Ω—Ç 2: –Ü–∑ —Ç–∏—Ä–µ –∞–±–æ –ø—Ä–æ–±—ñ–ª–æ–º —ñ —Ç–∏—Ä–µ –≤ –∫—ñ–Ω—Ü—ñ
    if (cleanText === `${rank} -` || cleanText === `${rank}-`) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è –∑ —Ç–∏—Ä–µ: "${text}"`)
      return true
    }
    
    // –í–∞—Ä—ñ–∞–Ω—Ç 3: –Ü–∑ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é –≤ –∫—ñ–Ω—Ü—ñ
    if (cleanText === `${rank}:` || cleanText === `${rank} :`) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è –∑ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é: "${text}"`)
      return true
    }
  }
  
  return false
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–æ—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É –∑ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
function parseOrderStructure(paragraphs: Array<{ text: string, html: string }>): OrderItem[] {
  const structure: OrderItem[] = []
  let currentPoint: OrderItem | null = null
  let currentSubpoint: OrderItem | null = null
  let currentDashPoint: OrderItem | null = null
  
  console.log('[parseOrderStructure] –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–±–æ—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...\n')
  
  for (let i = 0; i < paragraphs.length; i++) {
    const para = paragraphs[i]
    const text = para.text.trim()
    const html = para.html.trim()
    
    // –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ (1, 2, 3, ... –∞–±–æ 1., 2., 3., ...)
    const pointMatch = text.match(/^(\d+)\.?\s+(.+)/) && !text.match(/^\d+\.\d+/)
    if (pointMatch) {
      const matches = text.match(/^(\d+)\.?\s+(.+)/)
      const pointNumber = matches![1]
      const pointText = matches![2]
      
      console.log(`[parseOrderStructure] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—É–Ω–∫—Ç ${pointNumber}: "${pointText.substring(0, 50)}..."`)
      
      currentPoint = {
        type: 'point',
        number: pointNumber,
        text: text,
        html: html,
        index: i,
        children: []
      }
      structure.push(currentPoint)
      currentSubpoint = null
      currentDashPoint = null
      continue
    }
    
    // –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤ (7.1, 8.3, ... –∞–±–æ 7.1., 8.3., ...)
    const subpointMatch = text.match(/^(\d+\.\d+)\.?\s+(.+)/)
    if (subpointMatch) {
      const subpointNumber = subpointMatch[1]
      const subpointText = subpointMatch[2]
      
      console.log(`[parseOrderStructure] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥–ø—É–Ω–∫—Ç ${subpointNumber}: "${subpointText.substring(0, 50)}..."`)
      
      currentSubpoint = {
        type: 'subpoint',
        number: subpointNumber,
        text: text,
        html: html,
        index: i,
        children: [],
        parent: currentPoint || undefined
      }
      
      if (currentPoint) {
        currentPoint.children.push(currentSubpoint)
      } else {
        structure.push(currentSubpoint)
      }
      currentDashPoint = null
      continue
    }
    
    // === 3. –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –®–¢–†–ò–•–ü–£–ù–ö–¢ –ó–ê –í–Ü–ô–°–¨–ö–û–í–ò–ú –ó–í–ê–ù–ù–Ø–ú ===
    if (isDashPointByPattern(text)) {
      console.log(`[parseOrderStructure] ‚≠ê‚≠ê‚≠ê –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç (–∑–≤–∞–Ω–Ω—è) –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó ${i}: "${text}"`)
      
      const dashpoint: OrderItem = {
        type: 'dash-point',
        text: text,
        html: html,
        index: i,
        children: [],
        parent: currentSubpoint || currentPoint || undefined
      }
      
      if (currentSubpoint) {
        currentSubpoint.children.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –î–æ–¥–∞–Ω–æ –¥–æ –ø—ñ–¥–ø—É–Ω–∫—Ç—É ${currentSubpoint.number}`)
      } else if (currentPoint) {
        currentPoint.children.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –î–æ–¥–∞–Ω–æ –¥–æ –ø—É–Ω–∫—Ç—É ${currentPoint.number}`)
      } else {
        structure.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –£–í–ê–ì–ê: –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–µ–Ω—è`)
      }
      
      currentDashPoint = dashpoint
      continue
    }
    
    // –ó–≤–∏—á–∞–π–Ω—ñ –∞–±–∑–∞—Ü–∏
    const paragraph: OrderItem = {
      type: 'paragraph',
      text: text,
      html: html,
      index: i,
      children: [],
      parent: currentDashPoint || currentSubpoint || currentPoint || undefined
    }
    
    if (currentDashPoint) {
      currentDashPoint.children.push(paragraph)
    } else if (currentSubpoint) {
      currentSubpoint.children.push(paragraph)
    } else if (currentPoint) {
      currentPoint.children.push(paragraph)
    } else {
      structure.push(paragraph)
    }
  }
  
  // === –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –í–ò–í–Ü–î –°–¢–†–£–ö–¢–£–†–ò ===
  console.log('\n[parseOrderStructure] === –°–¢–†–£–ö–¢–£–†–ê –î–û–ö–£–ú–ï–ù–¢–ê ===')
  function printStructure(items: OrderItem[], depth = 0) {
    for (const item of items) {
      const indent = '  '.repeat(depth)
      const icon = item.type === 'dash-point' ? '‚≠ê‚≠ê‚≠ê' : 
                   item.type === 'point' ? 'üìå' :
                   item.type === 'subpoint' ? 'üìç' : 'üìù'
      console.log(`${indent}${icon} ${item.type}${item.number ? ` ${item.number}` : ''}: "${item.text.substring(0, 50)}..." (idx: ${item.index})`)
      if (item.children.length > 0) {
        printStructure(item.children, depth + 1)
      }
    }
  }
  printStructure(structure)
  console.log('[parseOrderStructure] === –ö–Ü–ù–ï–¶–¨ –°–¢–†–£–ö–¢–£–†–ò ===\n')
  
  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—ñ–≤
  function countDashPoints(items: OrderItem[]): number {
    let count = 0
    for (const item of items) {
      if (item.type === 'dash-point') count++
      count += countDashPoints(item.children)
    }
    return count
  }
  
  const dashPointCount = countDashPoints(structure)
  console.log(`[parseOrderStructure] –ó–ê–ì–ê–õ–û–ú –®–¢–†–ò–•–ü–£–ù–ö–¢–Ü–í –£ –°–¢–†–£–ö–¢–£–†–Ü: ${dashPointCount}\n`)
  
  return structure
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–∫–∏ D
async function readExcelColumnD(filePath: string): Promise<string[]> {
  try {
    const data = await fs.readFile(filePath)
    const workbook = xlsx.read(data, { type: 'buffer' })
    const sheetName = workbook.SheetNames[0] // –ü–µ—Ä—à–∏–π –∞—Ä–∫—É—à
    const sheet = workbook.Sheets[sheetName]
    
    const names: string[] = []
    let row = 1 // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
    
    while (true) {
      const cellAddress = `D${row}` // –ö–æ–ª–æ–Ω–∫–∞ D
      const cell = sheet[cellAddress]
      
      if (!cell || !cell.v) break // –Ø–∫—â–æ –∫–æ–º—ñ—Ä–∫–∞ –ø—É—Å—Ç–∞, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
      
      const value = String(cell.v).trim()
      if (value) {
        names.push(value)
      }
      
      row++
    }
    
    console.log(`[Excel] –ó—á–∏—Ç–∞–Ω–æ ${names.length} –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–∫–∏ D:`, names.slice(0, 3)) // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
    return names
  } catch (error) {
    console.error('[Excel] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function findInOrderStructure(structure: OrderItem[], keyword: string): OrderItem[] {
  const results: OrderItem[] = []
  const addedIndices = new Set<number>()  // –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–≤
  const normalizedKeyword = keyword.toLowerCase()
  
  const norm = (text: string) => text.toLowerCase()
  
  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ===
  let foundParagraphs = 0
  let foundPoints = 0
  let foundSubpoints = 0
  let foundDashPoints = 0
  
  function addWithHierarchy(item: OrderItem): void {
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–∑–æ–º –∑ —É—Å—ñ—î—é –π–æ–≥–æ —ñ—î—Ä–∞—Ä—Ö—ñ—î—é –±–∞—Ç—å–∫—ñ–≤
    const hierarchyChain: OrderItem[] = []
    
    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—é —ñ—î—Ä–∞—Ä—Ö—ñ—é –≤—ñ–¥ –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ –∫–æ—Ä–µ–Ω—è
    let current: OrderItem | undefined = item
    while (current) {
      hierarchyChain.unshift(current)  // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
      current = current.parent
    }
    
    // === –õ–û–ì–£–í–ê–ù–ù–Ø –Ü–Ñ–†–ê–†–•–Ü–á ===
    console.log(`[findInOrderStructure] –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó –¥–ª—è "${item.text.substring(0, 40)}...":`)
    for (const h of hierarchyChain) {
      console.log(`[findInOrderStructure]   ${h.type}${h.number ? ` ${h.number}` : ''}: "${h.text.substring(0, 40)}..."`)
    }
    
    // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—ó, —É–Ω–∏–∫–∞—é—á–∏ –¥—É–±–ª—ñ–≤
    for (const hierarchyItem of hierarchyChain) {
      if (!addedIndices.has(hierarchyItem.index)) {
        results.push(hierarchyItem)
        addedIndices.add(hierarchyItem.index)
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (hierarchyItem.type === 'dash-point') {
          foundDashPoints++
          console.log(`[findInOrderStructure]   ‚úÖ –î–æ–¥–∞–Ω–æ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç: "${hierarchyItem.text.substring(0, 40)}..."`)
        } else if (hierarchyItem.type === 'point') {
          foundPoints++
        } else if (hierarchyItem.type === 'subpoint') {
          foundSubpoints++
        } else if (hierarchyItem.type === 'paragraph') {
          foundParagraphs++
        }
      }
    }
  }
  
  function searchRecursive(items: OrderItem[]): void {
    for (const item of items) {
      const normalizedText = norm(item.text)
      
      if (normalizedText.includes(normalizedKeyword)) {
        console.log(`[findInOrderStructure] üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥ –≤ ${item.type}${item.number ? ` ${item.number}` : ''}: "${item.text.substring(0, 60)}..."`)
        
        if (item.parent) {
          console.log(`[findInOrderStructure]    –ë–∞—Ç—å–∫–æ: ${item.parent.type}${item.parent.number ? ` ${item.parent.number}` : ''}: "${item.parent.text.substring(0, 40)}..."`)
        }
        
        addWithHierarchy(item)
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
      if (item.children.length > 0) {
        searchRecursive(item.children)
      }
    }
  }
  
  searchRecursive(structure)
  
  // === –§–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
  console.log(`[findInOrderStructure] === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–®–£–ö–£ ===`)
  console.log(`[findInOrderStructure] –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ: ${results.length}`)
  console.log(`[findInOrderStructure]   - –ü—É–Ω–∫—Ç—ñ–≤: ${foundPoints}`)
  console.log(`[findInOrderStructure]   - –ü—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤: ${foundSubpoints}`)
  console.log(`[findInOrderStructure]   - –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—ñ–≤: ${foundDashPoints} ‚≠ê`)
  console.log(`[findInOrderStructure]   - –ê–±–∑–∞—Ü—ñ–≤: ${foundParagraphs}`)
  
  // –°–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
  return results.sort((a, b) => a.index - b.index)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ–≤ (–∑ HTML —Ä–æ–∑–º—ñ—Ç–∫–æ—é)
async function createFormattedResultDocument(
  matchedParagraphs: Array<{ text: string, html: string }>, 
  outputPath: string, 
  firstLine?: string
): Promise<void> {
  const children = []
  
  // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É —Å—Ç—Ä–æ–∫—É –Ω–∞–∫–∞–∑—É, —è–∫—â–æ —î (–∑–∞–≤–∂–¥–∏ —à—Ä–∏—Ñ—Ç Calibri)
  if (firstLine) {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: firstLine,
        font: {
          name: 'Calibri'
        },
        size: 28, // 12pt
        bold: false
      })],
      spacing: { after: 200 } // –í—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç—Ä–æ–∫–∏
    }))
  }
  
  // –î–æ–¥–∞—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–∑–∞—Ü–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è + –∑–º—ñ–Ω–∞ –Ω–∞ Calibri
  if (matchedParagraphs.length > 0) {
    for (const para of matchedParagraphs) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∞–±–∑–∞—Ü –∑ —Ç–µ–∫—Å—Ç–æ–º (Calibri —à—Ä–∏—Ñ—Ç)
      // TODO: –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
      children.push(new Paragraph({ 
        children: [new TextRun({
          text: para.text,
          font: {
            name: 'Calibri'
          },
          size: 28 // 14pt
        })]
      }))
    }
  } else {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: '‚Äî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî',
        font: {
          name: 'Calibri'
        },
        size: 28,
        italics: true
      })]
    }))
  }
  
  const doc = new Document({
    styles: {
      default: {
        document: {
          run: {
            font: {
              name: 'Calibri'
            },
            size: 28 // 14pt
          }
        }
      }
    },
    sections: [{
      properties: {},
      children: children
    }]
  })
  
  const buffer = await Packer.toBuffer(doc)
  
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  const dir = path.dirname(outputPath)
  await fs.mkdir(dir, { recursive: true })
  
  await fs.writeFile(outputPath, buffer)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
async function createStructuredResultDocument(
  matchedItems: OrderItem[], 
  outputPath: string, 
  firstLine?: string
): Promise<void> {
  const children = []
  
  // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É —Å—Ç—Ä–æ–∫—É –Ω–∞–∫–∞–∑—É, —è–∫—â–æ —î
  if (firstLine) {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: firstLine,
        font: { name: 'Calibri' },
        size: 28 // 14pt
      })],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø (0.5 –¥—é–π–º–∞)
      },
      spacing: { after: 200 }
    }))
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó OrderItem –≤ Paragraph
  function createParagraphFromItem(item: OrderItem): Paragraph {
    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –Ω–æ–º–µ—Ä–æ–º –ø—É–Ω–∫—Ç—É/–ø—ñ–¥–ø—É–Ω–∫—Ç—É
    let displayText = item.text
    
    if (item.number && (item.type === 'point' || item.type === 'subpoint')) {
      // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä —Ç–∞ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
      const cleanText = item.text.replace(/^\d+(\.\d+)?\.?\s*/, '')
      displayText = `${item.number}. ${cleanText}`
    }
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    // –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç = —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–∏–π (–ë–ï–ó –∂–∏—Ä–Ω–æ–≥–æ)
    const isBold = item.type === 'point' || item.type === 'subpoint'
    const isUnderline = item.type === 'dash-point'
    
    // TextRun –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    const textRun = new TextRun({
      text: displayText,
      font: "Calibri",
      size: 28, // 14pt = 28 half-points
      bold: isBold,
      underline: isUnderline ? { type: 'single' } : undefined
    })
    
    return new Paragraph({
      children: [textRun],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø (0.5 –¥—é–π–º–∞)
      }
    })
  }
  
  // –î–æ–¥–∞—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (matchedItems.length > 0) {
    for (let i = 0; i < matchedItems.length; i++) {
      const item = matchedItems[i]
      const prevItem = i > 0 ? matchedItems[i - 1] : null
      const nextItem = i < matchedItems.length - 1 ? matchedItems[i + 1] : null
      
      // –î–æ–¥–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
      if (item.type === 'point' || item.type === 'subpoint') {
        children.push(new Paragraph({
          children: [new TextRun({ text: "", font: "Calibri", size: 28 })],
          alignment: 'both',
          spacing: { after: 0 }
        }))
      }
      
      // –î–æ–¥–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç–æ–º, —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–≤ –∞–±–∑–∞—Ü–µ–º
      if (item.type === 'dash-point' && prevItem?.type === 'paragraph') {
        children.push(new Paragraph({
          children: [new TextRun({ text: "", font: "Calibri", size: 28 })],
          alignment: 'both',
          spacing: { after: 0 }
        }))
      }
      
      // –î–æ–¥–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∞–±–∑–∞—Ü
      children.push(createParagraphFromItem(item))
      
      // –î–æ–¥–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤
      // –ù–ï –¥–æ–¥–∞–≤–∞—Ç–∏, —è–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç - –ø—ñ–¥–ø—É–Ω–∫—Ç –∞–±–æ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç —Ü—å–æ–≥–æ –ø—É–Ω–∫—Ç—É
      if (item.type === 'point' || item.type === 'subpoint') {
        const shouldAddEmptyLine = !(
          item.type === 'point' && 
          nextItem && 
          (nextItem.type === 'subpoint' || nextItem.type === 'dash-point') && 
          nextItem.parent === item
        )
        
        if (shouldAddEmptyLine) {
          children.push(new Paragraph({
            children: [new TextRun({ text: "", font: "Calibri", size: 28 })],
            alignment: 'both',
            spacing: { after: 0 }
          }))
        }
      }
      
      // –ü—ñ—Å–ª—è –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—É –ù–Ü–ö–û–õ–ò –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫
    }
  } else {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: '‚Äî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî',
        font: { name: 'Calibri' },
        size: 28,
        italics: true
      })],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
      }
    }))
  }
  
  const doc = new Document({
    styles: {
      default: {
        document: {
          run: {
            font: { name: 'Calibri' },
            size: 28 // 14pt
          }
        }
      }
    },
    sections: [{
      properties: {},
      children: children
    }]
  })
  
  const buffer = await Packer.toBuffer(doc)
  
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  const dir = path.dirname(outputPath)
  await fs.mkdir(dir, { recursive: true })
  
  await fs.writeFile(outputPath, buffer)
}

ipcMain.handle('order:process', async (e, payload) => {
  // –ö–†–ò–¢–ò–ß–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê #1: –¢–û–ß–ö–ê –í–•–û–î–£
  console.log('\n\nüö®üö®üö® [order:process] –¢–û–ß–ö–ê –í–•–û–î–£ - HANDLER –°–¢–ê–†–¢–£–í–ê–í üö®üö®üö®\n')
  console.log('‚ïê'.repeat(80))
  console.log('üéØüéØüéØ [order:process] HANDLER –í–ò–ö–õ–ò–ö–ê–ù–û - –í–ï–†–°–Ü–Ø 17.10.2025-15:55 üéØüéØüéØ')
  console.log('‚ïê'.repeat(80))
  console.log('\n')
  
  // –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê #2: PAYLOAD –°–¢–†–£–ö–¢–£–†–ê
  console.log('üì¶ [order:process] Payload keys:', Object.keys(payload))
  console.log('üì¶ [order:process] Payload.mode:', payload.mode)
  console.log('üì¶ [order:process] Payload.wordBuf exists:', !!payload.wordBuf)
  console.log('üì¶ [order:process] Payload.outputPath:', payload.outputPath)
  
  try {
    console.log('[order:process] starting...', {
      hasWordBuf: !!payload.wordBuf,
      outputPath: payload.outputPath,
      flags: payload.flags,
      mode: payload.mode || 'default'
    })
    
    // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!payload.wordBuf) {
      return { ok: false, error: 'Word-—à–∞–±–ª–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' }
    }
    
    if (!payload.outputPath) {
      return { ok: false, error: '–®–ª—è—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' }
    }
    
    // 2. –û–±—Ä–æ–±–∫–∞ –Ω–∞–∫–∞–∑—É (–≤—Å—ñ —Ä–µ–∂–∏–º–∏)
    const results: Array<{type: string, path: string, stats: any}> = []
    
    console.log('\n\nüöÄüöÄüöÄ [order:process] –ü–ï–†–ï–î –≤–∏–∫–ª–∏–∫–æ–º extractFormattedParagraphsFromWord üöÄüöÄüöÄ')
    console.log(`[order:process] wordBuf type: ${typeof payload.wordBuf}`)
    console.log(`[order:process] wordBuf constructor: ${payload.wordBuf?.constructor?.name}`)
    console.log(`[order:process] wordBuf keys:`, Object.keys(payload.wordBuf || {}).slice(0, 10))
    console.log(`[order:process] wordBuf byteLength: ${payload.wordBuf?.byteLength}`)
    console.log(`[order:process] wordBuf buffer: ${payload.wordBuf?.buffer?.byteLength}`)
    console.log(`[order:process] Is ArrayBuffer: ${payload.wordBuf instanceof ArrayBuffer}`)
    console.log(`[order:process] Is Buffer: ${Buffer.isBuffer(payload.wordBuf)}`)
    console.log(`[order:process] Is Uint8Array: ${payload.wordBuf instanceof Uint8Array}`)
    
    // –í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –∞–±–∑–∞—Ü–∏ –∑ Word (–¥–ª—è –≤—Å—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤)
    const { paragraphs: formattedParagraphs, firstLine } = await extractFormattedParagraphsFromWord(payload.wordBuf)
    
    console.log('\n\n‚úÖ‚úÖ‚úÖ [order:process] –ü–Ü–°–õ–Ø extractFormattedParagraphsFromWord ‚úÖ‚úÖ‚úÖ')
    console.log(`[order:process] –û—Ç—Ä–∏–º–∞–Ω–æ paragraphs: ${formattedParagraphs?.length || 0}, firstLine: "${firstLine?.substring(0, 50) || 'undefined'}"`)
    
    // –†–æ–∑–±—ñ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É –Ω–∞ –ø—É–Ω–∫—Ç–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∏
    const orderStructure = parseOrderStructure(formattedParagraphs)
    console.log(`[order:process] –†–æ–∑—ñ–±—Ä–∞–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–∫–∞–∑—É: ${orderStructure.length} –æ—Å–Ω–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`)
    
    const paragraphs = formattedParagraphs.map(p => p.text) // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      
      console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ –∞–±–∑–∞—Ü—ñ–≤ —É Word: ${paragraphs.length}`)
      console.log(`[order:process] –ü–µ—Ä—à–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∫–∞–∑—É: "${firstLine}"`)
      console.log(`[order:process] –ü–µ—Ä—à—ñ 3 –∞–±–∑–∞—Ü–∏:`, paragraphs.slice(0, 3))
      
      // 2–ë–°–ü —Ä–µ–∂–∏–º - –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
      if (payload.flags.is2BSP) {
        try {
          console.log('[order:process] –†–µ–∂–∏–º 2–ë–°–ü: –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º "2-–≥–æ –±–∞—Ç–∞–ª—å–π–æ–Ω—É" –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...')
        
          // –ó–Ω–∞–π—Ç–∏ –∑–±—ñ–≥–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –Ω–∞–∫–∞–∑—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
          const matchedItems = findInOrderStructure(orderStructure, "2-–≥–æ –±–∞—Ç–∞–ª—å–π–æ–Ω—É")
          console.log(`[order:process] –ó–±—ñ–≥—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º "2-–≥–æ –±–∞—Ç–∞–ª—å–π–æ–Ω—É": ${matchedItems.length}`)
          
          // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤ –∑ —ó—Ö —Ç–∏–ø–∞–º–∏
          if (matchedItems.length > 0) {
            console.log('[order:process] –ü–µ—Ä—à—ñ 3 –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:')
            for (let i = 0; i < Math.min(3, matchedItems.length); i++) {
              const item = matchedItems[i]
              console.log(`[order:process] –ó–±—ñ–≥ #${i+1} [${item.type}${item.number ? ` ${item.number}` : ''}]: "${item.text.substring(0, 100)}..."`)
            }
          }
          
          // –î–æ–¥–∞—Ç–∏ 2–ë–°–ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Å–ø–∏—Å–∫—É
          results.push({
            type: '2–ë–°–ü',
            path: payload.outputPath.replace('.docx', '_2–ë–°–ü.docx'),
            stats: {
              tokens: 1,
              paragraphs: formattedParagraphs.length,
              matched: matchedItems.length,
              structureElements: orderStructure.length
            }
          })
          
          // –°—Ç–≤–æ—Ä–∏—Ç–∏ 2–ë–°–ü –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø–µ—Ä—à–æ—é —Å—Ç—Ä–æ–∫–æ—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
          const bspPath = payload.outputPath.replace('.docx', '_2–ë–°–ü.docx')
          await createStructuredResultDocument(matchedItems, bspPath, firstLine)
          
        } catch (err: any) {
          console.error('[order:process] 2–ë–°–ü processing error:', err)
          return { ok: false, error: `2–ë–°–ü –æ–±—Ä–æ–±–∫–∞: ${err instanceof Error ? err.message : String(err)}` }
        }
      }
      
      // –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º - –ø–æ—à—É–∫ –∑ Excel —Ñ–∞–π–ª–æ–º —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
      if (payload.flags.isOrder) {
        try {
          console.log('[order:process] –†–µ–∂–∏–º –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è: —á–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É —Ç–∞ –ø–æ—à—É–∫ –∑ AND –ª–æ–≥—ñ–∫–æ—é...')
          
          // –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ü–Ü–ë
          let excelNames: string[] = []
          if (payload.excelPath) {
            console.log(`[order:process] –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É: ${payload.excelPath}`)
            excelNames = await readExcelColumnD(payload.excelPath)
            console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ ${excelNames.length} –ü–Ü–ë –≤ Excel –∫–æ–ª–æ–Ω—Ü—ñ D`)
          } else {
            console.log('[order:process] ‚ö†Ô∏è Excel —Ñ–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—à—É–∫ "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ"')
          }
          
          // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –∑ UkrainianNameDeclension
          const wordText = paragraphs.join('\n\n')
          const orderResults = UkrainianNameDeclension.findOrderParagraphs(wordText, excelNames)
          
          console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ –∞–±–∑–∞—Ü—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é: ${orderResults.length}`)
          
          // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤
          if (orderResults.length > 0) {
            console.log('[order:process] –ü–µ—Ä—à—ñ 3 –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–∑–∞—Ü–∏ –∑ AND –ª–æ–≥—ñ–∫–æ—é:')
            for (let i = 0; i < Math.min(3, orderResults.length); i++) {
              const result = orderResults[i]
              console.log(`[order:process] –ó–±—ñ–≥ #${i+1}: –ü–Ü–ë: [${result.matchedNames.join(', ')}] - "${result.paragraph.substring(0, 100)}..."`)
            }
          }
          
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç OrderItem –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
          const orderMatchedItems: OrderItem[] = orderResults.map((result, index) => ({
            type: 'paragraph' as const,
            text: result.paragraph,
            html: result.paragraph,
            index: result.startPosition,
            children: [],
            matchedNames: result.matchedNames
          }))
          
          // –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É
          results.push({
            type: '–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è',
            path: payload.outputPath.replace('.docx', '_–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.docx'),
            stats: {
              tokens: 1,
              paragraphs: formattedParagraphs.length,
              matched: orderMatchedItems.length,
              structureElements: orderStructure.length
            }
          })
          
          // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –∑ –ø–µ—Ä—à–æ—é —Å—Ç—Ä–æ–∫–æ—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
          const orderPath = payload.outputPath.replace('.docx', '_–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.docx')
          await createStructuredResultDocument(orderMatchedItems, orderPath, firstLine)
          
        } catch (err: any) {
          console.error('[order:process] –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è processing error:', err)
          return { ok: false, error: `–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∞: ${err instanceof Error ? err.message : String(err)}` }
        }
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω–∏–π
      if (!payload.flags.is2BSP && !payload.flags.isOrder) {
        return { ok: false, error: '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–µ–∂–∏–º: 2–ë–°–ü –∞–±–æ –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è' }
      }
      
      // –ü—ñ–¥—Å—É–º–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
      console.log(`[order:process] === –ü–Ü–î–°–£–ú–û–ö ===`)
      console.log(`[order:process] –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${results.length}`)
      results.forEach((result, index) => {
        console.log(`[order:process] ${index + 1}. ${result.type}: ${result.path} (${result.stats.matched} –∑–±—ñ–≥—ñ–≤)`)
      })
      
      // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) - –≤—ñ–¥–∫—Ä–∏—Ç–∏ –í–°–Ü —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      if (payload.flags.autoOpen && results.length > 0) {
        try {
          for (let i = 0; i < results.length; i++) {
            // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É
            setTimeout(() => {
              shell.openPath(results[i].path)
              console.log(`[order:process] Auto-opening document ${i + 1}/${results.length}:`, results[i].path)
            }, 500 + i * 200) // 500ms –¥–ª—è –ø–µ—Ä—à–æ–≥–æ, 700ms –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —ñ —Ç.–¥.
          }
        } catch (err) {
          console.error('[order:process] Auto-open error:', err)
        }
      }
      
      return {
        ok: true,
        out: results.length > 0 ? results.map(r => r.path).join(', ') : payload.outputPath,
        stats: results.length > 0 ? {
          totalDocuments: results.length,
          documents: results.map(r => ({ type: r.type, matched: r.stats.matched }))
        } : { tokens: 0, paragraphs: 0, matched: 0 },
        results: results
      }
    
  } catch (err) {
    console.error('[order:process] Unexpected error:', err)
    return { ok: false, error: `–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err instanceof Error ? err.message : String(err)}` }
  }
})

console.log('[main] dialog:save handler ready')

// ============================================================================
// –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –í–Ü–ô–°–¨–ö–û–í–ò–• –ó–í–ê–ù–¨
// ============================================================================

function testDashPointPatterns() {
  console.log('\n=== –¢–ï–°–¢ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –í–Ü–ô–°–¨–ö–û–í–ò–• –ó–í–ê–ù–¨ ===\n')
  
  const testCases = [
    // ‚úÖ –ú–∞—é—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏—Å—è
    { text: '—Å–æ–ª–¥–∞—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π —Å–æ–ª–¥–∞—Ç', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—à—Ç–∞–±-—Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–∫–∞–ø—ñ—Ç–∞–Ω', expected: true },
    { text: '–º–∞–π–æ—Ä', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç -', expected: true },
    { text: '—Å–µ—Ä–∂–∞–Ω—Ç:', expected: true },
    { text: '–ú–æ–ª–æ–¥—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç -', expected: true },
    
    // ‚ùå –ù–ï –º–∞—é—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏—Å—è
    { text: '13. –û–ì–û–õ–û–°–ò–¢–ò –ø—Ä–æ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è', expected: false },
    { text: '15.1. –ó—ñ —Å–∫–ª–∞–¥—É —Å–∏–ª', expected: false },
    { text: '—Å—Ç–∞—Ä—à–æ–≥–æ –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç–∞ –ü–ï–¢–†–ï–ù–ö–ê', expected: false },
    { text: '–ø—Ä–∞–ø–æ—Ä—â–∏–∫', expected: false },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç –¥—É–∂–µ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç', expected: false }
  ]
  
  let passed = 0
  let failed = 0
  
  for (const testCase of testCases) {
    const result = isDashPointByPattern(testCase.text)
    const status = result === testCase.expected ? '‚úÖ' : '‚ùå'
    
    if (result === testCase.expected) {
      passed++
    } else {
      failed++
      console.log(`${status} FAIL: "${testCase.text}"`)
      console.log(`   –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: ${testCase.expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ: ${result}`)
    }
  }
  
  console.log(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–ò ===`)
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${testCases.length}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${testCases.length}`)
  console.log(`==================\n`)
}

// –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é –Ω–∞–∫–∞–∑—ñ–≤:
// testDashPointPatterns()
