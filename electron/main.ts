import { app, BrowserWindow, ipcMain, dialog, shell } from 'electron'
import path from 'node:path'
import fs from 'node:fs/promises'
import * as mammoth from 'mammoth'
import { Document, Paragraph, Packer, TextRun } from 'docx'
import * as xlsx from 'xlsx'

import { setupOSIntegration, notify, openExternal, togglePowerSaveBlocker } from './services/osIntegration'
import { createStorage } from './services/storage'
import { UpdateService } from './services/updateService'
import { UkrainianNameDeclension } from './services/UkrainianNameDeclension'

const isDev = process.env.NODE_ENV !== 'production' && (process.env.VITE_DEV_SERVER_URL !== undefined || process.argv.includes('--dev'))

let storage: any
let updateService: UpdateService
let mainWindow: BrowserWindow | null = null

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤ –≤ renderer process
function sendLog(level: 'info' | 'warn' | 'error', message: string) {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send('main:log', level, message)
  }
}

// –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ console.log/warn/error –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ UI
const originalLog = console.log
const originalWarn = console.warn
const originalError = console.error

console.log = (...args: any[]) => {
  originalLog.apply(console, args)
  const message = args.map(arg => {
    if (typeof arg === 'object') {
      try { return JSON.stringify(arg, null, 2) }
      catch { return String(arg) }
    }
    return String(arg)
  }).join(' ')
  sendLog('info', message)
}

console.warn = (...args: any[]) => {
  originalWarn.apply(console, args)
  const message = args.map(arg => String(arg)).join(' ')
  sendLog('warn', message)
}

console.error = (...args: any[]) => {
  originalError.apply(console, args)
  const message = args.map(arg => String(arg)).join(' ')
  sendLog('error', message)
}

function norm(str: string): string {
  return str.toLowerCase()
    .replace(/[¬´¬ª"""''`]/g, '"')
    .replace(/[‚Äî‚Äì‚àí]/g, '-')
    .replace(/‚Ä¶/g, '...')
    .replace(/\s+/g, ' ')
    .trim()
}

function createWindow(): BrowserWindow {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: false
    }
  })

  if (isDev) {
    const devURL = process.env.VITE_DEV_SERVER_URL || 'http://localhost:5177'
    mainWindow.loadURL(devURL)
    
    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ DevTools –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    mainWindow.webContents.openDevTools({ mode: 'detach' })
    
    // FIXED: –í–∏–º–∏–∫–∞—î–º–æ Autofill –≤ DevTools –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    mainWindow.webContents.on('devtools-opened', () => {
      if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.devToolsWebContents?.executeJavaScript(`
          // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Autofill —É –∫–æ–Ω—Å–æ–ª—ñ
          const originalError = console.error;
          console.error = function(...args) {
            const msg = args[0]?.toString() || '';
            if (msg.includes('Autofill')) {
              return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Autofill
            }
            originalError.apply(console, args);
          };
        `).catch(() => {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        });
      }
    });
  } else {
    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))
  }

  // –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ DevTools –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ (F12)
  mainWindow.webContents.on('before-input-event', (event, input) => {
    if (input.key === 'F12' && mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.toggleDevTools()
    }
  })
  
  return mainWindow
}

function setupUpdateHandlers() {
  // ============================================================================
  // IPC HANDLERS: AUTO-UPDATE (Simplified - based on TZ Order Processor)
  // ============================================================================

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –¥–æ–¥–∞—Ç–∫—É
  ipcMain.handle('updates:get-version', () => {
    return updateService.getCurrentVersion()
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ GitHub API
  ipcMain.handle('updates:check', async () => {
    try {
      return await updateService.checkForUpdates()
    } catch (error) {
      console.error('[IPC] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å:', error)
      return {
        hasUpdate: false,
        latestVersion: updateService.getCurrentVersion(),
        currentVersion: updateService.getCurrentVersion(),
        releaseInfo: null,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  })

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ GitHub
  ipcMain.handle('updates:download', async (_, updateInfo) => {
    try {
      console.log('[IPC] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', updateInfo)
      return await updateService.downloadUpdate(updateInfo)
    } catch (error) {
      console.error('[IPC] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error)
      return {
        success: false,
        path: false,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  })

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞ (–¥–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
  ipcMain.handle('updates:restart-app', async () => {
    try {
      console.log('[IPC] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É...')
      app.relaunch()
      app.exit(0)
    } catch (error) {
      console.error('[IPC] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É:', error)
    }
  })

  // ============================================================================
  // EVENT LISTENERS: Progress Bar & Status Updates
  // ============================================================================

  // –ü–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ renderer
  updateService.on('download-progress', (progress) => {
    BrowserWindow.getAllWindows().forEach(win => {
      win.webContents.send('update:download-progress', progress)
    })
  })

  // –ü–µ—Ä–µ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  updateService.on('status', (status) => {
    BrowserWindow.getAllWindows().forEach(win => {
      win.webContents.send('update:status', status)
    })
  })

  // –ü–µ—Ä–µ–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏
  updateService.on('error', (error) => {
    BrowserWindow.getAllWindows().forEach(win => {
      win.webContents.send('update:error', error)
    })
  })
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
function setupBatchProcessing() {
  const { BatchProcessor } = require('./services/batch/BatchProcessor')
  let batchProcessor: any = null

  // –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:process', async (_, options) => {
    try {
      if (batchProcessor && batchProcessor.isRunning()) {
        throw new Error('–ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è')
      }

      batchProcessor = new BatchProcessor()
      
      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –ø—Ä–æ–≥—Ä–µ—Å—É
      batchProcessor.on('progress', (progress: any) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:progress', progress)
        })
      })

      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –ª–æ–≥—É–≤–∞–Ω–Ω—è
      batchProcessor.on('log', (level: string, message: string) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:log', { level, message })
        })
      })

      // –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      batchProcessor.on('complete', (result: any) => {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('batch:complete', result)
        })
      })

      return await batchProcessor.processDirectory(options)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:', error)
      throw error
    }
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:is-running', () => {
    return batchProcessor ? batchProcessor.isRunning() : false
  })

  // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
  ipcMain.handle('batch:cancel', () => {
    if (batchProcessor) {
      batchProcessor.cancel()
      return true
    }
    return false
  })
  
  // üêç Python Excel Processing
  ipcMain.handle('python:process-excel', async (_, config) => {
    const { PythonExcelService } = require('./services/PythonExcelService')
    return await PythonExcelService.processExcel(config)
  })

  // –í–∏–±—ñ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  ipcMain.handle('batch:select-directory', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: '–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Excel —Ñ–∞–π–ª–∞–º–∏'
    })
    return result.canceled ? null : result.filePaths[0]
  })

  // –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  ipcMain.handle('batch:select-output-file', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showSaveDialog({
      title: '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É',
      defaultPath: '–Ü–Ω–¥–µ–∫—Å_–±—ñ–π—Ü—ñ–≤.xlsx',
      filters: [
        { name: 'Excel Files', extensions: ['xlsx'] }
      ]
    })
    return result.canceled ? null : result.filePath
  })

  // –í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É –∑ —ñ–º–µ–Ω–∞–º–∏
  ipcMain.handle('batch:select-excel-file', async () => {
    const { dialog } = require('electron')
    const result = await dialog.showOpenDialog({
      title: '–û–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª –∑ —ñ–º–µ–Ω–∞–º–∏',
      filters: [
        { name: 'Excel Files', extensions: ['xlsx', 'xls'] },
        { name: 'All Files', extensions: ['*'] }
      ],
      properties: ['openFile']
    })
    return result.canceled ? null : result.filePaths[0]
  })

  // –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ
  ipcMain.handle('batch:scan-excel-files', async (event, folderPath: string) => {
    const fs = require('fs')
    const path = require('path')
    
    try {
      if (!fs.existsSync(folderPath)) {
        return []
      }
      
      const files = fs.readdirSync(folderPath)
      const excelFiles = files.filter((file: string) => {
        const ext = path.extname(file).toLowerCase()
        return ext === '.xlsx' || ext === '.xls'
      })
      
      return excelFiles
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error)
      return []
    }
  })
}

app.whenReady().then(async () => {
  storage = createStorage()
  updateService = new UpdateService()
  
  setupUpdateHandlers()
  setupBatchProcessing()
  setupOSIntegration(); 
  const window = createWindow();
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})

// IPC handlers
ipcMain.handle('os:notify', (_e, { title, body }) => notify(title, body))
ipcMain.handle('os:openExternal', (_e, { url }) => openExternal(url))
ipcMain.handle('os:powerBlocker', (_e, { enable }) => togglePowerSaveBlocker(!!enable))

ipcMain.handle('storage:getSetting', (_e, { key, fallback }) => storage.getSetting(key, fallback))
ipcMain.handle('storage:setSetting', (_e, { key, value }) => storage.setSetting(key, value))
ipcMain.handle('storage:addNote', (_e, { text }) => storage.addNote(text))
ipcMain.handle('storage:listNotes', () => storage.listNotes())

ipcMain.handle('dialog:save', async (e, { suggestName }) => {
  const result = await dialog.showSaveDialog(BrowserWindow.fromWebContents(e.sender)!, {
    defaultPath: suggestName || 'result.docx',
    filters: [
      { name: 'Word Documents', extensions: ['docx'] },
      { name: 'All Files', extensions: ['*'] }
    ]
  })
  
  return result.canceled ? null : result.filePath
})

ipcMain.handle('dialog:select-folder', async (e) => {
  const result = await dialog.showOpenDialog(BrowserWindow.fromWebContents(e.sender)!, {
    properties: ['openDirectory']
  })
  
  return result.canceled ? null : { filePath: result.filePaths[0] }
})

ipcMain.handle('fs:read-directory', async (_, folderPath: string) => {
  try {
    const files = await fs.readdir(folderPath)
    return files.map(name => ({
      name,
      path: path.join(folderPath, name)
    }))
  } catch (error) {
    console.error('Failed to read directory:', error)
    throw error
  }
})

ipcMain.handle('fs:read-excel-file', async (_, filePath: string) => {
  try {
    const buffer = await fs.readFile(filePath)
    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength)
  } catch (error) {
    console.error('Failed to read Excel file:', error)
    throw error
  }
})

ipcMain.handle('fs:write-excel-file', async (_, filePath: string, buffer: ArrayBuffer) => {
  try {
    const nodeBuffer = Buffer.from(buffer)
    await fs.writeFile(filePath, nodeBuffer)
  } catch (error) {
    console.error('Failed to write Excel file:', error)
    throw error
  }
})

// –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
function findParagraphsByKeyword(paragraphs: string[], keyword: string): string[] {
  const normalizedKeyword = keyword.toLowerCase()
  const matched: string[] = []
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i]
    const normalizedParagraph = norm(paragraph)
    
    if (normalizedParagraph.includes(normalizedKeyword)) {
      matched.push(paragraph)
    }
  }
  
  return matched
}

async function extractParagraphsFromWord(wordBuf: ArrayBuffer): Promise<string[]> {
  try {
    const result = await mammoth.convertToHtml({ 
      buffer: Buffer.from(wordBuf)
    })
    
    // –†–æ–∑–±–∏—Ç–∏ HTML –Ω–∞ –∞–±–∑–∞—Ü–∏
    const paragraphs = result.value
      .split(/<\/?p[^>]*>/i)
      .map(p => p.replace(/<[^>]+>/g, '').trim()) // –í–∏–¥–∞–ª–∏—Ç–∏ HTML —Ç–µ–≥–∏
      .filter(p => p.length > 0) // –ó–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ
    
    return paragraphs
  } catch (err) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Word: ${err instanceof Error ? err.message : String(err)}`)
  }
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö –∞–±–∑–∞—Ü—ñ–≤
async function extractFormattedParagraphsFromWord(wordBuf: ArrayBuffer): Promise<{
  paragraphs: Array<{ text: string, html: string }>,
  firstLine: string
}> {
  try {
    const result = await mammoth.convertToHtml({ 
      buffer: Buffer.from(wordBuf)
    })
    
    const htmlParagraphs = result.value.split(/<\/?p[^>]*>/i).filter(p => p.trim().length > 0)
    
    const paragraphs = htmlParagraphs.map((htmlPara) => {
      const text = htmlPara.replace(/<[^>]+>/g, '').trim()
      const html = htmlPara.trim()
      
      return { text, html }
    }).filter(p => p.text.length > 0)
    
    const firstLine = paragraphs.length > 0 ? paragraphs[0].text : ''
    
    return { paragraphs, firstLine }
  } catch (err) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Word: ${err instanceof Error ? err.message : String(err)}`)
  }
}

// –¢–∏–ø–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É
interface OrderItem {
  type: 'point' | 'subpoint' | 'dash-point' | 'paragraph'
  number?: string  // "1", "7.1", "8.3" —Ç–æ—â–æ
  text: string
  html: string
  index: number    // –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
  children: OrderItem[]
  parent?: OrderItem
  matchedNames?: string[] // –ü–Ü–ë –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ü—å–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
}

// ============================================================================
// –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –®–¢–†–ò–•–ü–£–ù–ö–¢–£ –ó–ê –í–Ü–ô–°–¨–ö–û–í–ò–ú–ò –ó–í–ê–ù–ù–Ø–ú–ò –¢–ê –î–ê–¢–ê–ú–ò
// ============================================================================

// ============================================================================
// HELPER: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ç–µ–∫—Å—Ç –¥–∞—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ "–∑ DD –º—ñ—Å—è—Ü—å YYYY —Ä–æ–∫—É:"
// ============================================================================

function isDatePattern(text: string): boolean {
  const cleanText = text.trim().toLowerCase()
  
  // –°–ø–∏—Å–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –º—ñ—Å—è—Ü—ñ–≤
  const ukrainianMonths = [
    '—Å—ñ—á–Ω—è', '—Å—ñ—á–µ–Ω—å',
    '–ª—é—Ç–æ–≥–æ', '–ª—é—Ç–∏–π',
    '–±–µ—Ä–µ–∑–Ω—è', '–±–µ—Ä–µ–∑–µ–Ω—å',
    '–∫–≤—ñ—Ç–Ω—è', '–∫–≤—ñ—Ç–µ–Ω—å',
    '—Ç—Ä–∞–≤–Ω—è', '—Ç—Ä–∞–≤–µ–Ω—å',
    '—á–µ—Ä–≤–Ω—è', '—á–µ—Ä–≤–µ–Ω—å',
    '–ª–∏–ø–Ω—è', '–ª–∏–ø–µ–Ω—å',
    '—Å–µ—Ä–ø–Ω—è', '—Å–µ—Ä–ø–µ–Ω—å',
    '–≤–µ—Ä–µ—Å–Ω—è', '–≤–µ—Ä–µ—Å–µ–Ω—å',
    '–∂–æ–≤—Ç–Ω—è', '–∂–æ–≤—Ç–µ–Ω—å',
    '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–ª–∏—Å—Ç–æ–ø–∞–¥',
    '–≥—Ä—É–¥–Ω—è', '–≥—Ä—É–¥–µ–Ω—å'
  ]
  
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—è—Ü—ñ–≤
  const monthsPattern = ukrainianMonths.join('|')
  
  // –ü–∞—Ç–µ—Ä–Ω: "–∑ (1-31) (–º—ñ—Å—è—Ü—å) (—Ä—ñ–∫ 4 —Ü–∏—Ñ—Ä–∏) —Ä–æ–∫—É" + –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–ª + –¥–≤–æ–∫—Ä–∞–ø–∫–∞
  const dateRegex = new RegExp(
    `^–∑\\s+(\\d{1,2})\\s+(${monthsPattern})\\s+(\\d{4})\\s+—Ä–æ–∫—É\\s*:?\\s*$`,
    'i'
  )
  
  const match = cleanText.match(dateRegex)
  
  if (!match) {
    return false
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—è –≤—ñ–¥ 1 –¥–æ 31
  const day = parseInt(match[1], 10)
  if (day < 1 || day > 31) {
    return false
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ä—ñ–∫ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π (2020-2100)
  const year = parseInt(match[3], 10)
  if (year < 2020 || year > 2100) {
    return false
  }
  
  console.log(`[isDatePattern] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É: "${text}"`)
  return true
}

function isDashPointByPattern(text: string): boolean {
  const cleanText = text.trim().toLowerCase()
  
  // === –ü–ï–†–ï–í–Ü–†–ö–ê 1: –ß–ò –Ñ –¶–ï –î–ê–¢–ê ===
  if (isDatePattern(text)) {
    return true  // –õ–æ–≥ –≤–∂–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ isDatePattern
  }
  
  // === –ü–ï–†–ï–í–Ü–†–ö–ê 2: –ß–ò –ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø –ó "–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤" ===
  const phrase = '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤'
  if (cleanText.startsWith(phrase)) {
    console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–∑—É: "${text}"`)
    return true
  }
  
  // === –ü–ï–†–ï–í–Ü–†–ö–ê 3: –ß–ò –Ñ –¶–ï –í–Ü–ô–°–¨–ö–û–í–ï –ó–í–ê–ù–ù–Ø ===
  const allowedRanks = [
    '—Å–æ–ª–¥–∞—Ç',
    '—Å—Ç–∞—Ä—à–∏–π —Å–æ–ª–¥–∞—Ç',
    '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '—Å–µ—Ä–∂–∞–Ω—Ç',
    '—Å—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
    '—à—Ç–∞–±-—Å–µ—Ä–∂–∞–Ω—Ç',
    '–∫–∞–ø—ñ—Ç–∞–Ω',
    '–º–∞–π–æ—Ä',
    '–º–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç',
    '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç',
    '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç'
  ]
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å (–º–æ–∂–ª–∏–≤–æ –∑ —Ç–∏—Ä–µ –≤ –∫—ñ–Ω—Ü—ñ)
  for (const rank of allowedRanks) {
    // –í–∞—Ä—ñ–∞–Ω—Ç 1: –¢–æ—á–Ω–æ —è–∫ —É —Å–ø–∏—Å–∫—É
    if (cleanText === rank) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è: "${text}"`)
      return true
    }
    
    // –í–∞—Ä—ñ–∞–Ω—Ç 2: –Ü–∑ —Ç–∏—Ä–µ –∞–±–æ –ø—Ä–æ–±—ñ–ª–æ–º —ñ —Ç–∏—Ä–µ –≤ –∫—ñ–Ω—Ü—ñ
    if (cleanText === `${rank} -` || cleanText === `${rank}-`) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è –∑ —Ç–∏—Ä–µ: "${text}"`)
      return true
    }
    
    // –í–∞—Ä—ñ–∞–Ω—Ç 3: –Ü–∑ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é –≤ –∫—ñ–Ω—Ü—ñ
    if (cleanText === `${rank}:` || cleanText === `${rank} :`) {
      console.log(`[isDashPoint] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≤–∞–Ω–Ω—è –∑ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é: "${text}"`)
      return true
    }
  }
  
  return false
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–æ—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É –∑ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
function parseOrderStructure(paragraphs: Array<{ text: string, html: string }>): OrderItem[] {
  const structure: OrderItem[] = []
  let currentPoint: OrderItem | null = null
  let currentSubpoint: OrderItem | null = null
  let currentDashPoint: OrderItem | null = null
  
  console.log('[parseOrderStructure] –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–±–æ—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...\n')
  
  for (let i = 0; i < paragraphs.length; i++) {
    const para = paragraphs[i]
    const text = para.text.trim()
    const html = para.html.trim()
    
    // –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ (1, 2, 3, ... –∞–±–æ 1., 2., 3., ...)
    const pointMatch = text.match(/^(\d+)\.?\s+(.+)/) && !text.match(/^\d+\.\d+/)
    if (pointMatch) {
      const matches = text.match(/^(\d+)\.?\s+(.+)/)
      const pointNumber = matches![1]
      const pointText = matches![2]
      
      console.log(`[parseOrderStructure] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—É–Ω–∫—Ç ${pointNumber}: "${pointText.substring(0, 50)}..."`)
      
      currentPoint = {
        type: 'point',
        number: pointNumber,
        text: text,
        html: html,
        index: i,
        children: []
      }
      structure.push(currentPoint)
      currentSubpoint = null
      currentDashPoint = null
      continue
    }
    
    // –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤ (7.1, 8.3, ... –∞–±–æ 7.1., 8.3., ...)
    const subpointMatch = text.match(/^(\d+\.\d+)\.?\s+(.+)/)
    if (subpointMatch) {
      const subpointNumber = subpointMatch[1]
      const subpointText = subpointMatch[2]
      
      console.log(`[parseOrderStructure] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥–ø—É–Ω–∫—Ç ${subpointNumber}: "${subpointText.substring(0, 50)}..."`)
      
      currentSubpoint = {
        type: 'subpoint',
        number: subpointNumber,
        text: text,
        html: html,
        index: i,
        children: [],
        parent: currentPoint || undefined
      }
      
      if (currentPoint) {
        currentPoint.children.push(currentSubpoint)
      } else {
        structure.push(currentSubpoint)
      }
      currentDashPoint = null
      continue
    }
    
    // === 3. –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –®–¢–†–ò–•–ü–£–ù–ö–¢ –ó–ê –í–Ü–ô–°–¨–ö–û–í–ò–ú –ó–í–ê–ù–ù–Ø–ú ===
    if (isDashPointByPattern(text)) {
      console.log(`[parseOrderStructure] ‚≠ê‚≠ê‚≠ê –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç (–∑–≤–∞–Ω–Ω—è) –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó ${i}: "${text}"`)
      
      const dashpoint: OrderItem = {
        type: 'dash-point',
        text: text,
        html: html,
        index: i,
        children: [],
        parent: currentSubpoint || currentPoint || undefined
      }
      
      if (currentSubpoint) {
        currentSubpoint.children.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –î–æ–¥–∞–Ω–æ –¥–æ –ø—ñ–¥–ø—É–Ω–∫—Ç—É ${currentSubpoint.number}`)
      } else if (currentPoint) {
        currentPoint.children.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –î–æ–¥–∞–Ω–æ –¥–æ –ø—É–Ω–∫—Ç—É ${currentPoint.number}`)
      } else {
        structure.push(dashpoint)
        console.log(`[parseOrderStructure]    ‚Üí –£–í–ê–ì–ê: –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–µ–Ω—è`)
      }
      
      currentDashPoint = dashpoint
      continue
    }
    
    // –ó–≤–∏—á–∞–π–Ω—ñ –∞–±–∑–∞—Ü–∏
    const paragraph: OrderItem = {
      type: 'paragraph',
      text: text,
      html: html,
      index: i,
      children: [],
      parent: currentDashPoint || currentSubpoint || currentPoint || undefined
    }
    
    if (currentDashPoint) {
      currentDashPoint.children.push(paragraph)
    } else if (currentSubpoint) {
      currentSubpoint.children.push(paragraph)
    } else if (currentPoint) {
      currentPoint.children.push(paragraph)
    } else {
      structure.push(paragraph)
    }
  }
  
  // === –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –í–ò–í–Ü–î –°–¢–†–£–ö–¢–£–†–ò ===
  console.log('\n[parseOrderStructure] === –°–¢–†–£–ö–¢–£–†–ê –î–û–ö–£–ú–ï–ù–¢–ê ===')
  function printStructure(items: OrderItem[], depth = 0) {
    for (const item of items) {
      const indent = '  '.repeat(depth)
      const icon = item.type === 'dash-point' ? '‚≠ê‚≠ê‚≠ê' : 
                   item.type === 'point' ? 'üìå' :
                   item.type === 'subpoint' ? 'üìç' : 'üìù'
      console.log(`${indent}${icon} ${item.type}${item.number ? ` ${item.number}` : ''}: "${item.text.substring(0, 50)}..." (idx: ${item.index})`)
      if (item.children.length > 0) {
        printStructure(item.children, depth + 1)
      }
    }
  }
  printStructure(structure)
  console.log('[parseOrderStructure] === –ö–Ü–ù–ï–¶–¨ –°–¢–†–£–ö–¢–£–†–ò ===\n')
  
  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—ñ–≤
  function countDashPoints(items: OrderItem[]): number {
    let count = 0
    for (const item of items) {
      if (item.type === 'dash-point') count++
      count += countDashPoints(item.children)
    }
    return count
  }
  
  const dashPointCount = countDashPoints(structure)
  console.log(`[parseOrderStructure] –ó–ê–ì–ê–õ–û–ú –®–¢–†–ò–•–ü–£–ù–ö–¢–Ü–í –£ –°–¢–†–£–ö–¢–£–†–Ü: ${dashPointCount}\n`)
  
  return structure
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–∫–∏ D
// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ü–Ü–ë –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ
interface ExcelName {
  name: string;      // –ü–Ü–ë
  sheetName: string; // –ù–∞–∑–≤–∞ –ª–∏—Å—Ç–∞ Excel
  sheetIndex: number; // –ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞ (–¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è)
}

async function readExcelColumnD(filePath: string, sheetsCount: number = 1): Promise<ExcelName[]> {
  try {
    const data = await fs.readFile(filePath)
    const workbook = xlsx.read(data, { type: 'buffer' })
    
    const names: ExcelName[] = []
    const sheetsToProcess = Math.min(sheetsCount, workbook.SheetNames.length)
    
    console.log(`[Excel] –û–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à—ñ ${sheetsToProcess} –ª–∏—Å—Ç—ñ–≤ –∑ ${workbook.SheetNames.length} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö`)
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤
    for (let sheetIndex = 0; sheetIndex < sheetsToProcess; sheetIndex++) {
      const sheetName = workbook.SheetNames[sheetIndex]
      const sheet = workbook.Sheets[sheetName]
      
      console.log(`[Excel] –ß–∏—Ç–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ #${sheetIndex + 1}: "${sheetName}"`)
      
      let row = 2 // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –î–†–£–ì–û–ì–û —Ä—è–¥–∫–∞ (–ø–µ—Ä—à–∏–π - –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ü–Ü–ë")
      let sheetNamesCount = 0
      
      while (true) {
        const cellAddress = `D${row}` // –ö–æ–ª–æ–Ω–∫–∞ D
        const cell = sheet[cellAddress]
        
        if (!cell || !cell.v) break // –Ø–∫—â–æ –∫–æ–º—ñ—Ä–∫–∞ –ø—É—Å—Ç–∞, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
        
        const value = String(cell.v).trim()
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ü–Ü–ë, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–æ—â–æ)
        if (value && !value.match(/^(–ü–Ü–ë|–ü—Ä—ñ–∑–≤–∏—â–µ|–Ü–º—è|–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ)$/i)) {
          names.push({
            name: value,
            sheetName: sheetName,
            sheetIndex: sheetIndex
          })
          sheetNamesCount++
        }
        
        row++
      }
      
      console.log(`[Excel] –õ–∏—Å—Ç "${sheetName}": –∑–Ω–∞–π–¥–µ–Ω–æ ${sheetNamesCount} –ü–Ü–ë`)
    }
    
    console.log(`[Excel] –í—Å—å–æ–≥–æ –∑—á–∏—Ç–∞–Ω–æ ${names.length} –ü–Ü–ë –∑ –∫–æ–ª–æ–Ω–∫–∏ D`)
    if (names.length > 0) {
      console.log(`[Excel] –ü–µ—Ä—à—ñ 3 –ü–Ü–ë:`, names.slice(0, 3).map(n => `${n.name} (${n.sheetName})`))
    }
    
    return names
  } catch (error) {
    console.error('[Excel] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ (AND –ª–æ–≥—ñ–∫–∞: –ü–Ü–ë + "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ")
function findOrderInStructure(structure: OrderItem[], excelNames: ExcelName[]): OrderItem[] {
  const results: OrderItem[] = []
  const addedIndices = new Set<number>()
  
  const orderKeywordRegex = /—Ä–æ–∑–ø–æ—Ä—è–¥(–∂–µ–Ω–Ω[—ñ—ó—è]|–∂–µ–Ω–Ω—è)/i
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  let foundParagraphs = 0
  let foundPoints = 0
  let foundSubpoints = 0
  let foundDashPoints = 0
  
  function addWithHierarchy(item: OrderItem): void {
    const hierarchyChain: OrderItem[] = []
    
    let current: OrderItem | undefined = item
    while (current) {
      hierarchyChain.unshift(current)
      current = current.parent
    }
    
    console.log(`[findOrderInStructure] –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó –¥–ª—è "${item.text.substring(0, 40)}...":`)
    for (const h of hierarchyChain) {
      console.log(`[findOrderInStructure]   ${h.type}${h.number ? ` ${h.number}` : ''}: "${h.text.substring(0, 40)}..."`)
    }
    
    for (const hierarchyItem of hierarchyChain) {
      if (!addedIndices.has(hierarchyItem.index)) {
        results.push(hierarchyItem)
        addedIndices.add(hierarchyItem.index)
        
        if (hierarchyItem.type === 'dash-point') {
          foundDashPoints++
          console.log(`[findOrderInStructure]   ‚úÖ –î–æ–¥–∞–Ω–æ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç: "${hierarchyItem.text.substring(0, 40)}..."`)
        } else if (hierarchyItem.type === 'point') {
          foundPoints++
        } else if (hierarchyItem.type === 'subpoint') {
          foundSubpoints++
        } else if (hierarchyItem.type === 'paragraph') {
          foundParagraphs++
        }
      }
    }
  }
  
  function searchRecursive(items: OrderItem[]): void {
    for (const item of items) {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –ß–∏ —î —Å–ª–æ–≤–æ "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ"
      const containsOrderKeyword = orderKeywordRegex.test(item.text)
      
      if (containsOrderKeyword) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –ß–∏ —î –ü–Ü–ë –∑ Excel
        let matchedNames: Array<{name: string, sheet: string}> = []
        
        for (const excelName of excelNames) {
          if (!excelName.name || excelName.name.trim() === '') continue
          
          if (UkrainianNameDeclension.findNameMatch(item.text, excelName.name.trim())) {
            matchedNames.push({
              name: excelName.name.trim(),
              sheet: excelName.sheetName
            })
          }
        }
        
        // AND –ª–æ–≥—ñ–∫–∞: –¥–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ñ –Ü "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ" –Ü –ü–Ü–ë
        if (matchedNames.length > 0) {
          console.log(`[findOrderInStructure] üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥ –≤ ${item.type}${item.number ? ` ${item.number}` : ''}`)
          matchedNames.forEach(match => {
            console.log(`[findOrderInStructure]    –ü–Ü–ë: "${match.name}" –∑ –ª–∏—Å—Ç–∞ Excel "${match.sheet}"`)
          })
          console.log(`[findOrderInStructure]    –¢–µ–∫—Å—Ç: "${item.text.substring(0, 100)}..."`)
          
          if (item.parent) {
            console.log(`[findOrderInStructure]    –ë–∞—Ç—å–∫–æ: ${item.parent.type}${item.parent.number ? ` ${item.parent.number}` : ''}`)
          }
          
          addWithHierarchy(item)
        }
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
      if (item.children.length > 0) {
        searchRecursive(item.children)
      }
    }
  }
  
  searchRecursive(structure)
  
  console.log(`[findOrderInStructure] === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–®–£–ö–£ ===`)
  console.log(`[findOrderInStructure] –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ: ${results.length}`)
  console.log(`[findOrderInStructure]   - –ü—É–Ω–∫—Ç—ñ–≤: ${foundPoints}`)
  console.log(`[findOrderInStructure]   - –ü—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤: ${foundSubpoints}`)
  console.log(`[findOrderInStructure]   - –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—ñ–≤: ${foundDashPoints} ‚≠ê`)
  console.log(`[findOrderInStructure]   - –ê–±–∑–∞—Ü—ñ–≤: ${foundParagraphs}`)
  
  return results.sort((a, b) => a.index - b.index)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function findInOrderStructure(structure: OrderItem[], keyword: string): OrderItem[] {
  const results: OrderItem[] = []
  const addedIndices = new Set<number>()  // –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–≤
  const normalizedKeyword = keyword.toLowerCase()
  
  const norm = (text: string) => text.toLowerCase()
  
  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ===
  let foundParagraphs = 0
  let foundPoints = 0
  let foundSubpoints = 0
  let foundDashPoints = 0
  
  function addWithHierarchy(item: OrderItem): void {
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–∑–æ–º –∑ —É—Å—ñ—î—é –π–æ–≥–æ —ñ—î—Ä–∞—Ä—Ö—ñ—î—é –±–∞—Ç—å–∫—ñ–≤
    const hierarchyChain: OrderItem[] = []
    
    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—é —ñ—î—Ä–∞—Ä—Ö—ñ—é –≤—ñ–¥ –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ –∫–æ—Ä–µ–Ω—è
    let current: OrderItem | undefined = item
    while (current) {
      hierarchyChain.unshift(current)  // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
      current = current.parent
    }
    
    // === –õ–û–ì–£–í–ê–ù–ù–Ø –Ü–Ñ–†–ê–†–•–Ü–á ===
    console.log(`[findInOrderStructure] –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó –¥–ª—è "${item.text.substring(0, 40)}...":`)
    for (const h of hierarchyChain) {
      console.log(`[findInOrderStructure]   ${h.type}${h.number ? ` ${h.number}` : ''}: "${h.text.substring(0, 40)}..."`)
    }
    
    // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—ó, —É–Ω–∏–∫–∞—é—á–∏ –¥—É–±–ª—ñ–≤
    for (const hierarchyItem of hierarchyChain) {
      if (!addedIndices.has(hierarchyItem.index)) {
        results.push(hierarchyItem)
        addedIndices.add(hierarchyItem.index)
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (hierarchyItem.type === 'dash-point') {
          foundDashPoints++
          console.log(`[findInOrderStructure]   ‚úÖ –î–æ–¥–∞–Ω–æ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç: "${hierarchyItem.text.substring(0, 40)}..."`)
        } else if (hierarchyItem.type === 'point') {
          foundPoints++
        } else if (hierarchyItem.type === 'subpoint') {
          foundSubpoints++
        } else if (hierarchyItem.type === 'paragraph') {
          foundParagraphs++
        }
      }
    }
  }
  
  function searchRecursive(items: OrderItem[]): void {
    for (const item of items) {
      const normalizedText = norm(item.text)
      
      if (normalizedText.includes(normalizedKeyword)) {
        console.log(`[findInOrderStructure] üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥ –≤ ${item.type}${item.number ? ` ${item.number}` : ''}: "${item.text.substring(0, 60)}..."`)
        
        if (item.parent) {
          console.log(`[findInOrderStructure]    –ë–∞—Ç—å–∫–æ: ${item.parent.type}${item.parent.number ? ` ${item.parent.number}` : ''}: "${item.parent.text.substring(0, 40)}..."`)
        }
        
        addWithHierarchy(item)
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
      if (item.children.length > 0) {
        searchRecursive(item.children)
      }
    }
  }
  
  searchRecursive(structure)
  
  // === –§–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
  console.log(`[findInOrderStructure] === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–®–£–ö–£ ===`)
  console.log(`[findInOrderStructure] –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ: ${results.length}`)
  console.log(`[findInOrderStructure]   - –ü—É–Ω–∫—Ç—ñ–≤: ${foundPoints}`)
  console.log(`[findInOrderStructure]   - –ü—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤: ${foundSubpoints}`)
  console.log(`[findInOrderStructure]   - –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç—ñ–≤: ${foundDashPoints} ‚≠ê`)
  console.log(`[findInOrderStructure]   - –ê–±–∑–∞—Ü—ñ–≤: ${foundParagraphs}`)
  
  // –°–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
  return results.sort((a, b) => a.index - b.index)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ–≤ (–∑ HTML —Ä–æ–∑–º—ñ—Ç–∫–æ—é)
async function createFormattedResultDocument(
  matchedParagraphs: Array<{ text: string, html: string }>, 
  outputPath: string, 
  firstLine?: string
): Promise<void> {
  const children = []
  
  // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É —Å—Ç—Ä–æ–∫—É –Ω–∞–∫–∞–∑—É, —è–∫—â–æ —î (–∑–∞–≤–∂–¥–∏ —à—Ä–∏—Ñ—Ç Calibri)
  if (firstLine) {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: firstLine,
        font: {
          name: 'Calibri'
        },
        size: 28, // 12pt
        bold: false
      })],
      spacing: { after: 200 } // –í—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç—Ä–æ–∫–∏
    }))
  }
  
  // –î–æ–¥–∞—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–∑–∞—Ü–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è + –∑–º—ñ–Ω–∞ –Ω–∞ Calibri
  if (matchedParagraphs.length > 0) {
    for (const para of matchedParagraphs) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∞–±–∑–∞—Ü –∑ —Ç–µ–∫—Å—Ç–æ–º (Calibri —à—Ä–∏—Ñ—Ç)
      // TODO: –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
      children.push(new Paragraph({ 
        children: [new TextRun({
          text: para.text,
          font: {
            name: 'Calibri'
          },
          size: 28 // 14pt
        })]
      }))
    }
  } else {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: '‚Äî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî',
        font: {
          name: 'Calibri'
        },
        size: 28,
        italics: true
      })]
    }))
  }
  
  const doc = new Document({
    styles: {
      default: {
        document: {
          run: {
            font: {
              name: 'Calibri'
            },
            size: 28 // 14pt
          }
        }
      }
    },
    sections: [{
      properties: {},
      children: children
    }]
  })
  
  const buffer = await Packer.toBuffer(doc)
  
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  const dir = path.dirname(outputPath)
  await fs.mkdir(dir, { recursive: true })
  
  await fs.writeFile(outputPath, buffer)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
async function createStructuredResultDocument(
  matchedItems: OrderItem[], 
  outputPath: string, 
  firstLine?: string
): Promise<void> {
  const children = []
  
  // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É —Å—Ç—Ä–æ–∫—É –Ω–∞–∫–∞–∑—É, —è–∫—â–æ —î
  if (firstLine) {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: firstLine,
        font: { name: 'Calibri' },
        size: 28 // 14pt
      })],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø (0.5 –¥—é–π–º–∞)
      },
      spacing: { after: 200 }
    }))
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó OrderItem –≤ Paragraph
  function createParagraphFromItem(item: OrderItem): Paragraph {
    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –Ω–æ–º–µ—Ä–æ–º –ø—É–Ω–∫—Ç—É/–ø—ñ–¥–ø—É–Ω–∫—Ç—É
    let displayText = item.text
    
    if (item.number && (item.type === 'point' || item.type === 'subpoint')) {
      // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä —Ç–∞ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
      const cleanText = item.text.replace(/^\d+(\.\d+)?\.?\s*/, '')
      displayText = `${item.number}. ${cleanText}`
    }
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    // –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç = –∂–∏—Ä–Ω–∏–π —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–∏–π
    const isBold = item.type === 'point' || item.type === 'subpoint' || item.type === 'dash-point'
    
    // === –ü–ï–†–ï–í–Ü–†–ö–ê: —á–∏ —Ü–µ —Ñ—Ä–∞–∑–∞ "–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤" ===
    const isPhraseStart = item.text.trim().toLowerCase().startsWith('–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤')
    
    // –ü—ñ–¥–∫—Ä–µ—Å–ª—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç –Ü —Ü–µ –ù–ï —Ñ—Ä–∞–∑–∞
    const isUnderline = item.type === 'dash-point' && !isPhraseStart
    
    // TextRun –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    const textRun = new TextRun({
      text: displayText,
      font: "Calibri",
      size: 28, // 14pt = 28 half-points
      bold: isBold,
      underline: isUnderline ? { type: 'single' } : undefined
    })
    
    return new Paragraph({
      children: [textRun],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø (0.5 –¥—é–π–º–∞)
      }
    })
  }
  
  // ============================================================================
  // HELPER: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
  // ============================================================================
  
  function createEmptyLine(): Paragraph {
    return new Paragraph({
      text: '',
      spacing: { 
        before: 0,
        after: 0 
      }
    })
  }
  
  // –î–æ–¥–∞—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (matchedItems.length > 0) {
    for (let i = 0; i < matchedItems.length; i++) {
      const item = matchedItems[i]
      const prevItem = i > 0 ? matchedItems[i - 1] : null
      const nextItem = i < matchedItems.length - 1 ? matchedItems[i + 1] : null
      
      // –î–æ–¥–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç–∞–º–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∞–º–∏
      if (item.type === 'point' || item.type === 'subpoint') {
        children.push(new Paragraph({
          children: [new TextRun({ text: "", font: "Calibri", size: 28 })],
          alignment: 'both',
          spacing: { after: 0 }
        }))
      }
      
      // === –î–û–î–ê–¢–ò –ü–û–†–û–ñ–ù–Ü–ô –†–Ø–î–û–ö –ü–ï–†–ï–î –®–¢–†–ò–•–ü–£–ù–ö–¢–û–ú ===
      if (item.type === 'dash-point') {
        children.push(createEmptyLine())
        console.log(`[createStructuredResultDocument] –î–æ–¥–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ü–ï–†–ï–î: "${item.text}"`)
      }
      
      // –î–æ–¥–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∞–±–∑–∞—Ü
      children.push(createParagraphFromItem(item))
      
      // === –î–û–î–ê–¢–ò –ü–û–†–û–ñ–ù–Ü–ô –†–Ø–î–û–ö –ü–Ü–°–õ–Ø –®–¢–†–ò–•–ü–£–ù–ö–¢–£ ===
      if (item.type === 'dash-point') {
        children.push(createEmptyLine())
        console.log(`[createStructuredResultDocument] –î–æ–¥–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ü–Ü–°–õ–Ø: "${item.text}"`)
      }
      
      // –î–æ–¥–∞—Ç–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç—ñ–≤
      // –ù–ï –¥–æ–¥–∞–≤–∞—Ç–∏, —è–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç - –ø—ñ–¥–ø—É–Ω–∫—Ç –∞–±–æ –®—Ç—Ä–∏—Ö–ü—É–Ω–∫—Ç —Ü—å–æ–≥–æ –ø—É–Ω–∫—Ç—É
      if (item.type === 'point' || item.type === 'subpoint') {
        const shouldAddEmptyLine = !(
          item.type === 'point' && 
          nextItem && 
          (nextItem.type === 'subpoint' || nextItem.type === 'dash-point') && 
          nextItem.parent === item
        )
        
        if (shouldAddEmptyLine) {
          children.push(new Paragraph({
            children: [new TextRun({ text: "", font: "Calibri", size: 28 })],
            alignment: 'both',
            spacing: { after: 0 }
          }))
        }
      }
    }
  } else {
    children.push(new Paragraph({ 
      children: [new TextRun({
        text: '‚Äî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî',
        font: { name: 'Calibri' },
        size: 28,
        italics: true
      })],
      alignment: 'both', // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑–∞ —à–∏—Ä–∏–Ω–æ—é
      indent: {
        firstLine: 720 // –ê–±–∑–∞—Ü–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
      }
    }))
  }
  
  const doc = new Document({
    styles: {
      default: {
        document: {
          run: {
            font: { name: 'Calibri' },
            size: 28 // 14pt
          }
        }
      }
    },
    sections: [{
      properties: {},
      children: children
    }]
  })
  
  const buffer = await Packer.toBuffer(doc)
  
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  const dir = path.dirname(outputPath)
  await fs.mkdir(dir, { recursive: true })
  
  await fs.writeFile(outputPath, buffer)
}

ipcMain.handle('order:process', async (e, payload) => {
  // –ö–†–ò–¢–ò–ß–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê #1: –¢–û–ß–ö–ê –í–•–û–î–£
  console.log('\n\nüö®üö®üö® [order:process] –¢–û–ß–ö–ê –í–•–û–î–£ - HANDLER –°–¢–ê–†–¢–£–í–ê–í üö®üö®üö®\n')
  console.log('‚ïê'.repeat(80))
  console.log('üéØüéØüéØ [order:process] HANDLER –í–ò–ö–õ–ò–ö–ê–ù–û - –í–ï–†–°–Ü–Ø 17.10.2025-15:55 üéØüéØüéØ')
  console.log('‚ïê'.repeat(80))
  console.log('\n')
  
  // –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê #2: PAYLOAD –°–¢–†–£–ö–¢–£–†–ê
  console.log('üì¶ [order:process] Payload keys:', Object.keys(payload))
  console.log('üì¶ [order:process] Payload.mode:', payload.mode)
  console.log('üì¶ [order:process] Payload.wordBuf exists:', !!payload.wordBuf)
  console.log('üì¶ [order:process] Payload.outputPath:', payload.outputPath)
  
  try {
    console.log('[order:process] starting...', {
      hasWordBuf: !!payload.wordBuf,
      outputPath: payload.outputPath,
      flags: payload.flags,
      mode: payload.mode || 'default'
    })
    
    // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!payload.wordBuf) {
      return { ok: false, error: 'Word-—à–∞–±–ª–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' }
    }
    
    if (!payload.outputPath) {
      return { ok: false, error: '–®–ª—è—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' }
    }
    
    // 2. –û–±—Ä–æ–±–∫–∞ –Ω–∞–∫–∞–∑—É (–≤—Å—ñ —Ä–µ–∂–∏–º–∏)
    const results: Array<{type: string, path: string, stats: any}> = []
    
    // –í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –∞–±–∑–∞—Ü–∏ –∑ Word (–¥–ª—è –≤—Å—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤)
    const { paragraphs: formattedParagraphs, firstLine } = await extractFormattedParagraphsFromWord(payload.wordBuf)
    
    // –†–æ–∑–±—ñ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –Ω–∞–∫–∞–∑—É –Ω–∞ –ø—É–Ω–∫—Ç–∏ —Ç–∞ –ø—ñ–¥–ø—É–Ω–∫—Ç–∏
    const orderStructure = parseOrderStructure(formattedParagraphs)
    console.log(`[order:process] –†–æ–∑—ñ–±—Ä–∞–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–∫–∞–∑—É: ${orderStructure.length} –æ—Å–Ω–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`)
    
    const paragraphs = formattedParagraphs.map(p => p.text) // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      
      console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ –∞–±–∑–∞—Ü—ñ–≤ —É Word: ${paragraphs.length}`)
      console.log(`[order:process] –ü–µ—Ä—à–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∫–∞–∑—É: "${firstLine}"`)
      console.log(`[order:process] –ü–µ—Ä—à—ñ 3 –∞–±–∑–∞—Ü–∏:`, paragraphs.slice(0, 3))
      
      // –†–µ–∂–∏–º –ø–æ—à—É–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É (—è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç —ñ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è)
      if (!payload.flags.isOrder && payload.searchText && payload.searchText.trim()) {
        try {
          const searchToken = payload.searchText.trim();
          console.log(`[order:process] –†–µ–∂–∏–º –ø–æ—à—É–∫—É —Ç–µ–∫—Å—Ç—É: –ø–æ—à—É–∫ –∑–∞ "${searchToken}" –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...`)
        
          // –ó–Ω–∞–π—Ç–∏ –∑–±—ñ–≥–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –Ω–∞–∫–∞–∑—É
          const matchedItems = findInOrderStructure(orderStructure, searchToken)
          console.log(`[order:process] –ó–±—ñ–≥—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º "${searchToken}": ${matchedItems.length}`)
          
          // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤
          if (matchedItems.length > 0) {
            console.log('[order:process] –ü–µ—Ä—à—ñ 3 –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:')
            for (let i = 0; i < Math.min(3, matchedItems.length); i++) {
              const item = matchedItems[i]
              console.log(`[order:process] –ó–±—ñ–≥ #${i+1} [${item.type}${item.number ? ` ${item.number}` : ''}]: "${item.text.substring(0, 100)}..."`)
            }
          }
          
          // –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Å–ø–∏—Å–∫—É
          results.push({
            type: '–ü–æ—à—É–∫',
            path: payload.outputPath.replace('.docx', '_–ü–æ—à—É–∫.docx'),
            stats: {
              tokens: 1,
              paragraphs: formattedParagraphs.length,
              matched: matchedItems.length,
              structureElements: orderStructure.length
            }
          })
          
          // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          const searchPath = payload.outputPath.replace('.docx', '_–ü–æ—à—É–∫.docx')
          await createStructuredResultDocument(matchedItems, searchPath, firstLine)
          
        } catch (err: any) {
          console.error('[order:process] Search text processing error:', err)
          return { ok: false, error: `–ü–æ—à—É–∫ —Ç–µ–∫—Å—Ç—É: ${err instanceof Error ? err.message : String(err)}` }
        }
      }
      
      // –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º - –ø–æ—à—É–∫ –∑ Excel —Ñ–∞–π–ª–æ–º —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
      if (payload.flags.isOrder) {
        try {
          console.log('[order:process] –†–µ–∂–∏–º –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è: —á–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É —Ç–∞ –ø–æ—à—É–∫ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é...')
          
          // –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ü–Ü–ë
          let excelNames: ExcelName[] = []
          if (payload.excelPath) {
            const sheetsCount = payload.excelSheetsCount || 1
            console.log(`[order:process] –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É: ${payload.excelPath}`)
            console.log(`[order:process] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏: ${sheetsCount}`)
            excelNames = await readExcelColumnD(payload.excelPath, sheetsCount)
            console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ ${excelNames.length} –ü–Ü–ë –≤ Excel –∫–æ–ª–æ–Ω—Ü—ñ D`)
          } else {
            console.log('[order:process] ‚ö†Ô∏è Excel —Ñ–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ - —Ä–µ–∂–∏–º –Ω–µ–º–æ–∂–ª–∏–≤–∏–π –±–µ–∑ Excel')
            return { ok: false, error: '–î–ª—è —Ä–µ–∂–∏–º—É –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–µ–Ω Excel —Ñ–∞–π–ª –∑ –ü–Ü–ë' }
          }
          
          // –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ü–æ—à—É–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –Ω–∞–∫–∞–∑—É (—è–∫ –≤ "–ü–æ—à—É–∫ —Ç–µ–∫—Å—Ç—É")
          console.log(`[order:process] –ü–æ—à—É–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –Ω–∞–∫–∞–∑—É –∑ AND –ª–æ–≥—ñ–∫–æ—é (–ü–Ü–ë + "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ")...`)
          const orderMatchedItems = findOrderInStructure(orderStructure, excelNames)
          
          console.log(`[order:process] –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: ${orderMatchedItems.length}`)
          
          // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤
          if (orderMatchedItems.length > 0) {
            console.log('[order:process] –ü–µ—Ä—à—ñ 3 –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:')
            for (let i = 0; i < Math.min(3, orderMatchedItems.length); i++) {
              const item = orderMatchedItems[i]
              console.log(`[order:process] –ó–±—ñ–≥ #${i+1} [${item.type}${item.number ? ` ${item.number}` : ''}]: "${item.text.substring(0, 100)}..."`)
            }
          }
          
          // –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É
          results.push({
            type: '–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è',
            path: payload.outputPath.replace('.docx', '_–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.docx'),
            stats: {
              tokens: 1,
              paragraphs: formattedParagraphs.length,
              matched: orderMatchedItems.length,
              structureElements: orderStructure.length
            }
          })
          
          // –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
          const orderPath = payload.outputPath.replace('.docx', '_–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.docx')
          await createStructuredResultDocument(orderMatchedItems, orderPath, firstLine)
          
        } catch (err: any) {
          console.error('[order:process] –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è processing error:', err)
          return { ok: false, error: `–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∞: ${err instanceof Error ? err.message : String(err)}` }
        }
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤–≤–µ–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –∞–±–æ –≤–∏–±—Ä–∞–Ω–æ –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è
      if (!payload.flags.isOrder && (!payload.searchText || !payload.searchText.trim())) {
        return { ok: false, error: '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è' }
      }
      
      // –ü—ñ–¥—Å—É–º–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
      console.log(`[order:process] === –ü–Ü–î–°–£–ú–û–ö ===`)
      console.log(`[order:process] –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${results.length}`)
      results.forEach((result, index) => {
        console.log(`[order:process] ${index + 1}. ${result.type}: ${result.path} (${result.stats.matched} –∑–±—ñ–≥—ñ–≤)`)
      })
      
      // –ê–≤—Ç–æ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) - –≤—ñ–¥–∫—Ä–∏—Ç–∏ –í–°–Ü —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      if (payload.flags.autoOpen && results.length > 0) {
        try {
          for (let i = 0; i < results.length; i++) {
            // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É
            setTimeout(() => {
              shell.openPath(results[i].path)
              console.log(`[order:process] Auto-opening document ${i + 1}/${results.length}:`, results[i].path)
            }, 500 + i * 200) // 500ms –¥–ª—è –ø–µ—Ä—à–æ–≥–æ, 700ms –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —ñ —Ç.–¥.
          }
        } catch (err) {
          console.error('[order:process] Auto-open error:', err)
        }
      }
      
      return {
        ok: true,
        out: results.length > 0 ? results.map(r => r.path).join(', ') : payload.outputPath,
        stats: results.length > 0 ? {
          totalDocuments: results.length,
          documents: results.map(r => ({ type: r.type, matched: r.stats.matched }))
        } : { tokens: 0, paragraphs: 0, matched: 0 },
        results: results
      }
    
  } catch (err) {
    console.error('[order:process] Unexpected error:', err)
    return { ok: false, error: `–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err instanceof Error ? err.message : String(err)}` }
  }
})

console.log('[main] dialog:save handler ready')

// ============================================================================
// –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –í–Ü–ô–°–¨–ö–û–í–ò–• –ó–í–ê–ù–¨
// ============================================================================

function testDashPointPatterns() {
  console.log('\n=== –¢–ï–°–¢ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –®–¢–†–ò–•–ü–£–ù–ö–¢–Ü–í (–ó–í–ê–ù–ù–Ø + –î–ê–¢–ò) ===\n')
  
  const testCases = [
    // ‚úÖ –í—ñ–π—Å—å–∫–æ–≤—ñ –∑–≤–∞–Ω–Ω—è
    { text: '—Å–æ–ª–¥–∞—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π —Å–æ–ª–¥–∞—Ç', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '—à—Ç–∞–±-—Å–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–∫–∞–ø—ñ—Ç–∞–Ω', expected: true },
    { text: '–º–∞–π–æ—Ä', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', expected: true },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç -', expected: true },
    { text: '—Å–µ—Ä–∂–∞–Ω—Ç:', expected: true },
    { text: '–ú–æ–ª–æ–¥—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç', expected: true },
    { text: '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç -', expected: true },
    
    // ‚úÖ –ù–û–í–Ü –¢–ï–°–¢–ò: –î–∞—Ç–∏
    { text: '–∑ 11 –∂–æ–≤—Ç–Ω—è 2025 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 27 —á–µ—Ä–≤–Ω—è 2026 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 1 —Å—ñ—á–Ω—è 2025 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 15 –±–µ—Ä–µ–∑–Ω—è 2024 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 30 –≥—Ä—É–¥–Ω—è 2025 —Ä–æ–∫—É:', expected: true },
    { text: '–ó 11 –ñ–û–í–¢–ù–Ø 2025 –†–û–ö–£:', expected: true },
    { text: '–∑ 5 —Ç—Ä–∞–≤–Ω—è 2025 —Ä–æ–∫—É :', expected: true },
    { text: '–∑ 10 –ª—é—Ç–æ–≥–æ 2025 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 20 –≤–µ—Ä–µ—Å–Ω—è 2025 —Ä–æ–∫—É:', expected: true },
    { text: '–∑ 8 –ª–∏–ø–Ω—è 2025 —Ä–æ–∫—É:', expected: true },
    
    // ‚úÖ –ù–û–í–Ü –¢–ï–°–¢–ò: –§—Ä–∞–∑–∞ "–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤"
    { text: '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ 2-–≥–æ –±–∞—Ç–∞–ª—å–π–æ–Ω—É:', expected: true },
    { text: '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ä–æ—Ç–∏ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è:', expected: true },
    { text: '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É', expected: true },
    { text: '–ù–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ 3-—ó —Ä–æ—Ç–∏:', expected: true },
    { text: '–ù–ò–ñ–ß–ï–ü–û–ô–ú–ï–ù–û–í–ê–ù–ò–• –í–Ü–ô–°–¨–ö–û–í–û–°–õ–£–ñ–ë–û–í–¶–Ü–í –ü–Ü–î–†–û–ó–î–Ü–õ–£ –û–•–û–†–û–ù–ò:', expected: true },
    { text: '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –≤–∑–≤–æ–¥—É –∑–≤\'—è–∑–∫—É', expected: true },
    { text: '–ù–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –í—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É:', expected: true },
    
    // ‚ùå –ù–ï –º–∞—é—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏—Å—è
    { text: '13. –û–ì–û–õ–û–°–ò–¢–ò –ø—Ä–æ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è', expected: false },
    { text: '15.1. –ó—ñ —Å–∫–ª–∞–¥—É —Å–∏–ª', expected: false },
    { text: '—Å—Ç–∞—Ä—à–æ–≥–æ –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç–∞ –ü–ï–¢–†–ï–ù–ö–ê', expected: false },
    { text: '–ø—Ä–∞–ø–æ—Ä—â–∏–∫', expected: false },
    { text: '–º–æ–ª–æ–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç –¥—É–∂–µ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç', expected: false },
    
    // ‚ùå –ù–û–í–Ü –¢–ï–°–¢–ò: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞—Ç–∏
    { text: '–∑ 11 –∂–æ–≤—Ç–Ω—è 2025 —Ä–æ–∫—É', expected: false },        // –Ω–µ–º–∞—î –¥–≤–æ–∫—Ä–∞–ø–∫–∏
    { text: '–∑ 11 –∂–æ–≤—Ç–Ω—è 2025', expected: false },             // –Ω–µ–º–∞—î "—Ä–æ–∫—É:"
    { text: '11 –∂–æ–≤—Ç–Ω—è 2025 —Ä–æ–∫—É:', expected: false },         // –Ω–µ–º–∞—î "–∑"
    { text: '–∑ 11 –∂–æ–≤—Ç–µ–Ω—è 2025 —Ä–æ–∫—É:', expected: false },      // –ø–æ–º–∏–ª–∫–∞ –≤ –º—ñ—Å—è—Ü—ñ
    { text: '–∑ 32 –∂–æ–≤—Ç–Ω—è 2025 —Ä–æ–∫—É:', expected: false },       // –¥–µ–Ω—å 32
    { text: '–∑ 0 –∂–æ–≤—Ç–Ω—è 2025 —Ä–æ–∫—É:', expected: false },        // –¥–µ–Ω—å 0
    { text: '–∑ 11 –∂–æ–≤—Ç–Ω—è 2019 —Ä–æ–∫—É:', expected: false },       // —Ä—ñ–∫ < 2020
    { text: '–∑ 11 –∂–æ–≤—Ç–Ω—è 2101 —Ä–æ–∫—É:', expected: false },       // —Ä—ñ–∫ > 2100
    
    // ‚ùå –ù–û–í–Ü –¢–ï–°–¢–ò: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ñ—Ä–∞–∑–∏
    { text: '–ø—Ä–æ –Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤', expected: false },
    { text: '–∑—ñ —Å–∫–ª–∞–¥—É –Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤', expected: false },
    { text: '–û–ì–û–õ–û–°–ò–¢–ò –Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤', expected: false },
    { text: '–Ω–∏–∂—á–µ–ø–æ–π–º–µ–Ω–æ–≤–∞–Ω–∏—Ö', expected: false },
    { text: '–≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤', expected: false }
  ]
  
  let passed = 0
  let failed = 0
  
  for (const testCase of testCases) {
    const result = isDashPointByPattern(testCase.text)
    const status = result === testCase.expected ? '‚úÖ' : '‚ùå'
    
    if (result === testCase.expected) {
      passed++
    } else {
      failed++
      console.log(`${status} FAIL: "${testCase.text}"`)
      console.log(`   –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: ${testCase.expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ: ${result}`)
    }
  }
  
  console.log(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–ò ===`)
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${testCases.length}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${testCases.length}`)
  console.log(`==================\n`)
}

// –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é –Ω–∞–∫–∞–∑—ñ–≤:
// testDashPointPatterns()
