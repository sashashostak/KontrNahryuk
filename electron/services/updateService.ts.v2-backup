/**
 * UpdateService - Simplified Auto-Update System for KontrNahryuk
 * Based on Order Processor TZ (TZ_Auto_Update_System.txt)
 * 
 * Features:
 * - Check for updates via GitHub Releases API
 * - Download portable ZIP from GitHub
 * - Semantic version comparison (major.minor.patch)
 * - No licensing or complex manifest logic
 * 
 * @version 2.0.0 - Simplified
 */

import { EventEmitter } from 'events'
import { app, shell } from 'electron'
import fetch from 'node-fetch'
import * as path from 'path'
import * as fs from 'fs'
import * as os from 'os'

// ============================================================================
// TYPES & INTERFACES
// ============================================================================

/**
 * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å
 */
export interface UpdateInfo {
  hasUpdate: boolean          // –ß–∏ —î –¥–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  latestVersion: string        // –û—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è –Ω–∞ GitHub
  currentVersion: string       // –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–æ–¥–∞—Ç–∫—É
  releaseInfo: any | null      // –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–ª—ñ–∑ –∑ GitHub API
  error: string | null         // –ü–æ–º–∏–ª–∫–∞ (—è–∫—â–æ —î)
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
export interface DownloadResult {
  success: boolean             // –ß–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
  path: string | false         // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ false
  error?: string               // –ü–æ–º–∏–ª–∫–∞ (—è–∫—â–æ —î)
}

// ============================================================================
// UPDATE SERVICE CLASS
// ============================================================================

class UpdateService extends EventEmitter {
  private currentVersion: string
  private updateCheckInProgress: boolean = false
  private readonly GITHUB_REPO = 'sashashostak/KontrNahryuk'

  constructor() {
    super()
    this.currentVersion = app.getVersion()
    this.log(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: ${this.currentVersion}`)
  }

  // ==========================================================================
  // PUBLIC METHODS
  // ==========================================================================

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –¥–æ–¥–∞—Ç–∫—É
   */
  getCurrentVersion(): string {
    return this.currentVersion
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ GitHub Releases API
   * 
   * @returns {Promise<UpdateInfo>} –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  async checkForUpdates(): Promise<UpdateInfo> {
    // Prevent multiple simultaneous checks
    if (this.updateCheckInProgress) {
      this.log('‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è')
      return {
        hasUpdate: false,
        latestVersion: this.currentVersion,
        currentVersion: this.currentVersion,
        releaseInfo: null,
        error: '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è'
      }
    }

    this.updateCheckInProgress = true

    try {
      this.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–∞ GitHub...')

      // Fetch latest release from GitHub API
      const url = `https://api.github.com/repos/${this.GITHUB_REPO}/releases/latest`
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'User-Agent': `KontrNahryuk/${this.currentVersion}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      })

      if (!response.ok) {
        throw new Error(`GitHub API –ø–æ–º–∏–ª–∫–∞: ${response.status} ${response.statusText}`)
      }

      const release = await response.json()
      const latestVersion = release.tag_name || release.name || 'unknown'
      const hasUpdate = this.isNewerVersion(latestVersion, this.currentVersion)

      this.log(`üì¶ –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: ${this.currentVersion}`)
      this.log(`üì¶ –û—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è: ${latestVersion}`)
      this.log(`${hasUpdate ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!' : '‚úì –ü—Ä–æ–≥—Ä–∞–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞'}`)

      this.updateCheckInProgress = false

      return {
        hasUpdate,
        latestVersion,
        currentVersion: this.currentVersion,
        releaseInfo: hasUpdate ? release : null,
        error: null
      }

    } catch (error) {
      this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å: ${error instanceof Error ? error.message : String(error)}`)
      this.updateCheckInProgress = false

      return {
        hasUpdate: false,
        latestVersion: this.currentVersion,
        currentVersion: this.currentVersion,
        releaseInfo: null,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ GitHub Releases
   * 
   * @param {UpdateInfo} updateInfo - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Promise<DownloadResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  async downloadUpdate(updateInfo: UpdateInfo): Promise<DownloadResult> {
    try {
      if (!updateInfo.releaseInfo) {
        throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–ª—ñ–∑')
      }

      const release = updateInfo.releaseInfo

      // –ó–Ω–∞–π—Ç–∏ portable ZIP —Ñ–∞–π–ª –≤ assets
      const portableAsset = release.assets?.find((asset: any) =>
        asset.name.toLowerCase().includes('portable') && 
        asset.name.endsWith('.zip')
      )

      if (!portableAsset) {
        this.log('‚ö†Ô∏è Portable ZIP –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–∫—Ä–∏–≤–∞—é —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–ª—ñ–∑—É')
        shell.openExternal(release.html_url)
        throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í—ñ–¥–∫—Ä–∏—Ç–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–ª—ñ–∑—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.')
      }

      this.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${portableAsset.name}`)
      this.log(`üîó URL: ${portableAsset.browser_download_url}`)

      // Download file from GitHub
      const response = await fetch(portableAsset.browser_download_url, {
        method: 'GET',
        headers: {
          'User-Agent': `KontrNahryuk/${this.currentVersion}`,
          'Accept': 'application/octet-stream'
        }
      })

      if (!response.ok) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${response.status} ${response.statusText}`)
      }

      // Prepare downloads folder
      const downloadsPath = path.join(os.homedir(), 'Downloads')
      if (!fs.existsSync(downloadsPath)) {
        fs.mkdirSync(downloadsPath, { recursive: true })
      }

      // Save file
      const filePath = path.join(downloadsPath, portableAsset.name)
      const buffer = await response.arrayBuffer()
      fs.writeFileSync(filePath, Buffer.from(buffer))

      this.log(`‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${filePath}`)

      // Open Downloads folder
      shell.showItemInFolder(filePath)

      return {
        success: true,
        path: filePath
      }

    } catch (error) {
      this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error instanceof Error ? error.message : String(error)}`)
      return {
        success: false,
        path: false,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  }

  // ==========================================================================
  // PRIVATE METHODS
  // ==========================================================================

  /**
   * –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –≤–µ—Ä—Å—ñ—ó (semantic versioning: major.minor.patch)
   * 
   * @param {string} remoteVersion - –í—ñ–¥–¥–∞–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è (–∑ GitHub)
   * @param {string} currentVersion - –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è
   * @returns {boolean} true —è–∫—â–æ remoteVersion –Ω–æ–≤—ñ—à–∞
   */
  private isNewerVersion(remoteVersion: string, currentVersion: string): boolean {
    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å 'v' –∞–±–æ 'V' —è–∫—â–æ —î
    const cleanRemote = remoteVersion.replace(/^[vV]/, '').trim()
    const cleanCurrent = currentVersion.replace(/^[vV]/, '').trim()

    // –†–æ–∑–±–∏—Ç–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏: major.minor.patch
    const remoteParts = cleanRemote.split('.').map(part => 
      parseInt(part.replace(/[^\d]/g, ''), 10) || 0
    )
    const currentParts = cleanCurrent.split('.').map(part => 
      parseInt(part.replace(/[^\d]/g, ''), 10) || 0
    )

    // –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –¥–æ 3 —á–∞—Å—Ç–∏–Ω (—è–∫—â–æ –≤–µ—Ä—Å—ñ—è –Ω–µ–ø–æ–≤–Ω–∞)
    while (remoteParts.length < 3) remoteParts.push(0)
    while (currentParts.length < 3) currentParts.push(0)

    this.log(`üî¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π: [${remoteParts.join('.')}] vs [${currentParts.join('.')}]`)

    // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö: major -> minor -> patch
    for (let i = 0; i < 3; i++) {
      if (remoteParts[i] > currentParts[i]) {
        this.log(`   ‚Üë Remote –≤–µ—Ä—Å—ñ—è –Ω–æ–≤—ñ—à–∞ –Ω–∞ —Ä—ñ–≤–Ω—ñ ${i === 0 ? 'major' : i === 1 ? 'minor' : 'patch'}`)
        return true
      }
      if (remoteParts[i] < currentParts[i]) {
        this.log(`   ‚Üì Remote –≤–µ—Ä—Å—ñ—è —Å—Ç–∞—Ä—ñ—à–∞`)
        return false
      }
    }

    this.log(`   = –í–µ—Ä—Å—ñ—ó –æ–¥–Ω–∞–∫–æ–≤—ñ`)
    return false
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
   */
  private log(message: string): void {
    console.log(`[UpdateService] ${message}`)
  }
}

// ============================================================================
// SINGLETON EXPORT
// ============================================================================

export const updateService = new UpdateService()
export { UpdateService }
