/**
 * PythonExcelService - –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∏–∫–ª–∏–∫—É Python —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–æ–±–∫–∏ Excel
 */

import { spawn } from 'child_process';
import { join } from 'path';
import { app } from 'electron';
import { writeFileSync, unlinkSync } from 'fs';
import { tmpdir } from 'os';

export interface PythonProcessConfig {
  destinationFile: string;
  sourceFiles: string[];
  sheets: Array<{
    name: string;
    key_column: string;
    data_columns: string[];
    blacklist: string[];
  }>;
}

export interface PythonProcessResult {
  success: boolean;
  total_rows?: number;
  error?: string;
}

export class PythonExcelService {
  
  /**
   * –ó–Ω–∞–π—Ç–∏ Python executable
   */
  private static getPythonCommand(): string {
    // –í production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–ø–∞–∫–æ–≤–∞–Ω–∏–π Python
    if (app.isPackaged) {
      const pythonPath = join(process.resourcesPath, 'python', 'python.exe');
      return pythonPath;
    }
    
    // –í development –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π Python
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö
    const pythonPaths = [
      'C:\\Users\\sasha\\AppData\\Local\\Programs\\Python\\Python311\\python.exe',
      'C:\\Python311\\python.exe',
      'python'  // fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏–π PATH
    ];
    
    return pythonPaths[0];  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π Python 3.11
  }
  
  /**
   * –ó–Ω–∞–π—Ç–∏ —à–ª—è—Ö –¥–æ Python —Å–∫—Ä–∏–ø—Ç–∞
   */
  private static getScriptPath(): string {
    if (app.isPackaged) {
      return join(process.resourcesPath, 'python', 'excel_processor.py');
    }
    
    // –í development: __dirname = dist/electron/services/
    // –¢—Ä–µ–±–∞ –ø—ñ—Ç–∏ –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É: ../../../python/excel_processor.py
    return join(__dirname, '..', '..', '..', 'python', 'excel_processor.py');
  }
  
  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ Excel —Ñ–∞–π–ª–∏ —á–µ—Ä–µ–∑ Python
   */
  static async processExcel(config: PythonProcessConfig): Promise<PythonProcessResult> {
    return new Promise((resolve, reject) => {
      const pythonCmd = this.getPythonCommand();
      const scriptPath = this.getScriptPath();
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π JSON —Ñ–∞–π–ª –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º stdin)
      const tempConfigPath = join(tmpdir(), `stroiovka_config_${Date.now()}.json`);
      
      try {
        // –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É —Ñ–∞–π–ª –∑ UTF-8 BOM –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        const configJson = JSON.stringify(config, null, 2);
        writeFileSync(tempConfigPath, '\uFEFF' + configJson, 'utf-8');
        
        console.log(`üêç –ó–∞–ø—É—Å–∫ Python –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞...`);
        console.log(`   Python: ${pythonCmd}`);
        console.log(`   –°–∫—Ä–∏–ø—Ç: ${scriptPath}`);
        console.log(`   Config: ${tempConfigPath}`);
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ Python –ø—Ä–æ—Ü–µ—Å –∑ —à–ª—è—Ö–æ–º –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        const pythonProcess = spawn(pythonCmd, [scriptPath, tempConfigPath], {
          stdio: ['ignore', 'pipe', 'pipe'],
          env: {
            ...process.env,
            PYTHONIOENCODING: 'utf-8'
          }
        });
        
        let stdoutData = '';
        let stderrData = '';
        
        // –ó–±–∏—Ä–∞—î–º–æ –≤–∏—Ö—ñ–¥
        pythonProcess.stdout.on('data', (data) => {
          const text = data.toString('utf-8');
          stdoutData += text;
          console.log(text.trim());
        });
        
        pythonProcess.stderr.on('data', (data) => {
          const text = data.toString('utf-8');
          stderrData += text;
          console.error(text.trim());
        });
        
        // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        pythonProcess.on('close', (code) => {
          // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
          try {
            unlinkSync(tempConfigPath);
          } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
          }
          
          console.log(`üêç Python –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –∫–æ–¥–æ–º: ${code}`);
          
          if (code !== 0) {
            reject(new Error(`Python process exited with code ${code}\n${stderrData}`));
            return;
          }
          
          // –ü–∞—Ä—Å–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –≤–∏—Ö–æ–¥—É
          try {
            const resultMatch = stdoutData.match(/__RESULT__(.+?)__END__/s);
            
            if (resultMatch) {
              const result: PythonProcessResult = JSON.parse(resultMatch[1]);
              
              if (result.success) {
                resolve(result);
              } else {
                reject(new Error(result.error || 'Unknown Python error'));
              }
            } else {
              reject(new Error('Could not parse Python result'));
            }
          } catch (error) {
            reject(new Error(`Error parsing Python output: ${error}`));
          }
        });
        
        pythonProcess.on('error', (error) => {
          // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
          try {
            unlinkSync(tempConfigPath);
          } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
          }
          reject(new Error(`Failed to start Python process: ${error.message}`));
        });
        
      } catch (error) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        try {
          unlinkSync(tempConfigPath);
        } catch (e) {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        }
        reject(new Error(`Failed to create config file: ${error}`));
      }
    });
  }
}
