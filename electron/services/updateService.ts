/**
 * UpdateService - Advanced Auto-Update System for KontrNahryuk
 * Based on TZ_Auto_Update_IMPROVED.txt
 * 
 * Features:
 * - Real-time progress bar with download speed
 * - Automatic ZIP extraction
 * - Automatic backup system
 * - Automatic file replacement
 * - Auto-restart after update
 * 
 * @version 3.0.0 - Advanced with Progress Bar & Auto-Install
 */

import { EventEmitter } from 'events'
import { app, shell } from 'electron'
import * as path from 'path'
import * as fs from 'fs'
import * as os from 'os'
import AdmZip from 'adm-zip'
import { spawn } from 'child_process'


// ============================================================================
// TYPES & INTERFACES
// ============================================================================

/**
 * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å
 */
export interface UpdateInfo {
  hasUpdate: boolean          // –ß–∏ —î –¥–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  latestVersion: string        // –û—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è –Ω–∞ GitHub
  currentVersion: string       // –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–æ–¥–∞—Ç–∫—É
  releaseInfo: any | null      // –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–ª—ñ–∑ –∑ GitHub API
  error: string | null         // –ü–æ–º–∏–ª–∫–∞ (—è–∫—â–æ —î)
}

/**
 * –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
export interface DownloadProgress {
  percent: number              // –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (0-100)
  downloadedBytes: number      // –°–∫—ñ–ª—å–∫–∏ –±–∞–π—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
  totalBytes: number           // –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
  bytesPerSecond: number       // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
export interface DownloadResult {
  success: boolean             // –ß–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
  path: string | false         // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ false
  error?: string               // –ü–æ–º–∏–ª–∫–∞ (—è–∫—â–æ —î)
}

// ============================================================================
// UPDATE SERVICE CLASS
// ============================================================================

class UpdateService extends EventEmitter {
  private currentVersion: string
  private updateCheckInProgress: boolean = false
  private downloadInProgress: boolean = false
  private updateBasePath: string
  private backupPath: string
  private readonly GITHUB_REPO = 'sashashostak/KontrNahryuk'

  constructor() {
    super()
    this.currentVersion = app.getVersion()
    
    // –ü–∞–ø–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
    const localAppData = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local')
    this.updateBasePath = path.join(localAppData, 'KontrNahryuk', 'Updates')
    this.backupPath = path.join(localAppData, 'KontrNahryuk', 'Backup')
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    this.ensureDirectories()
    
    this.log(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: ${this.currentVersion}`)
    this.log(`–ü–∞–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å: ${this.updateBasePath}`)
  }

  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
   */
  private ensureDirectories(): void {
    if (!fs.existsSync(this.updateBasePath)) {
      fs.mkdirSync(this.updateBasePath, { recursive: true })
    }
    if (!fs.existsSync(this.backupPath)) {
      fs.mkdirSync(this.backupPath, { recursive: true })
    }
  }

  // ==========================================================================
  // PUBLIC METHODS
  // ==========================================================================

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –¥–æ–¥–∞—Ç–∫—É
   */
  getCurrentVersion(): string {
    return this.currentVersion
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ GitHub Releases API
   * 
   * @returns {Promise<UpdateInfo>} –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  async checkForUpdates(): Promise<UpdateInfo> {
    // Prevent multiple simultaneous checks
    if (this.updateCheckInProgress) {
      this.log('‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è')
      return {
        hasUpdate: false,
        latestVersion: this.currentVersion,
        currentVersion: this.currentVersion,
        releaseInfo: null,
        error: '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è'
      }
    }

    this.updateCheckInProgress = true

    try {
      this.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–∞ GitHub...')

      // Fetch latest release from GitHub API
      const url = `https://api.github.com/repos/${this.GITHUB_REPO}/releases/latest`
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'User-Agent': `KontrNahryuk/${this.currentVersion}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      })

      if (!response.ok) {
        throw new Error(`GitHub API –ø–æ–º–∏–ª–∫–∞: ${response.status} ${response.statusText}`)
      }

      const release = await response.json()
      const latestVersion = release.tag_name || release.name || 'unknown'
      const hasUpdate = this.isNewerVersion(latestVersion, this.currentVersion)

      this.log(`üì¶ –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: ${this.currentVersion}`)
      this.log(`üì¶ –û—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è: ${latestVersion}`)
      this.log(`${hasUpdate ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!' : '‚úì –ü—Ä–æ–≥—Ä–∞–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞'}`)

      this.updateCheckInProgress = false

      return {
        hasUpdate,
        latestVersion,
        currentVersion: this.currentVersion,
        releaseInfo: hasUpdate ? release : null,
        error: null
      }

    } catch (error) {
      this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å: ${error instanceof Error ? error.message : String(error)}`)
      this.updateCheckInProgress = false

      return {
        hasUpdate: false,
        latestVersion: this.currentVersion,
        currentVersion: this.currentVersion,
        releaseInfo: null,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º —Ç–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–æ—é
   * 
   * @param {UpdateInfo} updateInfo - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Promise<DownloadResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  async downloadUpdate(updateInfo: UpdateInfo): Promise<DownloadResult> {
    if (this.downloadInProgress) {
      return {
        success: false,
        path: false,
        error: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è'
      }
    }

    this.downloadInProgress = true

    try {
      // –ö—Ä–æ–∫ 1: –ó–Ω–∞–π—Ç–∏ patch –∞–±–æ portable —Ñ–∞–π–ª
      const release = updateInfo.releaseInfo
      if (!release) {
        throw new Error('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–ª—ñ–∑ –≤—ñ–¥—Å—É—Ç–Ω—è')
      }

      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ patch —Ñ–∞–π–ª (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó —Ç—Ä–∞—Ñ—ñ–∫—É)
      const currentVersion = app.getVersion()
      
      // –®—É–∫–∞—î–º–æ –ø—Ä—è–º–∏–π –ø–∞—Ç—á –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
      let patchAsset = release.assets?.find((asset: any) =>
        asset.name.toLowerCase().includes('patch') && 
        asset.name.includes(currentVersion) &&
        asset.name.endsWith('.zip')
      )

      // –Ø–∫—â–æ –ø—Ä—è–º–∏–π –ø–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –ª–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤
      if (!patchAsset) {
        this.log(`‚ö†Ô∏è –ü—Ä—è–º–∏–π –ø–∞—Ç—á ${currentVersion} ‚Üí ${updateInfo.latestVersion} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`)
        this.log(`üîó –®—É–∫–∞—é –ª–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≤–µ—Ä—Å—ñ—ó...`)
        
        const patchChain = await this.findPatchChain(currentVersion, updateInfo.latestVersion)
        
        if (patchChain.length > 0) {
          this.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ª–∞–Ω—Ü—é–∂–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å: ${patchChain.map(p => p.version).join(' ‚Üí ')}`)
          this.log(`üì¶ –ë—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${patchChain.length} –ø–∞—Ç—á—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å portable)`)
          
          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ç—á—ñ –ø–æ —á–µ—Ä–∑—ñ
          return await this.downloadAndApplyPatchChain(patchChain)
        } else {
          this.log(`‚ö†Ô∏è –õ–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`)
        }
      }

      // –Ø–∫—â–æ patch –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ portable
      const portableAsset = release.assets?.find((asset: any) =>
        asset.name.toLowerCase().includes('portable') && 
        asset.name.endsWith('.zip')
      )

      const updateAsset = patchAsset || portableAsset

      if (!updateAsset) {
        this.log('‚ö†Ô∏è –§–∞–π–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–∫—Ä–∏–≤–∞—é GitHub')
        shell.openExternal(release.html_url)
        throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ')
      }

      const isPatch = !!patchAsset
      this.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${isPatch ? 'patch' : 'portable'} —Ñ–∞–π–ª—É: ${updateAsset.name}`)
      
      // –ö—Ä–æ–∫ 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
      const downloadPath = path.join(this.updateBasePath, updateAsset.name)
      await this.downloadWithProgress(updateAsset.browser_download_url, downloadPath)

      this.log(`‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${downloadPath}`)

      // –ö—Ä–æ–∫ 3: –†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏
      this.emit('status', { message: '–†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...' })
      const extractPath = path.join(this.updateBasePath, 'extracted')
      await this.extractZip(downloadPath, extractPath)

      this.log(`‚úÖ –§–∞–π–ª–∏ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ: ${extractPath}`)

      // –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
      this.emit('status', { message: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...' })
      await this.createBackup()

      this.log(`‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ`)

      // –ö—Ä–æ–∫ 5: –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–∞–π–ª–∏
      this.emit('status', { message: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...' })
      await this.replaceFiles(extractPath)

      this.log(`‚úÖ –§–∞–π–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ`)

      // –ö—Ä–æ–∫ 6: –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
      await this.cleanupTempFiles(downloadPath, extractPath)

      // –ö—Ä–æ–∫ 7: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫
      this.emit('status', { message: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É...' })
      setTimeout(() => {
        app.relaunch()
        app.exit(0)
      }, 1000)

      return {
        success: true,
        path: extractPath
      }

    } catch (error) {
      console.error('[UpdateService] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error)
      this.emit('error', { 
        message: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' 
      })
      return {
        success: false,
        path: false,
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    } finally {
      this.downloadInProgress = false
    }
  }

  // ==========================================================================
  // PRIVATE HELPER METHODS
  // ==========================================================================

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É
   */
  private async downloadWithProgress(url: string, savePath: string): Promise<void> {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'User-Agent': `KontrNahryuk/${this.currentVersion}`,
        'Accept': 'application/octet-stream'
      }
    })

    if (!response.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${response.status}`)
    }

    const totalBytes = parseInt(response.headers.get('content-length') || '0', 10)
    
    if (!response.body) {
      throw new Error('Response body –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
    }

    const reader = response.body.getReader()
    const chunks: Uint8Array[] = []
    let downloadedBytes = 0
    let startTime = Date.now()
    let lastEmitTime = Date.now()

    this.log(`üì¶ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${this.formatBytes(totalBytes)}`)

    while (true) {
      const { done, value } = await reader.read()

      if (done) break

      chunks.push(value)
      downloadedBytes += value.length

      // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 100ms
      const now = Date.now()
      if (now - lastEmitTime >= 100) {
        const elapsed = (now - startTime) / 1000
        const bytesPerSecond = downloadedBytes / elapsed
        const percent = totalBytes > 0 ? (downloadedBytes / totalBytes) * 100 : 0

        this.emit('download-progress', {
          percent: Math.round(percent * 100) / 100,
          downloadedBytes,
          totalBytes,
          bytesPerSecond: Math.round(bytesPerSecond)
        })

        this.log(
          `üìä –ü—Ä–æ–≥—Ä–µ—Å: ${percent.toFixed(1)}% ` +
          `(${this.formatBytes(downloadedBytes)} / ${this.formatBytes(totalBytes)}) ` +
          `${this.formatBytes(bytesPerSecond)}/s`
        )

        lastEmitTime = now
      }
    }

    // –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
    this.emit('download-progress', {
      percent: 100,
      downloadedBytes: totalBytes,
      totalBytes,
      bytesPerSecond: 0
    })

    // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª
    const buffer = Buffer.concat(chunks)
    fs.writeFileSync(savePath, buffer)
  }

  /**
   * –†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ ZIP –∞—Ä—Ö—ñ–≤
   */
  private async extractZip(zipPath: string, extractPath: string): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É –ø–∞–ø–∫—É —è–∫—â–æ —ñ—Å–Ω—É—î
        if (fs.existsSync(extractPath)) {
          fs.rmSync(extractPath, { recursive: true, force: true })
        }

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–∞–ø–∫—É
        fs.mkdirSync(extractPath, { recursive: true })

        // –†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏
        const zip = new AdmZip(zipPath)
        zip.extractAllTo(extractPath, true)

        this.log(`üìÇ –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${zip.getEntries().length}`)

        resolve()
      } catch (error) {
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è: ${error instanceof Error ? error.message : 'Unknown'}`))
      }
    })
  }

  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
   */
  private async createBackup(): Promise<void> {
    try {
      const currentExePath = app.getPath('exe')
      const currentDir = path.dirname(currentExePath)
      const backupDir = path.join(this.backupPath, `v${this.currentVersion}_${Date.now()}`)

      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true })
      }

      // –ö–æ–ø—ñ—é–≤–∞—Ç–∏ .exe —Ñ–∞–π–ª
      const exeFileName = path.basename(currentExePath)
      const backupExePath = path.join(backupDir, exeFileName)
      fs.copyFileSync(currentExePath, backupExePath)

      // –ö–æ–ø—ñ—é–≤–∞—Ç–∏ resources —è–∫—â–æ —î
      const resourcesPath = path.join(currentDir, 'resources')
      if (fs.existsSync(resourcesPath)) {
        const backupResourcesPath = path.join(backupDir, 'resources')
        this.copyDirectory(resourcesPath, backupResourcesPath)
      }

      this.log(`üíæ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupDir}`)

      // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ backups (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 3)
      this.cleanupOldBackups(3)

    } catch (error) {
      console.warn('[UpdateService] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup:', error)
      // –ù–µ –±–ª–æ–∫—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ backup –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤—Å—è
    }
  }

  /**
   * –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–∞–π–ª–∏ –Ω–æ–≤–æ—é –≤–µ—Ä—Å—ñ—î—é
   */
  private async replaceFiles(extractPath: string): Promise<void> {
    const currentExePath = app.getPath('exe')
    const currentDir = path.dirname(currentExePath)

    // –ó–Ω–∞–π—Ç–∏ –ø—ñ–¥–ø–∞–ø–∫—É –∑ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    let actualExtractPath = extractPath
    const entries = fs.readdirSync(extractPath)
    
    // –Ø–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞, —Ñ–∞–π–ª–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    if (entries.length === 1 && fs.statSync(path.join(extractPath, entries[0])).isDirectory()) {
      actualExtractPath = path.join(extractPath, entries[0])
    }

    // –ó–Ω–∞–π—Ç–∏ .exe —Ñ–∞–π–ª —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ (–¥–ª—è full portable)
    const findExeFile = (dir: string): string | null => {
      const files = fs.readdirSync(dir)
      for (const file of files) {
        const filePath = path.join(dir, file)
        if (file.endsWith('.exe')) {
          return filePath
        }
        if (fs.statSync(filePath).isDirectory()) {
          const found = findExeFile(filePath)
          if (found) return found
        }
      }
      return null
    }

    const newExePath = findExeFile(actualExtractPath)

    // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ .exe - —Ü–µ full portable, –∑–∞–º—ñ–Ω—é—î–º–æ —á–µ—Ä–µ–∑ .bat
    if (newExePath) {
      this.log('üì¶ Full portable –≤–∏—è–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ .bat —Å–∫—Ä–∏–ø—Ç')
      
      const tempExePath = path.join(currentDir, `${path.basename(currentExePath)}.new`)

      // –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π .exe —è–∫ —Ç–∏–º—á–∞—Å–æ–≤–∏–π
      fs.copyFileSync(newExePath, tempExePath)

      // –°—Ç–≤–æ—Ä–∏—Ç–∏ .bat —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º—ñ–Ω–∏ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è (–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Unicode —à–ª—è—Ö—ñ–≤)
      const batScript = `@echo off
chcp 65001 > nul
echo –û–Ω–æ–≤–ª–µ–Ω–Ω—è KontrNahryuk...
timeout /t 3 /nobreak > nul

:retry
del /f /q "%~dp0${path.basename(currentExePath)}"
if exist "%~dp0${path.basename(currentExePath)}" (
  timeout /t 1 /nobreak > nul
  goto retry
)

move /y "%~dp0${path.basename(tempExePath)}" "%~dp0${path.basename(currentExePath)}"
if errorlevel 1 (
  echo –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—É!
  pause
  exit /b 1
)

echo –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É...
timeout /t 1 /nobreak > nul
start "" "%~dp0${path.basename(currentExePath)}"

timeout /t 2 /nobreak > nul
del "%~f0"
exit
`

      const batPath = path.join(currentDir, 'update.bat')
      fs.writeFileSync(batPath, batScript, { encoding: 'utf8' })

      // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ .bat —Å–∫—Ä–∏–ø—Ç
      spawn('cmd.exe', ['/c', batPath], {
        detached: true,
        stdio: 'ignore',
        cwd: currentDir
      }).unref()
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ –ü–Ü–°–õ–Ø –∑–∞–ø—É—Å–∫—É bat
      setTimeout(() => {
        app.quit()
      }, 500)
      
    } else {
      // –¶–µ patch —Ñ–∞–π–ª - –∑–∞–º—ñ–Ω—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ–∞–π–ª–∏ –≤ resources/app/
      this.log('üîÑ Patch –≤–∏—è–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ resources/app/')
      
      // –®–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏ resources/app
      const currentResourcesPath = path.join(currentDir, 'resources', 'app')
      
      if (!fs.existsSync(currentResourcesPath)) {
        throw new Error('–ü–æ—Ç–æ—á–Ω–∞ –ø–∞–ø–∫–∞ resources/app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–≤—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞—Ç—á—É:
      // 1. –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: dist/ + package.json (–±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ actualExtractPath)
      // 2. –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: resources/app/ (–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ actualExtractPath)
      
      const distFolder = path.join(actualExtractPath, 'dist')
      const packageJson = path.join(actualExtractPath, 'package.json')
      const resourcesPath = path.join(actualExtractPath, 'resources', 'app')
      
      // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–µ
      const copyRecursive = (src: string, dest: string, basePath?: string) => {
        if (!fs.existsSync(src)) return
        
        const stat = fs.statSync(src)
        if (stat.isDirectory()) {
          if (!fs.existsSync(dest)) {
            fs.mkdirSync(dest, { recursive: true })
          }
          const files = fs.readdirSync(src)
          for (const file of files) {
            copyRecursive(path.join(src, file), path.join(dest, file), basePath || src)
          }
        } else {
          fs.copyFileSync(src, dest)
          const relativePath = basePath ? path.relative(basePath, src) : path.basename(src)
          this.log(`  ‚úì ${relativePath}`)
        }
      }
      
      // –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: dist/ + package.json
      if (fs.existsSync(distFolder) && fs.existsSync(packageJson)) {
        this.log('üì¶ Patch –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (dist/ + package.json)')
        
        // –ö–æ–ø—ñ—é—î–º–æ dist/
        const targetDist = path.join(currentResourcesPath, 'dist')
        copyRecursive(distFolder, targetDist, distFolder)
        
        // –ö–æ–ø—ñ—é—î–º–æ package.json
        fs.copyFileSync(packageJson, path.join(currentResourcesPath, 'package.json'))
        this.log('  ‚úì package.json')
        
        this.log('‚úÖ Patch —Ñ–∞–π–ª–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ (–Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
        
      // –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: resources/app/
      } else if (fs.existsSync(resourcesPath)) {
        this.log('üì¶ Patch —Å—Ç–∞—Ä–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (resources/app/)')
        
        copyRecursive(resourcesPath, currentResourcesPath, resourcesPath)
        
        this.log('‚úÖ Patch —Ñ–∞–π–ª–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ (—Å—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
        
      } else {
        throw new Error('Patch –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω—ñ dist/ + package.json, –Ω—ñ resources/app/')
      }
      
      // –î–ª—è patch –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ relaunch
      app.relaunch()
      app.exit(0)
    }
  }  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
   */
  private async cleanupTempFiles(zipPath: string, extractPath: string): Promise<void> {
    try {
      if (fs.existsSync(zipPath)) {
        fs.unlinkSync(zipPath)
      }
      if (fs.existsSync(extractPath)) {
        fs.rmSync(extractPath, { recursive: true, force: true })
      }
    } catch (error) {
      console.warn('[UpdateService] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error)
    }
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ backups
   */
  private cleanupOldBackups(keepCount: number): void {
    try {
      const backups = fs.readdirSync(this.backupPath)
        .filter(name => name.startsWith('v'))
        .map(name => ({
          name,
          path: path.join(this.backupPath, name),
          time: fs.statSync(path.join(this.backupPath, name)).mtime.getTime()
        }))
        .sort((a, b) => b.time - a.time)

      backups.slice(keepCount).forEach(backup => {
        fs.rmSync(backup.path, { recursive: true, force: true })
        this.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π backup: ${backup.name}`)
      })
    } catch (error) {
      console.warn('[UpdateService] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è backups:', error)
    }
  }

  /**
   * –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
   */
  private copyDirectory(src: string, dest: string): void {
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true })
    }

    const entries = fs.readdirSync(src, { withFileTypes: true })

    for (const entry of entries) {
      const srcPath = path.join(src, entry.name)
      const destPath = path.join(dest, entry.name)

      if (entry.isDirectory()) {
        this.copyDirectory(srcPath, destPath)
      } else {
        fs.copyFileSync(srcPath, destPath)
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –±–∞–π—Ç–∏ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥
   */
  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes'

    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))

    return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i]
  }

  // ==========================================================================
  // PRIVATE METHODS
  // ==========================================================================

  /**
   * –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –≤–µ—Ä—Å—ñ—ó (semantic versioning: major.minor.patch)
   * 
   * @param {string} remoteVersion - –í—ñ–¥–¥–∞–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è (–∑ GitHub)
   * @param {string} currentVersion - –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è
   * @returns {boolean} true —è–∫—â–æ remoteVersion –Ω–æ–≤—ñ—à–∞
   */
  private isNewerVersion(remoteVersion: string, currentVersion: string): boolean {
    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å 'v' –∞–±–æ 'V' —è–∫—â–æ —î
    const cleanRemote = remoteVersion.replace(/^[vV]/, '').trim()
    const cleanCurrent = currentVersion.replace(/^[vV]/, '').trim()

    // –†–æ–∑–±–∏—Ç–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏: major.minor.patch
    const remoteParts = cleanRemote.split('.').map(part => 
      parseInt(part.replace(/[^\d]/g, ''), 10) || 0
    )
    const currentParts = cleanCurrent.split('.').map(part => 
      parseInt(part.replace(/[^\d]/g, ''), 10) || 0
    )

    // –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –¥–æ 3 —á–∞—Å—Ç–∏–Ω (—è–∫—â–æ –≤–µ—Ä—Å—ñ—è –Ω–µ–ø–æ–≤–Ω–∞)
    while (remoteParts.length < 3) remoteParts.push(0)
    while (currentParts.length < 3) currentParts.push(0)

    this.log(`üî¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π: [${remoteParts.join('.')}] vs [${currentParts.join('.')}]`)

    // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö: major -> minor -> patch
    for (let i = 0; i < 3; i++) {
      if (remoteParts[i] > currentParts[i]) {
        this.log(`   ‚Üë Remote –≤–µ—Ä—Å—ñ—è –Ω–æ–≤—ñ—à–∞ –Ω–∞ —Ä—ñ–≤–Ω—ñ ${i === 0 ? 'major' : i === 1 ? 'minor' : 'patch'}`)
        return true
      }
      if (remoteParts[i] < currentParts[i]) {
        this.log(`   ‚Üì Remote –≤–µ—Ä—Å—ñ—è —Å—Ç–∞—Ä—ñ—à–∞`)
        return false
      }
    }

    this.log(`   = –í–µ—Ä—Å—ñ—ó –æ–¥–Ω–∞–∫–æ–≤—ñ`)
    return false
  }

  /**
   * –ó–Ω–∞–π—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó
   * 
   * @param {string} fromVersion - –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—Å—ñ—è (–ø–æ—Ç–æ—á–Ω–∞)
   * @param {string} toVersion - –¶—ñ–ª—å–æ–≤–∞ –≤–µ—Ä—Å—ñ—è (–Ω–æ–≤–∞)
   * @returns {Promise<Array<{version: string, release: any, patchAsset: any}>>} –õ–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤
   */
  private async findPatchChain(fromVersion: string, toVersion: string): Promise<Array<{version: string, release: any, patchAsset: any}>> {
    try {
      // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ–ª—ñ–∑–∏ –∑ GitHub
      const url = `https://api.github.com/repos/${this.GITHUB_REPO}/releases`
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'User-Agent': `KontrNahryuk/${this.currentVersion}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      })

      if (!response.ok) {
        throw new Error(`GitHub API –ø–æ–º–∏–ª–∫–∞: ${response.status}`)
      }

      const releases = await response.json()
      
      // –ü–∞—Ä—Å–∏–º–æ –≤–µ—Ä—Å—ñ—ó
      const cleanFrom = fromVersion.replace(/^[vV]/, '')
      const cleanTo = toVersion.replace(/^[vV]/, '')
      
      const fromParts = cleanFrom.split('.').map(p => parseInt(p, 10) || 0)
      const toParts = cleanTo.split('.').map(p => parseInt(p, 10) || 0)
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≤–µ—Ä—Å—ñ—ó
      const chain: Array<{version: string, release: any, patchAsset: any}> = []
      let currentVer = cleanFrom
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –≤–µ—Ä—Å—ñ–π (—Ç—ñ–ª—å–∫–∏ patch increment)
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1.4.5 -> 1.4.6 -> 1.4.7 -> 1.4.8 -> 1.4.9
      const [major, minor, patchStart] = fromParts
      const patchEnd = toParts[2]
      
      for (let patch = patchStart + 1; patch <= patchEnd; patch++) {
        const targetVersion = `${major}.${minor}.${patch}`
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–µ–ª—ñ–∑ –¥–ª—è —Ü—ñ—î—ó –≤–µ—Ä—Å—ñ—ó
        const release = releases.find((r: any) => {
          const releaseVer = (r.tag_name || r.name || '').replace(/^[vV]/, '')
          return releaseVer === targetVersion
        })
        
        if (!release) {
          this.log(`   ‚ö†Ô∏è –†–µ–ª—ñ–∑ v${targetVersion} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ GitHub`)
          return [] // –õ–∞–Ω—Ü—é–∂–æ–∫ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–∏–π
        }
        
        // –®—É–∫–∞—î–º–æ –ø–∞—Ç—á –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó –¥–æ —Ü—ñ—î—ó
        const prevVersion = `${major}.${minor}.${patch - 1}`
        const patchAsset = release.assets?.find((asset: any) =>
          asset.name.toLowerCase().includes('patch') &&
          asset.name.includes(prevVersion) &&
          asset.name.endsWith('.zip')
        )
        
        if (!patchAsset) {
          this.log(`   ‚ö†Ô∏è –ü–∞—Ç—á v${prevVersion} ‚Üí v${targetVersion} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`)
          return [] // –õ–∞–Ω—Ü—é–∂–æ–∫ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–∏–π
        }
        
        chain.push({
          version: targetVersion,
          release: release,
          patchAsset: patchAsset
        })
        
        currentVer = targetVersion
      }
      
      return chain
      
    } catch (error) {
      this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ª–∞–Ω—Ü—é–∂–∫–∞ –ø–∞—Ç—á—ñ–≤: ${error}`)
      return []
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –ø–∞—Ç—á—ñ–≤
   * 
   * @param {Array} patchChain - –ú–∞—Å–∏–≤ –ø–∞—Ç—á—ñ–≤ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
   * @returns {Promise<DownloadResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  private async downloadAndApplyPatchChain(patchChain: Array<{version: string, release: any, patchAsset: any}>): Promise<DownloadResult> {
    try {
      this.log(`üì¶ –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞ –∑ ${patchChain.length} –ø–∞—Ç—á—ñ–≤...`)
      
      for (let i = 0; i < patchChain.length; i++) {
        const patch = patchChain[i]
        const progress = `[${i + 1}/${patchChain.length}]`
        
        this.log(`${progress} –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ v${patch.version}...`)
        this.emit('status', { message: `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ç—á—É ${i + 1}/${patchChain.length}...` })
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞—Ç—á
        const downloadPath = path.join(this.updateBasePath, patch.patchAsset.name)
        await this.downloadWithProgress(patch.patchAsset.browser_download_url, downloadPath)
        
        this.log(`${progress} ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${patch.patchAsset.name}`)
        
        // –†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏
        this.emit('status', { message: `–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ç—á—É ${i + 1}/${patchChain.length}...` })
        const extractPath = path.join(this.updateBasePath, `extracted-${patch.version}`)
        await this.extractZip(downloadPath, extractPath)
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ç—á (–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)
        this.emit('status', { message: `–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—É ${i + 1}/${patchChain.length}...` })
        await this.copyPatchFiles(extractPath)
        
        this.log(`${progress} ‚úÖ –ü–∞—Ç—á –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ`)
        
        // –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        try {
          fs.unlinkSync(downloadPath)
          fs.rmSync(extractPath, { recursive: true, force: true })
        } catch (cleanupError) {
          this.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: ${cleanupError}`)
        }
      }
      
      this.log(`‚úÖ –í—Å—ñ –ø–∞—Ç—á—ñ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`)
      this.emit('status', { message: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...' })
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –ø–∞—Ç—á—ñ–≤
      app.relaunch()
      app.exit(0)
      
      return {
        success: true,
        path: this.updateBasePath
      }
      
    } catch (error) {
      this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞ –ø–∞—Ç—á—ñ–≤: ${error}`)
      return {
        success: false,
        path: false,
        error: error instanceof Error ? error.message : String(error)
      }
    } finally {
      this.downloadInProgress = false
    }
  }

  /**
   * –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –ø–∞—Ç—á—É –¥–æ resources/app
   * 
   * @param {string} extractPath - –®–ª—è—Ö –¥–æ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ç—á—É
   */
  private async copyPatchFiles(extractPath: string): Promise<void> {
    // –ü–æ—Ç–æ—á–Ω–∞ –ø–∞–ø–∫–∞ app (–¥–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è electron)
    const currentDir = path.dirname(app.getPath('exe'))
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞—Ç—á—É
    let actualExtractPath = extractPath
    const distFolder = path.join(extractPath, 'dist')
    const packageJson = path.join(extractPath, 'package.json')
    
    // –Ø–∫—â–æ —î dist/, –ø—Ä–∞—Ü—é—î–º–æ –∑ —Ü—ñ—î—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    if (fs.existsSync(distFolder) && fs.existsSync(packageJson)) {
      // –ü–∞—Ç—á –º—ñ—Å—Ç–∏—Ç—å dist/ + package.json
      const targetPath = path.join(currentDir, 'resources', 'app')
      
      if (!fs.existsSync(targetPath)) {
        throw new Error('–ü–∞–ø–∫–∞ resources/app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
      }
      
      // –ö–æ–ø—ñ—é—î–º–æ dist/
      const targetDist = path.join(targetPath, 'dist')
      this.copyRecursive(distFolder, targetDist)
      
      // –ö–æ–ø—ñ—é—î–º–æ package.json
      fs.copyFileSync(packageJson, path.join(targetPath, 'package.json'))
      this.log('  ‚úì package.json')
      
      this.log('‚úÖ –§–∞–π–ª–∏ –ø–∞—Ç—á—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ')
      
    } else {
      throw new Error('–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ç—á—É')
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
   */
  private copyRecursive(src: string, dest: string): void {
    if (!fs.existsSync(src)) return
    
    const stat = fs.statSync(src)
    if (stat.isDirectory()) {
      if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true })
      }
      const files = fs.readdirSync(src)
      for (const file of files) {
        this.copyRecursive(path.join(src, file), path.join(dest, file))
      }
    } else {
      fs.copyFileSync(src, dest)
      this.log(`  ‚úì ${path.relative(src, dest)}`)
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
   */
  private log(message: string): void {
    console.log(`[UpdateService] ${message}`)
  }
}

// ============================================================================
// SINGLETON EXPORT
// ============================================================================

export const updateService = new UpdateService()
export { UpdateService }
