// –¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –ø–æ—à—É–∫—É –ü–Ü–ë
const fs = require('fs');

// –ö–æ–ø—ñ—é—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É –ª–æ–≥—ñ–∫—É –∑ UkrainianNameDeclension
class FixedUkrainianNameDeclension {
  
  // –ë–∞–∑–∞ —á–æ–ª–æ–≤—ñ—á–∏—Ö —ñ–º–µ–Ω
  static maleFirstNames = {
    "–û–ª–µ–∫—Å–∞–Ω–¥—Ä": {
      nominative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", genitive: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", dative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—É",
      accusative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", instrumental: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º", locative: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ"
    },
    "–í–æ–ª–æ–¥–∏–º–∏—Ä": {
      nominative: "–í–æ–ª–æ–¥–∏–º–∏—Ä", genitive: "–í–æ–ª–æ–¥–∏–º–∏—Ä–∞", dative: "–í–æ–ª–æ–¥–∏–º–∏—Ä—É",
      accusative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–∞", instrumental: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–º", locative: "–í–æ–ª–æ–¥–∏–º–∏—Ä—ñ"
    }
  };

  // –ë–∞–∑–∞ —á–æ–ª–æ–≤—ñ—á–∏—Ö –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
  static malePatronymics = {
    "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á": {
      nominative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á", genitive: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞", dative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á—É",
      accusative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞", instrumental: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–µ–º", locative: "–í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á—ñ"
    },
    "–ü–µ—Ç—Ä–æ–≤–∏—á": {
      nominative: "–ü–µ—Ç—Ä–æ–≤–∏—á", genitive: "–ü–µ—Ç—Ä–æ–≤–∏—á–∞", dative: "–ü–µ—Ç—Ä–æ–≤–∏—á—É", 
      accusative: "–ü–µ—Ç—Ä–æ–≤–∏—á–∞", instrumental: "–ü–µ—Ç—Ä–æ–≤–∏—á–µ–º", locative: "–ü–µ—Ç—Ä–æ–≤–∏—á—ñ"
    }
  };

  // –ë–∞–∑–∞ –ø—Ä—ñ–∑–≤–∏—â
  static surnamePatterns = {
    "–∞–∫": { // –¥–ª—è –®–æ—Å—Ç–∞–∫
      male: (base) => ({
        nominative: base + "–∞–∫", genitive: base + "–∞–∫–∞", dative: base + "–∞–∫—É",
        accusative: base + "–∞–∫–∞", instrumental: base + "–∞–∫–æ–º", locative: base + "–∞—Ü—ñ"
      })
    },
    "–µ–Ω–∫–æ": { // –¥–ª—è –Ü–≤–∞–Ω–µ–Ω–∫–æ  
      male: (base) => ({
        nominative: base + "–µ–Ω–∫–æ", genitive: base + "–µ–Ω–∫–æ", dative: base + "–µ–Ω–∫–æ",
        accusative: base + "–µ–Ω–∫–æ", instrumental: base + "–µ–Ω–∫–æ", locative: base + "–µ–Ω–∫–æ"
      })
    }
  };

  static getFirstNameForms(firstName) {
    if (this.maleFirstNames[firstName]) {
      return Object.values(this.maleFirstNames[firstName]);
    }
    return [firstName]; // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
  }

  static getLastNameForms(lastName) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –ø—Ä—ñ–∑–≤–∏—â
    for (const [pattern, rules] of Object.entries(this.surnamePatterns)) {
      if (lastName.endsWith(pattern)) {
        const base = lastName.slice(0, -pattern.length);
        if (rules.male) {
          return Object.values(rules.male(base));
        }
      }
    }
    return [lastName]; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω
  }

  static getMiddleNameForms(middleName) {
    if (this.malePatronymics[middleName]) {
      return Object.values(this.malePatronymics[middleName]);
    }
    return [middleName]; // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ
  }

  static getAllFormsOfName(fullName) {
    const parts = fullName.trim().split(/\s+/);
    let lastName = '', firstName = '', middleName = '';

    if (parts.length >= 3) {
      [lastName, firstName, middleName] = parts;
    } else if (parts.length === 2) {
      [lastName, firstName] = parts;
    } else {
      return [fullName];
    }

    const lastNameForms = this.getLastNameForms(lastName);
    const firstNameForms = this.getFirstNameForms(firstName);
    const middleNameForms = middleName ? this.getMiddleNameForms(middleName) : [''];

    const allForms = [];

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    for (const lForm of lastNameForms) {
      for (const fForm of firstNameForms) {
        for (const mForm of middleNameForms) {
          if (middleName) {
            // –ó –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
            allForms.push(`${lForm} ${fForm} ${mForm}`);
            allForms.push(`${fForm} ${mForm} ${lForm}`);
          }
          // –ë–µ–∑ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
          allForms.push(`${lForm} ${fForm}`);
          allForms.push(`${fForm} ${lForm}`);
        }
      }
    }

    return [...new Set(allForms)]; // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  }

  // –í–ò–ü–†–ê–í–õ–ï–ù–ê –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –í–°–Ü —Å–ª–æ–≤–∞
  static findNameMatch(text, targetName) {
    const targetForms = this.getAllFormsOfName(targetName);
    const textLower = text.toLowerCase();
    
    console.log(`\nüîé –®—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ: "${text}"`);
    console.log(`üéØ –¶—ñ–ª—å–æ–≤–µ —ñ–º'—è: "${targetName}"`);
    
    // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ñ–æ—Ä–º–∏
    for (const form of targetForms) {
      const words = form.split(' ').filter(w => w.length >= 2);
      
      console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º—É: "${form}" -> —Å–ª–æ–≤–∞: [`, words.map(w => `'${w}'`).join(', '), `]`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ
      const foundWords = [];
      for (const word of words) {
        if (textLower.includes(word.toLowerCase())) {
          console.log(`   - "${word}" ‚úÖ –∑–Ω–∞–π–¥–µ–Ω–æ`);
          foundWords.push(word);
        } else {
          console.log(`   - "${word}" ‚ùå –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        }
      }
      
      // –Ø–∫—â–æ –≤—Å—ñ —Å–ª–æ–≤–∞ —Ñ–æ—Ä–º–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ - —Ü–µ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
      if (words.length > 0 && foundWords.length === words.length) {
        console.log(`‚úÖ –ü–Ü–ë "${targetName}" –ó–ù–ê–ô–î–ï–ù–û –≤ –∞–±–∑–∞—Ü—ñ!`);
        return true;
      }
    }
    
    console.log(`‚ùå –ü–Ü–ë "${targetName}" –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞–±–∑–∞—Ü—ñ`);
    return false;
  }

  static findOrderParagraphs(documentText, names) {
    console.log(`\nüîç === –ü–û–®–£–ö –†–û–ó–ü–û–†–Ø–î–ñ–ï–ù–¨ ===`);
    console.log(`üìã –®—É–∫–∞—î–º–æ –ü–Ü–ë: [${names.map(n => `"${n}"`).join(', ')}]`);
    
    const paragraphs = documentText.split(/\n+/).filter(p => p.trim());
    const results = [];
    
    for (let i = 0; i < paragraphs.length; i++) {
      const paragraph = paragraphs[i];
      
      console.log(`\nüîç === –ê–ë–ó–ê–¶ ${i + 1} ===`);
      console.log(`üìù –¢–µ–∫—Å—Ç –∞–±–∑–∞—Ü—É: "${paragraph}"`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ª–æ–≤–∞ "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è"
      const containsOrder = paragraph.toLowerCase().includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è');
      console.log(`üîë –ú—ñ—Å—Ç–∏—Ç—å "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ": ${containsOrder ? '‚úÖ –¢–ê–ö' : '‚ùå –ù–Ü'}`);
      
      if (containsOrder) {
        console.log(`üîç –®—É–∫–∞—î–º–æ –ü–Ü–ë –≤ —Ü—å–æ–º—É –∞–±–∑–∞—Ü—ñ...`);
        
        const foundNames = [];
        for (const name of names) {
          console.log(`\nüë§ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ü–Ü–ë: "${name}"`);
          
          if (this.findNameMatch(paragraph, name)) {
            foundNames.push(name);
          }
        }
        
        console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ë–ó–ê–¶–£ ${i + 1}:`);
        console.log(`   - –ú—ñ—Å—Ç–∏—Ç—å "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ": ${containsOrder}`);
        console.log(`   - –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë (${foundNames.length}): [`, foundNames.map(n => `'${n}'`).join(', '), `]`);
        
        if (foundNames.length > 0) {
          console.log(`   - –í–ö–õ–Æ–ß–ò–¢–ò –í –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –¢–ê–ö`);
          results.push({
            text: paragraph,
            foundNames: foundNames
          });
        } else {
          console.log(`   - –í–ö–õ–Æ–ß–ò–¢–ò –í –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ùå –ù–Ü`);
        }
      }
    }
    
    return results;
  }
}

// ===== –¢–ï–°–¢ =====
console.log(`üß™ === –¢–ï–°–¢ –í–ò–ü–†–ê–í–õ–ï–ù–û–á –õ–û–ì–Ü–ö–ò ===\n`);

const testDocument = `–ü–µ—Ä—à–∏–π –∞–±–∑–∞—Ü –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω—ñ—á–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ.

–£ —Ü—å–æ–º—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ –∑–≥–∞–¥—É—î—Ç—å—Å—è –®–æ—Å—Ç–∞–∫–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á–∞ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

–¢—Ä–µ—Ç—ñ–π –∞–±–∑–∞—Ü —Ç–∞–∫–æ–∂ –±–µ–∑ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.

–ß–µ—Ç–≤–µ—Ä—Ç–∏–π –∞–±–∑–∞—Ü –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è, —Ö–æ—á–∞ —Ç—É—Ç —î –®–æ—Å—Ç–∞–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä.

–ü'—è—Ç–∏–π –∞–±–∑–∞—Ü –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –Ü–≤–∞–Ω–µ–Ω–∫–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä–∞ –ü–µ—Ç—Ä–æ–≤–∏—á–∞.
`;

const testNames = [
  '–®–æ—Å—Ç–∞–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á',
  '–Ü–≤–∞–Ω–µ–Ω–∫–æ –í–æ–ª–æ–¥–∏–º–∏—Ä –ü–µ—Ç—Ä–æ–≤–∏—á'
];

const results = FixedUkrainianNameDeclension.findOrderParagraphs(testDocument, testNames);

console.log(`\nüéØ === –ü–Ü–î–°–£–ú–û–ö ===`);
console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∞–±–∑–∞—Ü—ñ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: ${results.length}`);
results.forEach((result, index) => {
  console.log(`   ${index + 1}. –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë: ${result.foundNames.join(', ')}`);
});

console.log(`\nüéØ === –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===`);
if (results.length > 0) {
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –∞–±–∑–∞—Ü—ñ–≤:\n`);
  results.forEach((result, index) => {
    console.log(`${index + 1}. –ê–ë–ó–ê–¶:`);
    console.log(`   –¢–µ–∫—Å—Ç: "${result.text}"`);
    console.log(`   –ó–Ω–∞–π–¥–µ–Ω—ñ –ü–Ü–ë: ${result.foundNames.join(', ')}\n`);
  });
} else {
  console.log(`‚ùå –ñ–æ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ –∞–±–∑–∞—Ü—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
}